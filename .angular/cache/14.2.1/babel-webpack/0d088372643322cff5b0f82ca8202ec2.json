{"ast":null,"code":"import { assign, every, forEach, isArray, isDefined, isFunction, some } from 'min-dash';\nimport { delegate as domDelegate, event as domEvent, attr as domAttr, query as domQuery, classes as domClasses, domify } from 'min-dom';\nimport { getBBox } from '../../util/Elements';\nimport { escapeCSS } from '../../util/EscapeUtil';\nvar entrySelector = '.entry';\nvar DEFAULT_PRIORITY = 1000;\nvar CONTEXT_PAD_PADDING = 12;\n/**\n * @typedef {djs.model.Base|djs.model.Base[]} ContextPadTarget\n */\n\n/**\n * A context pad that displays element specific, contextual actions next\n * to a diagram element.\n *\n * @param {Canvas} canvas\n * @param {Object} config\n * @param {boolean|Object} [config.scale={ min: 1.0, max: 1.5 }]\n * @param {number} [config.scale.min]\n * @param {number} [config.scale.max]\n * @param {EventBus} eventBus\n * @param {Overlays} overlays\n */\n\nexport default function ContextPad(canvas, config, eventBus, overlays) {\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._overlays = overlays;\n  var scale = isDefined(config && config.scale) ? config.scale : {\n    min: 1,\n    max: 1.5\n  };\n  this._overlaysConfig = {\n    scale: scale\n  };\n  this._current = null;\n\n  this._init();\n}\nContextPad.$inject = ['canvas', 'config.contextPad', 'eventBus', 'overlays'];\n/**\n * Registers events needed for interaction with other components.\n */\n\nContextPad.prototype._init = function () {\n  var self = this;\n\n  this._eventBus.on('selection.changed', function (event) {\n    var selection = event.newSelection;\n    var target = selection.length ? selection.length === 1 ? selection[0] : selection : null;\n\n    if (target) {\n      self.open(target, true);\n    } else {\n      self.close();\n    }\n  });\n\n  this._eventBus.on('elements.changed', function (event) {\n    var elements = event.elements,\n        current = self._current;\n\n    if (!current) {\n      return;\n    }\n\n    var currentTarget = current.target;\n    var currentChanged = some(isArray(currentTarget) ? currentTarget : [currentTarget], function (element) {\n      return includes(elements, element);\n    }); // re-open if elements in current selection changed\n\n    if (currentChanged) {\n      self.open(currentTarget, true);\n    }\n  });\n};\n/**\n * Register context pad provider.\n *\n * @param  {number} [priority=1000]\n * @param  {ContextPadProvider} provider\n *\n * @example\n * const contextPadProvider = {\n *   getContextPadEntries: function(element) {\n *     return function(entries) {\n *       return {\n *         ...entries,\n *         'entry-1': {\n *           label: 'My Entry',\n *           action: function() { alert(\"I have been clicked!\"); }\n *         }\n *       };\n *     }\n *   },\n *\n *   getMultiElementContextPadEntries: function(elements) {\n *     // ...\n *   }\n * };\n *\n * contextPad.registerProvider(800, contextPadProvider);\n */\n\n\nContextPad.prototype.registerProvider = function (priority, provider) {\n  if (!provider) {\n    provider = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  this._eventBus.on('contextPad.getProviders', priority, function (event) {\n    event.providers.push(provider);\n  });\n};\n/**\n * Get context pad entries for given elements.\n *\n * @param {ContextPadTarget} target\n *\n * @return {ContextPadEntryDescriptor[]} list of entries\n */\n\n\nContextPad.prototype.getEntries = function (target) {\n  var providers = this._getProviders();\n\n  var provideFn = isArray(target) ? 'getMultiElementContextPadEntries' : 'getContextPadEntries';\n  var entries = {}; // loop through all providers and their entries.\n  // group entries by id so that overriding an entry is possible\n\n  forEach(providers, function (provider) {\n    if (!isFunction(provider[provideFn])) {\n      return;\n    }\n\n    var entriesOrUpdater = provider[provideFn](target);\n\n    if (isFunction(entriesOrUpdater)) {\n      entries = entriesOrUpdater(entries);\n    } else {\n      forEach(entriesOrUpdater, function (entry, id) {\n        entries[id] = entry;\n      });\n    }\n  });\n  return entries;\n};\n/**\n * Trigger context pad action.\n *\n * @param  {string} action\n * @param  {Event} event\n * @param  {boolean} [autoActivate=false]\n */\n\n\nContextPad.prototype.trigger = function (action, event, autoActivate) {\n  var target = this._current.target,\n      entries = this._current.entries,\n      entry,\n      handler,\n      originalEvent,\n      button = event.delegateTarget || event.target;\n\n  if (!button) {\n    return event.preventDefault();\n  }\n\n  entry = entries[domAttr(button, 'data-action')];\n  handler = entry.action;\n  originalEvent = event.originalEvent || event; // simple action (via callback function)\n\n  if (isFunction(handler)) {\n    if (action === 'click') {\n      return handler(originalEvent, target, autoActivate);\n    }\n  } else {\n    if (handler[action]) {\n      return handler[action](originalEvent, target, autoActivate);\n    }\n  } // silence other actions\n\n\n  event.preventDefault();\n};\n/**\n * Open the context pad for given elements.\n *\n * @param {ContextPadTarget} target\n * @param {boolean} [force=false] - Force re-opening context pad.\n */\n\n\nContextPad.prototype.open = function (target, force) {\n  if (!force && this.isOpen(target)) {\n    return;\n  }\n\n  this.close();\n\n  this._updateAndOpen(target);\n};\n\nContextPad.prototype._getProviders = function () {\n  var event = this._eventBus.createEvent({\n    type: 'contextPad.getProviders',\n    providers: []\n  });\n\n  this._eventBus.fire(event);\n\n  return event.providers;\n};\n/**\n * @param {ContextPadTarget} target\n */\n\n\nContextPad.prototype._updateAndOpen = function (target) {\n  var entries = this.getEntries(target),\n      pad = this.getPad(target),\n      html = pad.html,\n      image;\n  forEach(entries, function (entry, id) {\n    var grouping = entry.group || 'default',\n        control = domify(entry.html || '<div class=\"entry\" draggable=\"true\"></div>'),\n        container;\n    domAttr(control, 'data-action', id);\n    container = domQuery('[data-group=' + escapeCSS(grouping) + ']', html);\n\n    if (!container) {\n      container = domify('<div class=\"group\"></div>');\n      domAttr(container, 'data-group', grouping);\n      html.appendChild(container);\n    }\n\n    container.appendChild(control);\n\n    if (entry.className) {\n      addClasses(control, entry.className);\n    }\n\n    if (entry.title) {\n      domAttr(control, 'title', entry.title);\n    }\n\n    if (entry.imageUrl) {\n      image = domify('<img>');\n      domAttr(image, 'src', entry.imageUrl);\n      image.style.width = '100%';\n      image.style.height = '100%';\n      control.appendChild(image);\n    }\n  });\n  domClasses(html).add('open');\n  this._current = {\n    target: target,\n    entries: entries,\n    pad: pad\n  };\n\n  this._eventBus.fire('contextPad.open', {\n    current: this._current\n  });\n};\n/**\n * @param {ContextPadTarget} target\n *\n * @return {Overlay}\n */\n\n\nContextPad.prototype.getPad = function (target) {\n  if (this.isOpen()) {\n    return this._current.pad;\n  }\n\n  var self = this;\n  var overlays = this._overlays;\n  var html = domify('<div class=\"djs-context-pad\"></div>');\n\n  var position = this._getPosition(target);\n\n  var overlaysConfig = assign({\n    html: html\n  }, this._overlaysConfig, position);\n  domDelegate.bind(html, entrySelector, 'click', function (event) {\n    self.trigger('click', event);\n  });\n  domDelegate.bind(html, entrySelector, 'dragstart', function (event) {\n    self.trigger('dragstart', event);\n  }); // stop propagation of mouse events\n\n  domEvent.bind(html, 'mousedown', function (event) {\n    event.stopPropagation();\n  });\n\n  var activeRootElement = this._canvas.getRootElement();\n\n  this._overlayId = overlays.add(activeRootElement, 'context-pad', overlaysConfig);\n  var pad = overlays.get(this._overlayId);\n\n  this._eventBus.fire('contextPad.create', {\n    target: target,\n    pad: pad\n  });\n\n  return pad;\n};\n/**\n * Close the context pad\n */\n\n\nContextPad.prototype.close = function () {\n  if (!this.isOpen()) {\n    return;\n  }\n\n  this._overlays.remove(this._overlayId);\n\n  this._overlayId = null;\n\n  this._eventBus.fire('contextPad.close', {\n    current: this._current\n  });\n\n  this._current = null;\n};\n/**\n * Check if pad is open.\n *\n * If target is provided, check if it is opened\n * for the given target (single or multiple elements).\n *\n * @param {ContextPadTarget} [target]\n * @return {boolean}\n */\n\n\nContextPad.prototype.isOpen = function (target) {\n  var current = this._current;\n\n  if (!current) {\n    return false;\n  } // basic no-args is open check\n\n\n  if (!target) {\n    return true;\n  }\n\n  var currentTarget = current.target; // strict handling of single vs. multi-selection\n\n  if (isArray(target) !== isArray(currentTarget)) {\n    return false;\n  }\n\n  if (isArray(target)) {\n    return target.length === currentTarget.length && every(target, function (element) {\n      return includes(currentTarget, element);\n    });\n  } else {\n    return currentTarget === target;\n  }\n};\n/**\n * Get contex pad position.\n *\n * @param {ContextPadTarget} target\n * @return {Bounds}\n */\n\n\nContextPad.prototype._getPosition = function (target) {\n  var elements = isArray(target) ? target : [target];\n  var bBox = getBBox(elements);\n  return {\n    position: {\n      left: bBox.x + bBox.width + CONTEXT_PAD_PADDING,\n      top: bBox.y - CONTEXT_PAD_PADDING / 2\n    }\n  };\n}; // helpers //////////\n\n\nfunction addClasses(element, classNames) {\n  var classes = domClasses(element);\n  classNames = isArray(classNames) ? classNames : classNames.split(/\\s+/g);\n  classNames.forEach(function (cls) {\n    classes.add(cls);\n  });\n}\n/**\n * @param {any[]} array\n * @param {any} item\n *\n * @return {boolean}\n */\n\n\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}","map":{"version":3,"names":["assign","every","forEach","isArray","isDefined","isFunction","some","delegate","domDelegate","event","domEvent","attr","domAttr","query","domQuery","classes","domClasses","domify","getBBox","escapeCSS","entrySelector","DEFAULT_PRIORITY","CONTEXT_PAD_PADDING","ContextPad","canvas","config","eventBus","overlays","_canvas","_eventBus","_overlays","scale","min","max","_overlaysConfig","_current","_init","$inject","prototype","self","on","selection","newSelection","target","length","open","close","elements","current","currentTarget","currentChanged","element","includes","registerProvider","priority","provider","providers","push","getEntries","_getProviders","provideFn","entries","entriesOrUpdater","entry","id","trigger","action","autoActivate","handler","originalEvent","button","delegateTarget","preventDefault","force","isOpen","_updateAndOpen","createEvent","type","fire","pad","getPad","html","image","grouping","group","control","container","appendChild","className","addClasses","title","imageUrl","style","width","height","add","position","_getPosition","overlaysConfig","bind","stopPropagation","activeRootElement","getRootElement","_overlayId","get","remove","bBox","left","x","top","y","classNames","split","cls","array","item","indexOf"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/context-pad/ContextPad.js"],"sourcesContent":["import {\n  assign,\n  every,\n  forEach,\n  isArray,\n  isDefined,\n  isFunction,\n  some\n} from 'min-dash';\n\nimport {\n  delegate as domDelegate,\n  event as domEvent,\n  attr as domAttr,\n  query as domQuery,\n  classes as domClasses,\n  domify as domify\n} from 'min-dom';\n\nimport { getBBox } from '../../util/Elements';\n\nimport {\n  escapeCSS\n} from '../../util/EscapeUtil';\n\nvar entrySelector = '.entry';\n\nvar DEFAULT_PRIORITY = 1000;\nvar CONTEXT_PAD_PADDING = 12;\n\n\n/**\n * @typedef {djs.model.Base|djs.model.Base[]} ContextPadTarget\n */\n\n/**\n * A context pad that displays element specific, contextual actions next\n * to a diagram element.\n *\n * @param {Canvas} canvas\n * @param {Object} config\n * @param {boolean|Object} [config.scale={ min: 1.0, max: 1.5 }]\n * @param {number} [config.scale.min]\n * @param {number} [config.scale.max]\n * @param {EventBus} eventBus\n * @param {Overlays} overlays\n */\nexport default function ContextPad(canvas, config, eventBus, overlays) {\n\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._overlays = overlays;\n\n  var scale = isDefined(config && config.scale) ? config.scale : {\n    min: 1,\n    max: 1.5\n  };\n\n  this._overlaysConfig = {\n    scale: scale\n  };\n\n  this._current = null;\n\n  this._init();\n}\n\nContextPad.$inject = [\n  'canvas',\n  'config.contextPad',\n  'eventBus',\n  'overlays'\n];\n\n\n/**\n * Registers events needed for interaction with other components.\n */\nContextPad.prototype._init = function() {\n  var self = this;\n\n  this._eventBus.on('selection.changed', function(event) {\n\n    var selection = event.newSelection;\n\n    var target = selection.length\n      ? selection.length === 1\n        ? selection[0]\n        : selection\n      : null;\n\n    if (target) {\n      self.open(target, true);\n    } else {\n      self.close();\n    }\n  });\n\n  this._eventBus.on('elements.changed', function(event) {\n    var elements = event.elements,\n        current = self._current;\n\n    if (!current) {\n      return;\n    }\n\n    var currentTarget = current.target;\n\n    var currentChanged = some(\n      isArray(currentTarget) ? currentTarget : [ currentTarget ],\n      function(element) {\n        return includes(elements, element);\n      }\n    );\n\n    // re-open if elements in current selection changed\n    if (currentChanged) {\n      self.open(currentTarget, true);\n    }\n  });\n};\n\n\n/**\n * Register context pad provider.\n *\n * @param  {number} [priority=1000]\n * @param  {ContextPadProvider} provider\n *\n * @example\n * const contextPadProvider = {\n *   getContextPadEntries: function(element) {\n *     return function(entries) {\n *       return {\n *         ...entries,\n *         'entry-1': {\n *           label: 'My Entry',\n *           action: function() { alert(\"I have been clicked!\"); }\n *         }\n *       };\n *     }\n *   },\n *\n *   getMultiElementContextPadEntries: function(elements) {\n *     // ...\n *   }\n * };\n *\n * contextPad.registerProvider(800, contextPadProvider);\n */\nContextPad.prototype.registerProvider = function(priority, provider) {\n  if (!provider) {\n    provider = priority;\n    priority = DEFAULT_PRIORITY;\n  }\n\n  this._eventBus.on('contextPad.getProviders', priority, function(event) {\n    event.providers.push(provider);\n  });\n};\n\n\n/**\n * Get context pad entries for given elements.\n *\n * @param {ContextPadTarget} target\n *\n * @return {ContextPadEntryDescriptor[]} list of entries\n */\nContextPad.prototype.getEntries = function(target) {\n  var providers = this._getProviders();\n\n  var provideFn = isArray(target)\n    ? 'getMultiElementContextPadEntries'\n    : 'getContextPadEntries';\n\n  var entries = {};\n\n  // loop through all providers and their entries.\n  // group entries by id so that overriding an entry is possible\n  forEach(providers, function(provider) {\n\n    if (!isFunction(provider[provideFn])) {\n      return;\n    }\n\n    var entriesOrUpdater = provider[provideFn](target);\n\n    if (isFunction(entriesOrUpdater)) {\n      entries = entriesOrUpdater(entries);\n    } else {\n      forEach(entriesOrUpdater, function(entry, id) {\n        entries[id] = entry;\n      });\n    }\n  });\n\n  return entries;\n};\n\n\n/**\n * Trigger context pad action.\n *\n * @param  {string} action\n * @param  {Event} event\n * @param  {boolean} [autoActivate=false]\n */\nContextPad.prototype.trigger = function(action, event, autoActivate) {\n\n  var target = this._current.target,\n      entries = this._current.entries,\n      entry,\n      handler,\n      originalEvent,\n      button = event.delegateTarget || event.target;\n\n  if (!button) {\n    return event.preventDefault();\n  }\n\n  entry = entries[domAttr(button, 'data-action')];\n  handler = entry.action;\n\n  originalEvent = event.originalEvent || event;\n\n  // simple action (via callback function)\n  if (isFunction(handler)) {\n    if (action === 'click') {\n      return handler(originalEvent, target, autoActivate);\n    }\n  } else {\n    if (handler[action]) {\n      return handler[action](originalEvent, target, autoActivate);\n    }\n  }\n\n  // silence other actions\n  event.preventDefault();\n};\n\n\n/**\n * Open the context pad for given elements.\n *\n * @param {ContextPadTarget} target\n * @param {boolean} [force=false] - Force re-opening context pad.\n */\nContextPad.prototype.open = function(target, force) {\n  if (!force && this.isOpen(target)) {\n    return;\n  }\n\n  this.close();\n\n  this._updateAndOpen(target);\n};\n\nContextPad.prototype._getProviders = function() {\n\n  var event = this._eventBus.createEvent({\n    type: 'contextPad.getProviders',\n    providers: []\n  });\n\n  this._eventBus.fire(event);\n\n  return event.providers;\n};\n\n\n/**\n * @param {ContextPadTarget} target\n */\nContextPad.prototype._updateAndOpen = function(target) {\n  var entries = this.getEntries(target),\n      pad = this.getPad(target),\n      html = pad.html,\n      image;\n\n  forEach(entries, function(entry, id) {\n    var grouping = entry.group || 'default',\n        control = domify(entry.html || '<div class=\"entry\" draggable=\"true\"></div>'),\n        container;\n\n    domAttr(control, 'data-action', id);\n\n    container = domQuery('[data-group=' + escapeCSS(grouping) + ']', html);\n    if (!container) {\n      container = domify('<div class=\"group\"></div>');\n      domAttr(container, 'data-group', grouping);\n\n      html.appendChild(container);\n    }\n\n    container.appendChild(control);\n\n    if (entry.className) {\n      addClasses(control, entry.className);\n    }\n\n    if (entry.title) {\n      domAttr(control, 'title', entry.title);\n    }\n\n    if (entry.imageUrl) {\n      image = domify('<img>');\n      domAttr(image, 'src', entry.imageUrl);\n      image.style.width = '100%';\n      image.style.height = '100%';\n\n      control.appendChild(image);\n    }\n  });\n\n  domClasses(html).add('open');\n\n  this._current = {\n    target: target,\n    entries: entries,\n    pad: pad\n  };\n\n  this._eventBus.fire('contextPad.open', { current: this._current });\n};\n\n/**\n * @param {ContextPadTarget} target\n *\n * @return {Overlay}\n */\nContextPad.prototype.getPad = function(target) {\n  if (this.isOpen()) {\n    return this._current.pad;\n  }\n\n  var self = this;\n\n  var overlays = this._overlays;\n\n  var html = domify('<div class=\"djs-context-pad\"></div>');\n\n  var position = this._getPosition(target);\n\n  var overlaysConfig = assign({\n    html: html\n  }, this._overlaysConfig, position);\n\n  domDelegate.bind(html, entrySelector, 'click', function(event) {\n    self.trigger('click', event);\n  });\n\n  domDelegate.bind(html, entrySelector, 'dragstart', function(event) {\n    self.trigger('dragstart', event);\n  });\n\n  // stop propagation of mouse events\n  domEvent.bind(html, 'mousedown', function(event) {\n    event.stopPropagation();\n  });\n\n  var activeRootElement = this._canvas.getRootElement();\n\n  this._overlayId = overlays.add(activeRootElement, 'context-pad', overlaysConfig);\n\n  var pad = overlays.get(this._overlayId);\n\n  this._eventBus.fire('contextPad.create', {\n    target: target,\n    pad: pad\n  });\n\n  return pad;\n};\n\n\n/**\n * Close the context pad\n */\nContextPad.prototype.close = function() {\n  if (!this.isOpen()) {\n    return;\n  }\n\n  this._overlays.remove(this._overlayId);\n\n  this._overlayId = null;\n\n  this._eventBus.fire('contextPad.close', { current: this._current });\n\n  this._current = null;\n};\n\n/**\n * Check if pad is open.\n *\n * If target is provided, check if it is opened\n * for the given target (single or multiple elements).\n *\n * @param {ContextPadTarget} [target]\n * @return {boolean}\n */\nContextPad.prototype.isOpen = function(target) {\n  var current = this._current;\n\n  if (!current) {\n    return false;\n  }\n\n  // basic no-args is open check\n  if (!target) {\n    return true;\n  }\n\n  var currentTarget = current.target;\n\n  // strict handling of single vs. multi-selection\n  if (isArray(target) !== isArray(currentTarget)) {\n    return false;\n  }\n\n  if (isArray(target)) {\n    return (\n      target.length === currentTarget.length &&\n      every(target, function(element) {\n        return includes(currentTarget, element);\n      })\n    );\n  } else {\n    return currentTarget === target;\n  }\n};\n\n\n/**\n * Get contex pad position.\n *\n * @param {ContextPadTarget} target\n * @return {Bounds}\n */\nContextPad.prototype._getPosition = function(target) {\n\n  var elements = isArray(target) ? target : [ target ];\n  var bBox = getBBox(elements);\n\n  return {\n    position: {\n      left: bBox.x + bBox.width + CONTEXT_PAD_PADDING,\n      top: bBox.y - CONTEXT_PAD_PADDING / 2\n    }\n  };\n};\n\n\n// helpers //////////\n\nfunction addClasses(element, classNames) {\n  var classes = domClasses(element);\n\n  classNames = isArray(classNames) ? classNames : classNames.split(/\\s+/g);\n\n  classNames.forEach(function(cls) {\n    classes.add(cls);\n  });\n}\n\n/**\n * @param {any[]} array\n * @param {any} item\n *\n * @return {boolean}\n */\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}