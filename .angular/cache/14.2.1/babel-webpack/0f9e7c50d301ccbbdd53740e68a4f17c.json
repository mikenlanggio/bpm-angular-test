{"ast":null,"code":"/**\n * Returns the intersection between two line segments a and b.\n *\n * @param {Point} l1s\n * @param {Point} l1e\n * @param {Point} l2s\n * @param {Point} l2e\n *\n * @return {Point}\n */\nexport default function lineIntersect(l1s, l1e, l2s, l2e) {\n  // if the lines intersect, the result contains the x and y of the\n  // intersection (treating the lines as infinite) and booleans for\n  // whether line segment 1 or line segment 2 contain the point\n  var denominator, a, b, c, numerator;\n  denominator = (l2e.y - l2s.y) * (l1e.x - l1s.x) - (l2e.x - l2s.x) * (l1e.y - l1s.y);\n\n  if (denominator == 0) {\n    return null;\n  }\n\n  a = l1s.y - l2s.y;\n  b = l1s.x - l2s.x;\n  numerator = (l2e.x - l2s.x) * a - (l2e.y - l2s.y) * b;\n  c = numerator / denominator; // if we cast these lines infinitely in\n  // both directions, they intersect here\n\n  return {\n    x: Math.round(l1s.x + c * (l1e.x - l1s.x)),\n    y: Math.round(l1s.y + c * (l1e.y - l1s.y))\n  };\n}","map":{"version":3,"names":["lineIntersect","l1s","l1e","l2s","l2e","denominator","a","b","c","numerator","y","x","Math","round"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/modeling/behavior/util/LineIntersect.js"],"sourcesContent":["/**\n * Returns the intersection between two line segments a and b.\n *\n * @param {Point} l1s\n * @param {Point} l1e\n * @param {Point} l2s\n * @param {Point} l2e\n *\n * @return {Point}\n */\nexport default function lineIntersect(l1s, l1e, l2s, l2e) {\n\n  // if the lines intersect, the result contains the x and y of the\n  // intersection (treating the lines as infinite) and booleans for\n  // whether line segment 1 or line segment 2 contain the point\n  var denominator, a, b, c, numerator;\n\n  denominator = ((l2e.y - l2s.y) * (l1e.x - l1s.x)) - ((l2e.x - l2s.x) * (l1e.y - l1s.y));\n\n  if (denominator == 0) {\n    return null;\n  }\n\n  a = l1s.y - l2s.y;\n  b = l1s.x - l2s.x;\n  numerator = ((l2e.x - l2s.x) * a) - ((l2e.y - l2s.y) * b);\n\n  c = numerator / denominator;\n\n  // if we cast these lines infinitely in\n  // both directions, they intersect here\n  return {\n    x: Math.round(l1s.x + (c * (l1e.x - l1s.x))),\n    y: Math.round(l1s.y + (c * (l1e.y - l1s.y)))\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,GAAjC,EAAsCC,GAAtC,EAA2C;EAExD;EACA;EACA;EACA,IAAIC,WAAJ,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,SAA1B;EAEAJ,WAAW,GAAI,CAACD,GAAG,CAACM,CAAJ,GAAQP,GAAG,CAACO,CAAb,KAAmBR,GAAG,CAACS,CAAJ,GAAQV,GAAG,CAACU,CAA/B,CAAD,GAAuC,CAACP,GAAG,CAACO,CAAJ,GAAQR,GAAG,CAACQ,CAAb,KAAmBT,GAAG,CAACQ,CAAJ,GAAQT,GAAG,CAACS,CAA/B,CAArD;;EAEA,IAAIL,WAAW,IAAI,CAAnB,EAAsB;IACpB,OAAO,IAAP;EACD;;EAEDC,CAAC,GAAGL,GAAG,CAACS,CAAJ,GAAQP,GAAG,CAACO,CAAhB;EACAH,CAAC,GAAGN,GAAG,CAACU,CAAJ,GAAQR,GAAG,CAACQ,CAAhB;EACAF,SAAS,GAAI,CAACL,GAAG,CAACO,CAAJ,GAAQR,GAAG,CAACQ,CAAb,IAAkBL,CAAnB,GAAyB,CAACF,GAAG,CAACM,CAAJ,GAAQP,GAAG,CAACO,CAAb,IAAkBH,CAAvD;EAEAC,CAAC,GAAGC,SAAS,GAAGJ,WAAhB,CAjBwD,CAmBxD;EACA;;EACA,OAAO;IACLM,CAAC,EAAEC,IAAI,CAACC,KAAL,CAAWZ,GAAG,CAACU,CAAJ,GAASH,CAAC,IAAIN,GAAG,CAACS,CAAJ,GAAQV,GAAG,CAACU,CAAhB,CAArB,CADE;IAELD,CAAC,EAAEE,IAAI,CAACC,KAAL,CAAWZ,GAAG,CAACS,CAAJ,GAASF,CAAC,IAAIN,GAAG,CAACQ,CAAJ,GAAQT,GAAG,CAACS,CAAhB,CAArB;EAFE,CAAP;AAID"},"metadata":{},"sourceType":"module"}