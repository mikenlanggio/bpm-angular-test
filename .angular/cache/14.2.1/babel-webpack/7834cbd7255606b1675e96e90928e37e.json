{"ast":null,"code":"import { reduce, keys, forEach, assign } from 'min-dash';\nimport { getBusinessObject, getDi } from '../../../util/ModelUtil';\nvar DEFAULT_FLOW = 'default',\n    ID = 'id',\n    DI = 'di';\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n/**\n * A handler that implements a BPMN 2.0 property update.\n *\n * This should be used to set simple properties on elements with\n * an underlying BPMN business object.\n *\n * Use respective diagram-js provided handlers if you would\n * like to perform automated modeling.\n */\n\nexport default function UpdatePropertiesHandler(elementRegistry, moddle, translate, modeling, textRenderer) {\n  this._elementRegistry = elementRegistry;\n  this._moddle = moddle;\n  this._translate = translate;\n  this._modeling = modeling;\n  this._textRenderer = textRenderer;\n}\nUpdatePropertiesHandler.$inject = ['elementRegistry', 'moddle', 'translate', 'modeling', 'textRenderer']; // api //////////////////////\n\n/**\n * Updates a BPMN element with a list of new properties\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element the element to update\n * @param {Object} context.properties a list of properties to set on the element's\n *                                    businessObject (the BPMN model element)\n *\n * @return {Array<djs.model.Base>} the updated element\n */\n\nUpdatePropertiesHandler.prototype.execute = function (context) {\n  var element = context.element,\n      changed = [element],\n      translate = this._translate;\n\n  if (!element) {\n    throw new Error(translate('element required'));\n  }\n\n  var elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n  var businessObject = element.businessObject,\n      properties = unwrapBusinessObjects(context.properties),\n      oldProperties = context.oldProperties || getProperties(element, properties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(businessObject[ID]);\n    elementRegistry.updateId(element, properties[ID]);\n    ids.claim(properties[ID], businessObject);\n  } // correctly indicate visual changes on default flow updates\n\n\n  if (DEFAULT_FLOW in properties) {\n    if (properties[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));\n    }\n\n    if (businessObject[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));\n    }\n  } // update properties\n\n\n  setProperties(element, properties); // store old values\n\n  context.oldProperties = oldProperties;\n  context.changed = changed; // indicate changed on objects affected by the update\n\n  return changed;\n};\n\nUpdatePropertiesHandler.prototype.postExecute = function (context) {\n  var element = context.element,\n      label = element.label;\n  var text = label && getBusinessObject(label).name;\n\n  if (!text) {\n    return;\n  } // get layouted text bounds and resize external\n  // external label accordingly\n\n\n  var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);\n\n  this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS);\n};\n/**\n * Reverts the update on a BPMN elements properties.\n *\n * @param  {Object} context\n *\n * @return {djs.model.Base} the updated element\n */\n\n\nUpdatePropertiesHandler.prototype.revert = function (context) {\n  var element = context.element,\n      properties = context.properties,\n      oldProperties = context.oldProperties,\n      businessObject = element.businessObject,\n      elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids; // update properties\n\n  setProperties(element, oldProperties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(properties[ID]);\n    elementRegistry.updateId(element, oldProperties[ID]);\n    ids.claim(oldProperties[ID], businessObject);\n  }\n\n  return context.changed;\n};\n\nfunction isIdChange(properties, businessObject) {\n  return ID in properties && properties[ID] !== businessObject[ID];\n}\n\nfunction getProperties(element, properties) {\n  var propertyNames = keys(properties),\n      businessObject = element.businessObject,\n      di = getDi(element);\n  return reduce(propertyNames, function (result, key) {\n    // handle DI separately\n    if (key !== DI) {\n      result[key] = businessObject.get(key);\n    } else {\n      result[key] = getDiProperties(di, keys(properties.di));\n    }\n\n    return result;\n  }, {});\n}\n\nfunction getDiProperties(di, propertyNames) {\n  return reduce(propertyNames, function (result, key) {\n    result[key] = di && di.get(key);\n    return result;\n  }, {});\n}\n\nfunction setProperties(element, properties) {\n  var businessObject = element.businessObject,\n      di = getDi(element);\n  forEach(properties, function (value, key) {\n    if (key !== DI) {\n      businessObject.set(key, value);\n    } else {\n      // only update, if di exists\n      if (di) {\n        setDiProperties(di, value);\n      }\n    }\n  });\n}\n\nfunction setDiProperties(di, properties) {\n  forEach(properties, function (value, key) {\n    di.set(key, value);\n  });\n}\n\nvar referencePropertyNames = ['default'];\n/**\n * Make sure we unwrap the actual business object\n * behind diagram element that may have been\n * passed as arguments.\n *\n * @param  {Object} properties\n *\n * @return {Object} unwrappedProps\n */\n\nfunction unwrapBusinessObjects(properties) {\n  var unwrappedProps = assign({}, properties);\n  referencePropertyNames.forEach(function (name) {\n    if (name in properties) {\n      unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);\n    }\n  });\n  return unwrappedProps;\n}","map":{"version":3,"names":["reduce","keys","forEach","assign","getBusinessObject","getDi","DEFAULT_FLOW","ID","DI","NULL_DIMENSIONS","width","height","UpdatePropertiesHandler","elementRegistry","moddle","translate","modeling","textRenderer","_elementRegistry","_moddle","_translate","_modeling","_textRenderer","$inject","prototype","execute","context","element","changed","Error","ids","businessObject","properties","unwrapBusinessObjects","oldProperties","getProperties","isIdChange","unclaim","updateId","claim","push","get","id","setProperties","postExecute","label","text","name","newLabelBounds","getExternalLabelBounds","resizeShape","revert","propertyNames","di","result","key","getDiProperties","value","set","setDiProperties","referencePropertyNames","unwrappedProps"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/modeling/cmd/UpdatePropertiesHandler.js"],"sourcesContent":["import {\n  reduce,\n  keys,\n  forEach,\n  assign\n} from 'min-dash';\n\nimport {\n  getBusinessObject,\n  getDi\n} from '../../../util/ModelUtil';\n\nvar DEFAULT_FLOW = 'default',\n    ID = 'id',\n    DI = 'di';\n\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n\n/**\n * A handler that implements a BPMN 2.0 property update.\n *\n * This should be used to set simple properties on elements with\n * an underlying BPMN business object.\n *\n * Use respective diagram-js provided handlers if you would\n * like to perform automated modeling.\n */\nexport default function UpdatePropertiesHandler(\n    elementRegistry, moddle, translate,\n    modeling, textRenderer) {\n\n  this._elementRegistry = elementRegistry;\n  this._moddle = moddle;\n  this._translate = translate;\n  this._modeling = modeling;\n  this._textRenderer = textRenderer;\n}\n\nUpdatePropertiesHandler.$inject = [\n  'elementRegistry',\n  'moddle',\n  'translate',\n  'modeling',\n  'textRenderer'\n];\n\n\n// api //////////////////////\n\n/**\n * Updates a BPMN element with a list of new properties\n *\n * @param {Object} context\n * @param {djs.model.Base} context.element the element to update\n * @param {Object} context.properties a list of properties to set on the element's\n *                                    businessObject (the BPMN model element)\n *\n * @return {Array<djs.model.Base>} the updated element\n */\nUpdatePropertiesHandler.prototype.execute = function(context) {\n\n  var element = context.element,\n      changed = [ element ],\n      translate = this._translate;\n\n  if (!element) {\n    throw new Error(translate('element required'));\n  }\n\n  var elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n\n  var businessObject = element.businessObject,\n      properties = unwrapBusinessObjects(context.properties),\n      oldProperties = context.oldProperties || getProperties(element, properties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(businessObject[ID]);\n\n    elementRegistry.updateId(element, properties[ID]);\n\n    ids.claim(properties[ID], businessObject);\n  }\n\n  // correctly indicate visual changes on default flow updates\n  if (DEFAULT_FLOW in properties) {\n\n    if (properties[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));\n    }\n\n    if (businessObject[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));\n    }\n  }\n\n  // update properties\n  setProperties(element, properties);\n\n  // store old values\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n\nUpdatePropertiesHandler.prototype.postExecute = function(context) {\n  var element = context.element,\n      label = element.label;\n\n  var text = label && getBusinessObject(label).name;\n\n  if (!text) {\n    return;\n  }\n\n  // get layouted text bounds and resize external\n  // external label accordingly\n  var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);\n\n  this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS);\n};\n\n/**\n * Reverts the update on a BPMN elements properties.\n *\n * @param  {Object} context\n *\n * @return {djs.model.Base} the updated element\n */\nUpdatePropertiesHandler.prototype.revert = function(context) {\n\n  var element = context.element,\n      properties = context.properties,\n      oldProperties = context.oldProperties,\n      businessObject = element.businessObject,\n      elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n\n  // update properties\n  setProperties(element, oldProperties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(properties[ID]);\n\n    elementRegistry.updateId(element, oldProperties[ID]);\n\n    ids.claim(oldProperties[ID], businessObject);\n  }\n\n  return context.changed;\n};\n\n\nfunction isIdChange(properties, businessObject) {\n  return ID in properties && properties[ID] !== businessObject[ID];\n}\n\n\nfunction getProperties(element, properties) {\n  var propertyNames = keys(properties),\n      businessObject = element.businessObject,\n      di = getDi(element);\n\n  return reduce(propertyNames, function(result, key) {\n\n    // handle DI separately\n    if (key !== DI) {\n      result[key] = businessObject.get(key);\n\n    } else {\n      result[key] = getDiProperties(di, keys(properties.di));\n    }\n\n    return result;\n  }, {});\n}\n\n\nfunction getDiProperties(di, propertyNames) {\n  return reduce(propertyNames, function(result, key) {\n    result[key] = di && di.get(key);\n\n    return result;\n  }, {});\n}\n\n\nfunction setProperties(element, properties) {\n  var businessObject = element.businessObject,\n      di = getDi(element);\n\n  forEach(properties, function(value, key) {\n\n    if (key !== DI) {\n      businessObject.set(key, value);\n    } else {\n\n      // only update, if di exists\n      if (di) {\n        setDiProperties(di, value);\n      }\n    }\n  });\n}\n\n\nfunction setDiProperties(di, properties) {\n  forEach(properties, function(value, key) {\n    di.set(key, value);\n  });\n}\n\n\nvar referencePropertyNames = [ 'default' ];\n\n/**\n * Make sure we unwrap the actual business object\n * behind diagram element that may have been\n * passed as arguments.\n *\n * @param  {Object} properties\n *\n * @return {Object} unwrappedProps\n */\nfunction unwrapBusinessObjects(properties) {\n\n  var unwrappedProps = assign({}, properties);\n\n  referencePropertyNames.forEach(function(name) {\n    if (name in properties) {\n      unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);\n    }\n  });\n\n  return unwrappedProps;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}