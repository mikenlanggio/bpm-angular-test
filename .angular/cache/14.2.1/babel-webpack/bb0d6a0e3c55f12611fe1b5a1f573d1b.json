{"ast":null,"code":"import { getDi, is } from './ModelUtil';\nexport var planeSuffix = '_plane';\n/**\n * Get primary shape ID for a plane.\n *\n * @param  {djs.model.Base|ModdleElement} element\n *\n * @returns {String}\n */\n\nexport function getShapeIdFromPlane(element) {\n  var id = element.id;\n  return removePlaneSuffix(id);\n}\n/**\n * Get plane ID for a primary shape.\n *\n * @param  {djs.model.Base|ModdleElement} element\n *\n * @returns {String}\n */\n\nexport function getPlaneIdFromShape(element) {\n  var id = element.id;\n\n  if (is(element, 'bpmn:SubProcess')) {\n    return addPlaneSuffix(id);\n  }\n\n  return id;\n}\n/**\n * Get plane ID for primary shape ID.\n *\n * @param {String} id\n *\n * @returns {String}\n */\n\nexport function toPlaneId(id) {\n  return addPlaneSuffix(id);\n}\n/**\n * Check wether element is plane.\n *\n * @param  {djs.model.Base|ModdleElement} element\n *\n * @returns {Boolean}\n */\n\nexport function isPlane(element) {\n  var di = getDi(element);\n  return is(di, 'bpmndi:BPMNPlane');\n}\n\nfunction addPlaneSuffix(id) {\n  return id + planeSuffix;\n}\n\nfunction removePlaneSuffix(id) {\n  return id.replace(new RegExp(planeSuffix + '$'), '');\n}","map":{"version":3,"names":["getDi","is","planeSuffix","getShapeIdFromPlane","element","id","removePlaneSuffix","getPlaneIdFromShape","addPlaneSuffix","toPlaneId","isPlane","di","replace","RegExp"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/util/DrilldownUtil.js"],"sourcesContent":["import { getDi, is } from './ModelUtil';\n\n\nexport var planeSuffix = '_plane';\n\n/**\n * Get primary shape ID for a plane.\n *\n * @param  {djs.model.Base|ModdleElement} element\n *\n * @returns {String}\n */\nexport function getShapeIdFromPlane(element) {\n  var id = element.id;\n\n  return removePlaneSuffix(id);\n}\n\n/**\n * Get plane ID for a primary shape.\n *\n * @param  {djs.model.Base|ModdleElement} element\n *\n * @returns {String}\n */\nexport function getPlaneIdFromShape(element) {\n  var id = element.id;\n\n  if (is(element, 'bpmn:SubProcess')) {\n    return addPlaneSuffix(id);\n  }\n\n  return id;\n}\n\n/**\n * Get plane ID for primary shape ID.\n *\n * @param {String} id\n *\n * @returns {String}\n */\nexport function toPlaneId(id) {\n  return addPlaneSuffix(id);\n}\n\n/**\n * Check wether element is plane.\n *\n * @param  {djs.model.Base|ModdleElement} element\n *\n * @returns {Boolean}\n */\nexport function isPlane(element) {\n  var di = getDi(element);\n\n  return is(di, 'bpmndi:BPMNPlane');\n}\n\nfunction addPlaneSuffix(id) {\n  return id + planeSuffix;\n}\n\nfunction removePlaneSuffix(id) {\n  return id.replace(new RegExp(planeSuffix + '$'), '');\n}"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,EAAhB,QAA0B,aAA1B;AAGA,OAAO,IAAIC,WAAW,GAAG,QAAlB;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;EAC3C,IAAIC,EAAE,GAAGD,OAAO,CAACC,EAAjB;EAEA,OAAOC,iBAAiB,CAACD,EAAD,CAAxB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,mBAAT,CAA6BH,OAA7B,EAAsC;EAC3C,IAAIC,EAAE,GAAGD,OAAO,CAACC,EAAjB;;EAEA,IAAIJ,EAAE,CAACG,OAAD,EAAU,iBAAV,CAAN,EAAoC;IAClC,OAAOI,cAAc,CAACH,EAAD,CAArB;EACD;;EAED,OAAOA,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,SAAT,CAAmBJ,EAAnB,EAAuB;EAC5B,OAAOG,cAAc,CAACH,EAAD,CAArB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,OAAT,CAAiBN,OAAjB,EAA0B;EAC/B,IAAIO,EAAE,GAAGX,KAAK,CAACI,OAAD,CAAd;EAEA,OAAOH,EAAE,CAACU,EAAD,EAAK,kBAAL,CAAT;AACD;;AAED,SAASH,cAAT,CAAwBH,EAAxB,EAA4B;EAC1B,OAAOA,EAAE,GAAGH,WAAZ;AACD;;AAED,SAASI,iBAAT,CAA2BD,EAA3B,EAA+B;EAC7B,OAAOA,EAAE,CAACO,OAAH,CAAW,IAAIC,MAAJ,CAAWX,WAAW,GAAG,GAAzB,CAAX,EAA0C,EAA1C,CAAP;AACD"},"metadata":{},"sourceType":"module"}