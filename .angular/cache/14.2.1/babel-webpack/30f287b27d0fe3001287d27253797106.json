{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { append as svgAppend, attr as svgAttr, classes as svgClasses, clone as svgClone, create as svgCreate, remove as svgRemove } from 'tiny-svg';\nimport { query as domQuery } from 'min-dom';\nimport { getVisual } from '../../util/GraphicsUtil';\nvar MARKER_TYPES = ['marker-start', 'marker-mid', 'marker-end'];\nvar NODES_CAN_HAVE_MARKER = ['circle', 'ellipse', 'line', 'path', 'polygon', 'polyline', 'rect'];\n/**\r\n * Adds support for previews of moving/resizing elements.\r\n */\n\nexport default function PreviewSupport(elementRegistry, eventBus, canvas, styles) {\n  this._elementRegistry = elementRegistry;\n  this._canvas = canvas;\n  this._styles = styles;\n  this._clonedMarkers = {};\n  var self = this;\n  eventBus.on('drag.cleanup', function () {\n    forEach(self._clonedMarkers, function (clonedMarker) {\n      svgRemove(clonedMarker);\n    });\n    self._clonedMarkers = {};\n  });\n}\nPreviewSupport.$inject = ['elementRegistry', 'eventBus', 'canvas', 'styles'];\n/**\r\n * Returns graphics of an element.\r\n *\r\n * @param {djs.model.Base} element\r\n *\r\n * @return {SVGElement}\r\n */\n\nPreviewSupport.prototype.getGfx = function (element) {\n  return this._elementRegistry.getGraphics(element);\n};\n/**\r\n * Adds a move preview of a given shape to a given svg group.\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} group\r\n * @param {SVGElement} [gfx]\r\n *\r\n * @return {SVGElement} dragger\r\n */\n\n\nPreviewSupport.prototype.addDragger = function (element, group, gfx) {\n  gfx = gfx || this.getGfx(element);\n  var dragger = svgClone(gfx);\n  var bbox = gfx.getBoundingClientRect();\n\n  this._cloneMarkers(getVisual(dragger));\n\n  svgAttr(dragger, this._styles.cls('djs-dragger', [], {\n    x: bbox.top,\n    y: bbox.left\n  }));\n  svgAppend(group, dragger);\n  return dragger;\n};\n/**\r\n * Adds a resize preview of a given shape to a given svg group.\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} group\r\n *\r\n * @return {SVGElement} frame\r\n */\n\n\nPreviewSupport.prototype.addFrame = function (shape, group) {\n  var frame = svgCreate('rect', {\n    class: 'djs-resize-overlay',\n    width: shape.width,\n    height: shape.height,\n    x: shape.x,\n    y: shape.y\n  });\n  svgAppend(group, frame);\n  return frame;\n};\n/**\r\n * Clone all markers referenced by a node and its child nodes.\r\n *\r\n * @param {SVGElement} gfx\r\n */\n\n\nPreviewSupport.prototype._cloneMarkers = function (gfx) {\n  var self = this;\n\n  if (gfx.childNodes) {\n    // TODO: use forEach once we drop PhantomJS\n    for (var i = 0; i < gfx.childNodes.length; i++) {\n      // recursively clone markers of child nodes\n      self._cloneMarkers(gfx.childNodes[i]);\n    }\n  }\n\n  if (!canHaveMarker(gfx)) {\n    return;\n  }\n\n  MARKER_TYPES.forEach(function (markerType) {\n    if (svgAttr(gfx, markerType)) {\n      var marker = getMarker(gfx, markerType, self._canvas.getContainer());\n\n      self._cloneMarker(gfx, marker, markerType);\n    }\n  });\n};\n/**\r\n * Clone marker referenced by an element.\r\n *\r\n * @param {SVGElement} gfx\r\n * @param {SVGElement} marker\r\n * @param {string} markerType\r\n */\n\n\nPreviewSupport.prototype._cloneMarker = function (gfx, marker, markerType) {\n  var markerId = marker.id;\n  var clonedMarker = this._clonedMarkers[markerId];\n\n  if (!clonedMarker) {\n    clonedMarker = svgClone(marker);\n    var clonedMarkerId = markerId + '-clone';\n    clonedMarker.id = clonedMarkerId;\n    svgClasses(clonedMarker).add('djs-dragger').add('djs-dragger-marker');\n    this._clonedMarkers[markerId] = clonedMarker;\n    var defs = domQuery('defs', this._canvas._svg);\n\n    if (!defs) {\n      defs = svgCreate('defs');\n      svgAppend(this._canvas._svg, defs);\n    }\n\n    svgAppend(defs, clonedMarker);\n  }\n\n  var reference = idToReference(this._clonedMarkers[markerId].id);\n  svgAttr(gfx, markerType, reference);\n}; // helpers //////////\n\n/**\r\n * Get marker of given type referenced by node.\r\n *\r\n * @param {Node} node\r\n * @param {string} markerType\r\n * @param {Node} [parentNode]\r\n *\r\n * @param {Node}\r\n */\n\n\nfunction getMarker(node, markerType, parentNode) {\n  var id = referenceToId(svgAttr(node, markerType));\n  return domQuery('marker#' + id, parentNode || document);\n}\n/**\r\n * Get ID of fragment within current document from its functional IRI reference.\r\n * References may use single or double quotes.\r\n *\r\n * @param {string} reference\r\n *\r\n * @returns {string}\r\n */\n\n\nfunction referenceToId(reference) {\n  return reference.match(/url\\(['\"]?#([^'\"]*)['\"]?\\)/)[1];\n}\n/**\r\n * Get functional IRI reference for given ID of fragment within current document.\r\n *\r\n * @param {string} id\r\n *\r\n * @returns {string}\r\n */\n\n\nfunction idToReference(id) {\n  return 'url(#' + id + ')';\n}\n/**\r\n * Check wether node type can have marker attributes.\r\n *\r\n * @param {Node} node\r\n *\r\n * @returns {boolean}\r\n */\n\n\nfunction canHaveMarker(node) {\n  return NODES_CAN_HAVE_MARKER.indexOf(node.nodeName) !== -1;\n}","map":{"version":3,"names":["forEach","append","svgAppend","attr","svgAttr","classes","svgClasses","clone","svgClone","create","svgCreate","remove","svgRemove","query","domQuery","getVisual","MARKER_TYPES","NODES_CAN_HAVE_MARKER","PreviewSupport","elementRegistry","eventBus","canvas","styles","_elementRegistry","_canvas","_styles","_clonedMarkers","self","on","clonedMarker","$inject","prototype","getGfx","element","getGraphics","addDragger","group","gfx","dragger","bbox","getBoundingClientRect","_cloneMarkers","cls","x","top","y","left","addFrame","shape","frame","class","width","height","childNodes","i","length","canHaveMarker","markerType","marker","getMarker","getContainer","_cloneMarker","markerId","id","clonedMarkerId","add","defs","_svg","reference","idToReference","node","parentNode","referenceToId","document","match","indexOf","nodeName"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/preview-support/PreviewSupport.js"],"sourcesContent":["import {\r\n  forEach\r\n} from 'min-dash';\r\n\r\nimport {\r\n  append as svgAppend,\r\n  attr as svgAttr,\r\n  classes as svgClasses,\r\n  clone as svgClone,\r\n  create as svgCreate,\r\n  remove as svgRemove\r\n} from 'tiny-svg';\r\n\r\nimport { query as domQuery } from 'min-dom';\r\n\r\nimport { getVisual } from '../../util/GraphicsUtil';\r\n\r\nvar MARKER_TYPES = [\r\n  'marker-start',\r\n  'marker-mid',\r\n  'marker-end'\r\n];\r\n\r\nvar NODES_CAN_HAVE_MARKER = [\r\n  'circle',\r\n  'ellipse',\r\n  'line',\r\n  'path',\r\n  'polygon',\r\n  'polyline',\r\n  'rect'\r\n];\r\n\r\n\r\n/**\r\n * Adds support for previews of moving/resizing elements.\r\n */\r\nexport default function PreviewSupport(elementRegistry, eventBus, canvas, styles) {\r\n  this._elementRegistry = elementRegistry;\r\n  this._canvas = canvas;\r\n  this._styles = styles;\r\n\r\n  this._clonedMarkers = {};\r\n\r\n  var self = this;\r\n\r\n  eventBus.on('drag.cleanup', function() {\r\n    forEach(self._clonedMarkers, function(clonedMarker) {\r\n      svgRemove(clonedMarker);\r\n    });\r\n\r\n    self._clonedMarkers = {};\r\n  });\r\n}\r\n\r\nPreviewSupport.$inject = [\r\n  'elementRegistry',\r\n  'eventBus',\r\n  'canvas',\r\n  'styles'\r\n];\r\n\r\n\r\n/**\r\n * Returns graphics of an element.\r\n *\r\n * @param {djs.model.Base} element\r\n *\r\n * @return {SVGElement}\r\n */\r\nPreviewSupport.prototype.getGfx = function(element) {\r\n  return this._elementRegistry.getGraphics(element);\r\n};\r\n\r\n/**\r\n * Adds a move preview of a given shape to a given svg group.\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} group\r\n * @param {SVGElement} [gfx]\r\n *\r\n * @return {SVGElement} dragger\r\n */\r\nPreviewSupport.prototype.addDragger = function(element, group, gfx) {\r\n  gfx = gfx || this.getGfx(element);\r\n\r\n  var dragger = svgClone(gfx);\r\n  var bbox = gfx.getBoundingClientRect();\r\n\r\n  this._cloneMarkers(getVisual(dragger));\r\n\r\n  svgAttr(dragger, this._styles.cls('djs-dragger', [], {\r\n    x: bbox.top,\r\n    y: bbox.left\r\n  }));\r\n\r\n  svgAppend(group, dragger);\r\n\r\n  return dragger;\r\n};\r\n\r\n/**\r\n * Adds a resize preview of a given shape to a given svg group.\r\n *\r\n * @param {djs.model.Base} element\r\n * @param {SVGElement} group\r\n *\r\n * @return {SVGElement} frame\r\n */\r\nPreviewSupport.prototype.addFrame = function(shape, group) {\r\n\r\n  var frame = svgCreate('rect', {\r\n    class: 'djs-resize-overlay',\r\n    width:  shape.width,\r\n    height: shape.height,\r\n    x: shape.x,\r\n    y: shape.y\r\n  });\r\n\r\n  svgAppend(group, frame);\r\n\r\n  return frame;\r\n};\r\n\r\n/**\r\n * Clone all markers referenced by a node and its child nodes.\r\n *\r\n * @param {SVGElement} gfx\r\n */\r\nPreviewSupport.prototype._cloneMarkers = function(gfx) {\r\n  var self = this;\r\n\r\n  if (gfx.childNodes) {\r\n\r\n    // TODO: use forEach once we drop PhantomJS\r\n    for (var i = 0; i < gfx.childNodes.length; i++) {\r\n\r\n      // recursively clone markers of child nodes\r\n      self._cloneMarkers(gfx.childNodes[ i ]);\r\n    }\r\n  }\r\n\r\n  if (!canHaveMarker(gfx)) {\r\n    return;\r\n  }\r\n\r\n  MARKER_TYPES.forEach(function(markerType) {\r\n    if (svgAttr(gfx, markerType)) {\r\n      var marker = getMarker(gfx, markerType, self._canvas.getContainer());\r\n\r\n      self._cloneMarker(gfx, marker, markerType);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Clone marker referenced by an element.\r\n *\r\n * @param {SVGElement} gfx\r\n * @param {SVGElement} marker\r\n * @param {string} markerType\r\n */\r\nPreviewSupport.prototype._cloneMarker = function(gfx, marker, markerType) {\r\n  var markerId = marker.id;\r\n\r\n  var clonedMarker = this._clonedMarkers[ markerId ];\r\n\r\n  if (!clonedMarker) {\r\n    clonedMarker = svgClone(marker);\r\n\r\n    var clonedMarkerId = markerId + '-clone';\r\n\r\n    clonedMarker.id = clonedMarkerId;\r\n\r\n    svgClasses(clonedMarker)\r\n      .add('djs-dragger')\r\n      .add('djs-dragger-marker');\r\n\r\n    this._clonedMarkers[ markerId ] = clonedMarker;\r\n\r\n    var defs = domQuery('defs', this._canvas._svg);\r\n\r\n    if (!defs) {\r\n      defs = svgCreate('defs');\r\n\r\n      svgAppend(this._canvas._svg, defs);\r\n    }\r\n\r\n    svgAppend(defs, clonedMarker);\r\n  }\r\n\r\n  var reference = idToReference(this._clonedMarkers[ markerId ].id);\r\n\r\n  svgAttr(gfx, markerType, reference);\r\n};\r\n\r\n// helpers //////////\r\n\r\n/**\r\n * Get marker of given type referenced by node.\r\n *\r\n * @param {Node} node\r\n * @param {string} markerType\r\n * @param {Node} [parentNode]\r\n *\r\n * @param {Node}\r\n */\r\nfunction getMarker(node, markerType, parentNode) {\r\n  var id = referenceToId(svgAttr(node, markerType));\r\n\r\n  return domQuery('marker#' + id, parentNode || document);\r\n}\r\n\r\n/**\r\n * Get ID of fragment within current document from its functional IRI reference.\r\n * References may use single or double quotes.\r\n *\r\n * @param {string} reference\r\n *\r\n * @returns {string}\r\n */\r\nfunction referenceToId(reference) {\r\n  return reference.match(/url\\(['\"]?#([^'\"]*)['\"]?\\)/)[1];\r\n}\r\n\r\n/**\r\n * Get functional IRI reference for given ID of fragment within current document.\r\n *\r\n * @param {string} id\r\n *\r\n * @returns {string}\r\n */\r\nfunction idToReference(id) {\r\n  return 'url(#' + id + ')';\r\n}\r\n\r\n/**\r\n * Check wether node type can have marker attributes.\r\n *\r\n * @param {Node} node\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction canHaveMarker(node) {\r\n  return NODES_CAN_HAVE_MARKER.indexOf(node.nodeName) !== -1;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}