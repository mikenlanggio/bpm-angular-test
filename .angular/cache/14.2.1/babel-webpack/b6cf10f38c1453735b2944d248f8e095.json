{"ast":null,"code":"import { assign } from 'min-dash';\nvar DEFAULT_CONFIG = {\n  moveSpeed: 1,\n  moveSpeedAccelerated: 10\n};\nvar HIGHER_PRIORITY = 1500;\nvar LEFT = 'left';\nvar UP = 'up';\nvar RIGHT = 'right';\nvar DOWN = 'down';\nvar KEY_TO_DIRECTION = {\n  ArrowLeft: LEFT,\n  Left: LEFT,\n  ArrowUp: UP,\n  Up: UP,\n  ArrowRight: RIGHT,\n  Right: RIGHT,\n  ArrowDown: DOWN,\n  Down: DOWN\n};\nvar DIRECTIONS_DELTA = {\n  left: function (speed) {\n    return {\n      x: -speed,\n      y: 0\n    };\n  },\n  up: function (speed) {\n    return {\n      x: 0,\n      y: -speed\n    };\n  },\n  right: function (speed) {\n    return {\n      x: speed,\n      y: 0\n    };\n  },\n  down: function (speed) {\n    return {\n      x: 0,\n      y: speed\n    };\n  }\n};\n/**\n * Enables to move selection with keyboard arrows.\n * Use with Shift for modified speed (default=1, with Shift=10).\n * Pressed Cmd/Ctrl turns the feature off.\n *\n * @param {Object} config\n * @param {number} [config.moveSpeed=1]\n * @param {number} [config.moveSpeedAccelerated=10]\n * @param {Keyboard} keyboard\n * @param {Modeling} modeling\n * @param {Selection} selection\n */\n\nexport default function KeyboardMoveSelection(config, keyboard, modeling, rules, selection) {\n  var self = this;\n  this._config = assign({}, DEFAULT_CONFIG, config || {});\n  keyboard.addListener(HIGHER_PRIORITY, function (event) {\n    var keyEvent = event.keyEvent;\n    var direction = KEY_TO_DIRECTION[keyEvent.key];\n\n    if (!direction) {\n      return;\n    }\n\n    if (keyboard.isCmd(keyEvent)) {\n      return;\n    }\n\n    var accelerated = keyboard.isShift(keyEvent);\n    self.moveSelection(direction, accelerated);\n    return true;\n  });\n  /**\n   * Move selected elements in the given direction,\n   * optionally specifying accelerated movement.\n   *\n   * @param {string} direction\n   * @param {boolean} [accelerated=false]\n   */\n\n  this.moveSelection = function (direction, accelerated) {\n    var selectedElements = selection.get();\n\n    if (!selectedElements.length) {\n      return;\n    }\n\n    var speed = this._config[accelerated ? 'moveSpeedAccelerated' : 'moveSpeed'];\n    var delta = DIRECTIONS_DELTA[direction](speed);\n    var canMove = rules.allowed('elements.move', {\n      shapes: selectedElements\n    });\n\n    if (canMove) {\n      modeling.moveElements(selectedElements, delta);\n    }\n  };\n}\nKeyboardMoveSelection.$inject = ['config.keyboardMoveSelection', 'keyboard', 'modeling', 'rules', 'selection'];","map":{"version":3,"names":["assign","DEFAULT_CONFIG","moveSpeed","moveSpeedAccelerated","HIGHER_PRIORITY","LEFT","UP","RIGHT","DOWN","KEY_TO_DIRECTION","ArrowLeft","Left","ArrowUp","Up","ArrowRight","Right","ArrowDown","Down","DIRECTIONS_DELTA","left","speed","x","y","up","right","down","KeyboardMoveSelection","config","keyboard","modeling","rules","selection","self","_config","addListener","event","keyEvent","direction","key","isCmd","accelerated","isShift","moveSelection","selectedElements","get","length","delta","canMove","allowed","shapes","moveElements","$inject"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/keyboard-move-selection/KeyboardMoveSelection.js"],"sourcesContent":["import {\n  assign\n} from 'min-dash';\n\n\nvar DEFAULT_CONFIG = {\n  moveSpeed: 1,\n  moveSpeedAccelerated: 10\n};\n\nvar HIGHER_PRIORITY = 1500;\n\nvar LEFT = 'left';\nvar UP = 'up';\nvar RIGHT = 'right';\nvar DOWN = 'down';\n\nvar KEY_TO_DIRECTION = {\n  ArrowLeft: LEFT,\n  Left: LEFT,\n  ArrowUp: UP,\n  Up: UP,\n  ArrowRight: RIGHT,\n  Right: RIGHT,\n  ArrowDown: DOWN,\n  Down: DOWN\n};\n\nvar DIRECTIONS_DELTA = {\n  left: function(speed) {\n    return {\n      x: -speed,\n      y: 0\n    };\n  },\n  up: function(speed) {\n    return {\n      x: 0,\n      y: -speed\n    };\n  },\n  right: function(speed) {\n    return {\n      x: speed,\n      y: 0\n    };\n  },\n  down: function(speed) {\n    return {\n      x: 0,\n      y: speed\n    };\n  }\n};\n\n\n/**\n * Enables to move selection with keyboard arrows.\n * Use with Shift for modified speed (default=1, with Shift=10).\n * Pressed Cmd/Ctrl turns the feature off.\n *\n * @param {Object} config\n * @param {number} [config.moveSpeed=1]\n * @param {number} [config.moveSpeedAccelerated=10]\n * @param {Keyboard} keyboard\n * @param {Modeling} modeling\n * @param {Selection} selection\n */\nexport default function KeyboardMoveSelection(\n    config,\n    keyboard,\n    modeling,\n    rules,\n    selection\n) {\n\n  var self = this;\n\n  this._config = assign({}, DEFAULT_CONFIG, config || {});\n\n  keyboard.addListener(HIGHER_PRIORITY, function(event) {\n\n    var keyEvent = event.keyEvent;\n\n    var direction = KEY_TO_DIRECTION[keyEvent.key];\n\n    if (!direction) {\n      return;\n    }\n\n    if (keyboard.isCmd(keyEvent)) {\n      return;\n    }\n\n    var accelerated = keyboard.isShift(keyEvent);\n\n    self.moveSelection(direction, accelerated);\n\n    return true;\n  });\n\n\n  /**\n   * Move selected elements in the given direction,\n   * optionally specifying accelerated movement.\n   *\n   * @param {string} direction\n   * @param {boolean} [accelerated=false]\n   */\n  this.moveSelection = function(direction, accelerated) {\n\n    var selectedElements = selection.get();\n\n    if (!selectedElements.length) {\n      return;\n    }\n\n    var speed = this._config[\n      accelerated ?\n        'moveSpeedAccelerated' :\n        'moveSpeed'\n    ];\n\n    var delta = DIRECTIONS_DELTA[direction](speed);\n\n    var canMove = rules.allowed('elements.move', {\n      shapes: selectedElements\n    });\n\n    if (canMove) {\n      modeling.moveElements(selectedElements, delta);\n    }\n  };\n\n}\n\nKeyboardMoveSelection.$inject = [\n  'config.keyboardMoveSelection',\n  'keyboard',\n  'modeling',\n  'rules',\n  'selection'\n];"],"mappings":"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"},"metadata":{},"sourceType":"module"}