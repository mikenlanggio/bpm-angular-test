{"ast":null,"code":"var round = Math.round;\nimport { assign } from 'min-dash';\nimport { event as domEvent } from 'min-dom';\nimport { getOriginal, toPoint, stopPropagation } from '../../util/Event';\nimport { set as cursorSet, unset as cursorUnset } from '../../util/Cursor';\nimport { install as installClickTrap } from '../../util/ClickTrap';\nimport { delta as deltaPos } from '../../util/PositionUtil';\nvar DRAG_ACTIVE_CLS = 'djs-drag-active';\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nfunction isTouchEvent(event) {\n  // check for TouchEvent being available first\n  // (i.e. not available on desktop Firefox)\n  return typeof TouchEvent !== 'undefined' && event instanceof TouchEvent;\n}\n\nfunction getLength(point) {\n  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n}\n/**\n * A helper that fires canvas localized drag events and realizes\n * the general \"drag-and-drop\" look and feel.\n *\n * Calling {@link Dragging#activate} activates dragging on a canvas.\n *\n * It provides the following:\n *\n *   * emits life cycle events, namespaced with a prefix assigned\n *     during dragging activation\n *   * sets and restores the cursor\n *   * sets and restores the selection if elements still exist\n *   * ensures there can be only one drag operation active at a time\n *\n * Dragging may be canceled manually by calling {@link Dragging#cancel}\n * or by pressing ESC.\n *\n *\n * ## Life-cycle events\n *\n * Dragging can be in three different states, off, initialized\n * and active.\n *\n * (1) off: no dragging operation is in progress\n * (2) initialized: a new drag operation got initialized but not yet\n *                  started (i.e. because of no initial move)\n * (3) started: dragging is in progress\n *\n * Eventually dragging will be off again after a drag operation has\n * been ended or canceled via user click or ESC key press.\n *\n * To indicate transitions between these states dragging emits generic\n * life-cycle events with the `drag.` prefix _and_ events namespaced\n * to a prefix choosen by a user during drag initialization.\n *\n * The following events are emitted (appropriately prefixed) via\n * the {@link EventBus}.\n *\n * * `init`\n * * `start`\n * * `move`\n * * `end`\n * * `ended` (dragging already in off state)\n * * `cancel` (only if previously started)\n * * `canceled` (dragging already in off state, only if previously started)\n * * `cleanup`\n *\n *\n * @example\n *\n * function MyDragComponent(eventBus, dragging) {\n *\n *   eventBus.on('mydrag.start', function(event) {\n *     console.log('yes, we start dragging');\n *   });\n *\n *   eventBus.on('mydrag.move', function(event) {\n *     console.log('canvas local coordinates', event.x, event.y, event.dx, event.dy);\n *\n *     // local drag data is passed with the event\n *     event.context.foo; // \"BAR\"\n *\n *     // the original mouse event, too\n *     event.originalEvent; // MouseEvent(...)\n *   });\n *\n *   eventBus.on('element.click', function(event) {\n *     dragging.init(event, 'mydrag', {\n *       cursor: 'grabbing',\n *       data: {\n *         context: {\n *           foo: \"BAR\"\n *         }\n *       }\n *     });\n *   });\n * }\n */\n\n\nexport default function Dragging(eventBus, canvas, selection, elementRegistry) {\n  var defaultOptions = {\n    threshold: 5,\n    trapClick: true\n  }; // the currently active drag operation\n  // dragging is active as soon as this context exists.\n  //\n  // it is visually _active_ only when a context.active flag is set to true.\n\n  var context;\n  /* convert a global event into local coordinates */\n\n  function toLocalPoint(globalPosition) {\n    var viewbox = canvas.viewbox();\n\n    var clientRect = canvas._container.getBoundingClientRect();\n\n    return {\n      x: viewbox.x + (globalPosition.x - clientRect.left) / viewbox.scale,\n      y: viewbox.y + (globalPosition.y - clientRect.top) / viewbox.scale\n    };\n  } // helpers\n\n\n  function fire(type, dragContext) {\n    dragContext = dragContext || context;\n    var event = eventBus.createEvent(assign({}, dragContext.payload, dragContext.data, {\n      isTouch: dragContext.isTouch\n    })); // default integration\n\n    if (eventBus.fire('drag.' + type, event) === false) {\n      return false;\n    }\n\n    return eventBus.fire(dragContext.prefix + '.' + type, event);\n  }\n\n  function restoreSelection(previousSelection) {\n    var existingSelection = previousSelection.filter(function (element) {\n      return elementRegistry.get(element.id);\n    });\n    existingSelection.length && selection.select(existingSelection);\n  } // event listeners\n\n\n  function move(event, activate) {\n    var payload = context.payload,\n        displacement = context.displacement;\n    var globalStart = context.globalStart,\n        globalCurrent = toPoint(event),\n        globalDelta = deltaPos(globalCurrent, globalStart);\n    var localStart = context.localStart,\n        localCurrent = toLocalPoint(globalCurrent),\n        localDelta = deltaPos(localCurrent, localStart); // activate context explicitly or once threshold is reached\n\n    if (!context.active && (activate || getLength(globalDelta) > context.threshold)) {\n      // fire start event with original\n      // starting coordinates\n      assign(payload, {\n        x: round(localStart.x + displacement.x),\n        y: round(localStart.y + displacement.y),\n        dx: 0,\n        dy: 0\n      }, {\n        originalEvent: event\n      });\n\n      if (false === fire('start')) {\n        return cancel();\n      }\n\n      context.active = true; // unset selection and remember old selection\n      // the previous (old) selection will always passed\n      // with the event via the event.previousSelection property\n\n      if (!context.keepSelection) {\n        payload.previousSelection = selection.get();\n        selection.select(null);\n      } // allow custom cursor\n\n\n      if (context.cursor) {\n        cursorSet(context.cursor);\n      } // indicate dragging via marker on root element\n\n\n      canvas.addMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);\n    }\n\n    stopPropagation(event);\n\n    if (context.active) {\n      // update payload with actual coordinates\n      assign(payload, {\n        x: round(localCurrent.x + displacement.x),\n        y: round(localCurrent.y + displacement.y),\n        dx: round(localDelta.x),\n        dy: round(localDelta.y)\n      }, {\n        originalEvent: event\n      }); // emit move event\n\n      fire('move');\n    }\n  }\n\n  function end(event) {\n    var previousContext,\n        returnValue = true;\n\n    if (context.active) {\n      if (event) {\n        context.payload.originalEvent = event; // suppress original event (click, ...)\n        // because we just ended a drag operation\n\n        stopPropagation(event);\n      } // implementations may stop restoring the\n      // original state (selections, ...) by preventing the\n      // end events default action\n\n\n      returnValue = fire('end');\n    }\n\n    if (returnValue === false) {\n      fire('rejected');\n    }\n\n    previousContext = cleanup(returnValue !== true); // last event to be fired when all drag operations are done\n    // at this point in time no drag operation is in progress anymore\n\n    fire('ended', previousContext);\n  } // cancel active drag operation if the user presses\n  // the ESC key on the keyboard\n\n\n  function checkCancel(event) {\n    if (event.which === 27) {\n      preventDefault(event);\n      cancel();\n    }\n  } // prevent ghost click that might occur after a finished\n  // drag and drop session\n\n\n  function trapClickAndEnd(event) {\n    var untrap; // trap the click in case we are part of an active\n    // drag operation. This will effectively prevent\n    // the ghost click that cannot be canceled otherwise.\n\n    if (context.active) {\n      untrap = installClickTrap(eventBus); // remove trap after minimal delay\n\n      setTimeout(untrap, 400); // prevent default action (click)\n\n      preventDefault(event);\n    }\n\n    end(event);\n  }\n\n  function trapTouch(event) {\n    move(event);\n  } // update the drag events hover (djs.model.Base) and hoverGfx (Snap<SVGElement>)\n  // properties during hover and out and fire {prefix}.hover and {prefix}.out properties\n  // respectively\n\n\n  function hover(event) {\n    var payload = context.payload;\n    payload.hoverGfx = event.gfx;\n    payload.hover = event.element;\n    fire('hover');\n  }\n\n  function out(event) {\n    fire('out');\n    var payload = context.payload;\n    payload.hoverGfx = null;\n    payload.hover = null;\n  } // life-cycle methods\n\n\n  function cancel(restore) {\n    var previousContext;\n\n    if (!context) {\n      return;\n    }\n\n    var wasActive = context.active;\n\n    if (wasActive) {\n      fire('cancel');\n    }\n\n    previousContext = cleanup(restore);\n\n    if (wasActive) {\n      // last event to be fired when all drag operations are done\n      // at this point in time no drag operation is in progress anymore\n      fire('canceled', previousContext);\n    }\n  }\n\n  function cleanup(restore) {\n    var previousContext, endDrag;\n    fire('cleanup'); // reset cursor\n\n    cursorUnset();\n\n    if (context.trapClick) {\n      endDrag = trapClickAndEnd;\n    } else {\n      endDrag = end;\n    } // reset dom listeners\n\n\n    domEvent.unbind(document, 'mousemove', move);\n    domEvent.unbind(document, 'dragstart', preventDefault);\n    domEvent.unbind(document, 'selectstart', preventDefault);\n    domEvent.unbind(document, 'mousedown', endDrag, true);\n    domEvent.unbind(document, 'mouseup', endDrag, true);\n    domEvent.unbind(document, 'keyup', checkCancel);\n    domEvent.unbind(document, 'touchstart', trapTouch, true);\n    domEvent.unbind(document, 'touchcancel', cancel, true);\n    domEvent.unbind(document, 'touchmove', move, true);\n    domEvent.unbind(document, 'touchend', end, true);\n    eventBus.off('element.hover', hover);\n    eventBus.off('element.out', out); // remove drag marker on root element\n\n    canvas.removeMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS); // restore selection, unless it has changed\n\n    var previousSelection = context.payload.previousSelection;\n\n    if (restore !== false && previousSelection && !selection.get().length) {\n      restoreSelection(previousSelection);\n    }\n\n    previousContext = context;\n    context = null;\n    return previousContext;\n  }\n  /**\n   * Initialize a drag operation.\n   *\n   * If `localPosition` is given, drag events will be emitted\n   * relative to it.\n   *\n   * @param {MouseEvent|TouchEvent} [event]\n   * @param {Point} [localPosition] actual diagram local position this drag operation should start at\n   * @param {string} prefix\n   * @param {Object} [options]\n   */\n\n\n  function init(event, relativeTo, prefix, options) {\n    // only one drag operation may be active, at a time\n    if (context) {\n      cancel(false);\n    }\n\n    if (typeof relativeTo === 'string') {\n      options = prefix;\n      prefix = relativeTo;\n      relativeTo = null;\n    }\n\n    options = assign({}, defaultOptions, options || {});\n    var data = options.data || {},\n        originalEvent,\n        globalStart,\n        localStart,\n        endDrag,\n        isTouch;\n\n    if (options.trapClick) {\n      endDrag = trapClickAndEnd;\n    } else {\n      endDrag = end;\n    }\n\n    if (event) {\n      originalEvent = getOriginal(event) || event;\n      globalStart = toPoint(event);\n      stopPropagation(event); // prevent default browser dragging behavior\n\n      if (originalEvent.type === 'dragstart') {\n        preventDefault(originalEvent);\n      }\n    } else {\n      originalEvent = null;\n      globalStart = {\n        x: 0,\n        y: 0\n      };\n    }\n\n    localStart = toLocalPoint(globalStart);\n\n    if (!relativeTo) {\n      relativeTo = localStart;\n    }\n\n    isTouch = isTouchEvent(originalEvent);\n    context = assign({\n      prefix: prefix,\n      data: data,\n      payload: {},\n      globalStart: globalStart,\n      displacement: deltaPos(relativeTo, localStart),\n      localStart: localStart,\n      isTouch: isTouch\n    }, options); // skip dom registration if trigger\n    // is set to manual (during testing)\n\n    if (!options.manual) {\n      // add dom listeners\n      if (isTouch) {\n        domEvent.bind(document, 'touchstart', trapTouch, true);\n        domEvent.bind(document, 'touchcancel', cancel, true);\n        domEvent.bind(document, 'touchmove', move, true);\n        domEvent.bind(document, 'touchend', end, true);\n      } else {\n        // assume we use the mouse to interact per default\n        domEvent.bind(document, 'mousemove', move); // prevent default browser drag and text selection behavior\n\n        domEvent.bind(document, 'dragstart', preventDefault);\n        domEvent.bind(document, 'selectstart', preventDefault);\n        domEvent.bind(document, 'mousedown', endDrag, true);\n        domEvent.bind(document, 'mouseup', endDrag, true);\n      }\n\n      domEvent.bind(document, 'keyup', checkCancel);\n      eventBus.on('element.hover', hover);\n      eventBus.on('element.out', out);\n    }\n\n    fire('init');\n\n    if (options.autoActivate) {\n      move(event, true);\n    }\n  } // cancel on diagram destruction\n\n\n  eventBus.on('diagram.destroy', cancel); // API\n\n  this.init = init;\n  this.move = move;\n  this.hover = hover;\n  this.out = out;\n  this.end = end;\n  this.cancel = cancel; // for introspection\n\n  this.context = function () {\n    return context;\n  };\n\n  this.setOptions = function (options) {\n    assign(defaultOptions, options);\n  };\n}\nDragging.$inject = ['eventBus', 'canvas', 'selection', 'elementRegistry'];","map":{"version":3,"names":["round","Math","assign","event","domEvent","getOriginal","toPoint","stopPropagation","set","cursorSet","unset","cursorUnset","install","installClickTrap","delta","deltaPos","DRAG_ACTIVE_CLS","preventDefault","isTouchEvent","TouchEvent","getLength","point","sqrt","pow","x","y","Dragging","eventBus","canvas","selection","elementRegistry","defaultOptions","threshold","trapClick","context","toLocalPoint","globalPosition","viewbox","clientRect","_container","getBoundingClientRect","left","scale","top","fire","type","dragContext","createEvent","payload","data","isTouch","prefix","restoreSelection","previousSelection","existingSelection","filter","element","get","id","length","select","move","activate","displacement","globalStart","globalCurrent","globalDelta","localStart","localCurrent","localDelta","active","dx","dy","originalEvent","cancel","keepSelection","cursor","addMarker","getRootElement","end","previousContext","returnValue","cleanup","checkCancel","which","trapClickAndEnd","untrap","setTimeout","trapTouch","hover","hoverGfx","gfx","out","restore","wasActive","endDrag","unbind","document","off","removeMarker","init","relativeTo","options","manual","bind","on","autoActivate","setOptions","$inject"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/dragging/Dragging.js"],"sourcesContent":["var round = Math.round;\n\nimport { assign } from 'min-dash';\n\nimport {\n  event as domEvent\n} from 'min-dom';\n\nimport {\n  getOriginal,\n  toPoint,\n  stopPropagation\n} from '../../util/Event';\n\nimport {\n  set as cursorSet,\n  unset as cursorUnset\n} from '../../util/Cursor';\n\nimport {\n  install as installClickTrap\n} from '../../util/ClickTrap';\n\nimport {\n  delta as deltaPos\n} from '../../util/PositionUtil';\n\nvar DRAG_ACTIVE_CLS = 'djs-drag-active';\n\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nfunction isTouchEvent(event) {\n\n  // check for TouchEvent being available first\n  // (i.e. not available on desktop Firefox)\n  return typeof TouchEvent !== 'undefined' && event instanceof TouchEvent;\n}\n\nfunction getLength(point) {\n  return Math.sqrt(Math.pow(point.x, 2) + Math.pow(point.y, 2));\n}\n\n/**\n * A helper that fires canvas localized drag events and realizes\n * the general \"drag-and-drop\" look and feel.\n *\n * Calling {@link Dragging#activate} activates dragging on a canvas.\n *\n * It provides the following:\n *\n *   * emits life cycle events, namespaced with a prefix assigned\n *     during dragging activation\n *   * sets and restores the cursor\n *   * sets and restores the selection if elements still exist\n *   * ensures there can be only one drag operation active at a time\n *\n * Dragging may be canceled manually by calling {@link Dragging#cancel}\n * or by pressing ESC.\n *\n *\n * ## Life-cycle events\n *\n * Dragging can be in three different states, off, initialized\n * and active.\n *\n * (1) off: no dragging operation is in progress\n * (2) initialized: a new drag operation got initialized but not yet\n *                  started (i.e. because of no initial move)\n * (3) started: dragging is in progress\n *\n * Eventually dragging will be off again after a drag operation has\n * been ended or canceled via user click or ESC key press.\n *\n * To indicate transitions between these states dragging emits generic\n * life-cycle events with the `drag.` prefix _and_ events namespaced\n * to a prefix choosen by a user during drag initialization.\n *\n * The following events are emitted (appropriately prefixed) via\n * the {@link EventBus}.\n *\n * * `init`\n * * `start`\n * * `move`\n * * `end`\n * * `ended` (dragging already in off state)\n * * `cancel` (only if previously started)\n * * `canceled` (dragging already in off state, only if previously started)\n * * `cleanup`\n *\n *\n * @example\n *\n * function MyDragComponent(eventBus, dragging) {\n *\n *   eventBus.on('mydrag.start', function(event) {\n *     console.log('yes, we start dragging');\n *   });\n *\n *   eventBus.on('mydrag.move', function(event) {\n *     console.log('canvas local coordinates', event.x, event.y, event.dx, event.dy);\n *\n *     // local drag data is passed with the event\n *     event.context.foo; // \"BAR\"\n *\n *     // the original mouse event, too\n *     event.originalEvent; // MouseEvent(...)\n *   });\n *\n *   eventBus.on('element.click', function(event) {\n *     dragging.init(event, 'mydrag', {\n *       cursor: 'grabbing',\n *       data: {\n *         context: {\n *           foo: \"BAR\"\n *         }\n *       }\n *     });\n *   });\n * }\n */\nexport default function Dragging(eventBus, canvas, selection, elementRegistry) {\n\n  var defaultOptions = {\n    threshold: 5,\n    trapClick: true\n  };\n\n  // the currently active drag operation\n  // dragging is active as soon as this context exists.\n  //\n  // it is visually _active_ only when a context.active flag is set to true.\n  var context;\n\n  /* convert a global event into local coordinates */\n  function toLocalPoint(globalPosition) {\n\n    var viewbox = canvas.viewbox();\n\n    var clientRect = canvas._container.getBoundingClientRect();\n\n    return {\n      x: viewbox.x + (globalPosition.x - clientRect.left) / viewbox.scale,\n      y: viewbox.y + (globalPosition.y - clientRect.top) / viewbox.scale\n    };\n  }\n\n  // helpers\n\n  function fire(type, dragContext) {\n    dragContext = dragContext || context;\n\n    var event = eventBus.createEvent(\n      assign(\n        {},\n        dragContext.payload,\n        dragContext.data,\n        { isTouch: dragContext.isTouch }\n      )\n    );\n\n    // default integration\n    if (eventBus.fire('drag.' + type, event) === false) {\n      return false;\n    }\n\n    return eventBus.fire(dragContext.prefix + '.' + type, event);\n  }\n\n  function restoreSelection(previousSelection) {\n    var existingSelection = previousSelection.filter(function(element) {\n      return elementRegistry.get(element.id);\n    });\n\n    existingSelection.length && selection.select(existingSelection);\n  }\n\n  // event listeners\n\n  function move(event, activate) {\n    var payload = context.payload,\n        displacement = context.displacement;\n\n    var globalStart = context.globalStart,\n        globalCurrent = toPoint(event),\n        globalDelta = deltaPos(globalCurrent, globalStart);\n\n    var localStart = context.localStart,\n        localCurrent = toLocalPoint(globalCurrent),\n        localDelta = deltaPos(localCurrent, localStart);\n\n\n    // activate context explicitly or once threshold is reached\n    if (!context.active && (activate || getLength(globalDelta) > context.threshold)) {\n\n      // fire start event with original\n      // starting coordinates\n\n      assign(payload, {\n        x: round(localStart.x + displacement.x),\n        y: round(localStart.y + displacement.y),\n        dx: 0,\n        dy: 0\n      }, { originalEvent: event });\n\n      if (false === fire('start')) {\n        return cancel();\n      }\n\n      context.active = true;\n\n      // unset selection and remember old selection\n      // the previous (old) selection will always passed\n      // with the event via the event.previousSelection property\n      if (!context.keepSelection) {\n        payload.previousSelection = selection.get();\n        selection.select(null);\n      }\n\n      // allow custom cursor\n      if (context.cursor) {\n        cursorSet(context.cursor);\n      }\n\n      // indicate dragging via marker on root element\n      canvas.addMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);\n    }\n\n    stopPropagation(event);\n\n    if (context.active) {\n\n      // update payload with actual coordinates\n      assign(payload, {\n        x: round(localCurrent.x + displacement.x),\n        y: round(localCurrent.y + displacement.y),\n        dx: round(localDelta.x),\n        dy: round(localDelta.y)\n      }, { originalEvent: event });\n\n      // emit move event\n      fire('move');\n    }\n  }\n\n  function end(event) {\n    var previousContext,\n        returnValue = true;\n\n    if (context.active) {\n\n      if (event) {\n        context.payload.originalEvent = event;\n\n        // suppress original event (click, ...)\n        // because we just ended a drag operation\n        stopPropagation(event);\n      }\n\n      // implementations may stop restoring the\n      // original state (selections, ...) by preventing the\n      // end events default action\n      returnValue = fire('end');\n    }\n\n    if (returnValue === false) {\n      fire('rejected');\n    }\n\n    previousContext = cleanup(returnValue !== true);\n\n    // last event to be fired when all drag operations are done\n    // at this point in time no drag operation is in progress anymore\n    fire('ended', previousContext);\n  }\n\n\n  // cancel active drag operation if the user presses\n  // the ESC key on the keyboard\n\n  function checkCancel(event) {\n\n    if (event.which === 27) {\n      preventDefault(event);\n\n      cancel();\n    }\n  }\n\n\n  // prevent ghost click that might occur after a finished\n  // drag and drop session\n\n  function trapClickAndEnd(event) {\n\n    var untrap;\n\n    // trap the click in case we are part of an active\n    // drag operation. This will effectively prevent\n    // the ghost click that cannot be canceled otherwise.\n    if (context.active) {\n\n      untrap = installClickTrap(eventBus);\n\n      // remove trap after minimal delay\n      setTimeout(untrap, 400);\n\n      // prevent default action (click)\n      preventDefault(event);\n    }\n\n    end(event);\n  }\n\n  function trapTouch(event) {\n    move(event);\n  }\n\n  // update the drag events hover (djs.model.Base) and hoverGfx (Snap<SVGElement>)\n  // properties during hover and out and fire {prefix}.hover and {prefix}.out properties\n  // respectively\n\n  function hover(event) {\n    var payload = context.payload;\n\n    payload.hoverGfx = event.gfx;\n    payload.hover = event.element;\n\n    fire('hover');\n  }\n\n  function out(event) {\n    fire('out');\n\n    var payload = context.payload;\n\n    payload.hoverGfx = null;\n    payload.hover = null;\n  }\n\n\n  // life-cycle methods\n\n  function cancel(restore) {\n    var previousContext;\n\n    if (!context) {\n      return;\n    }\n\n    var wasActive = context.active;\n\n    if (wasActive) {\n      fire('cancel');\n    }\n\n    previousContext = cleanup(restore);\n\n    if (wasActive) {\n\n      // last event to be fired when all drag operations are done\n      // at this point in time no drag operation is in progress anymore\n      fire('canceled', previousContext);\n    }\n  }\n\n  function cleanup(restore) {\n    var previousContext,\n        endDrag;\n\n    fire('cleanup');\n\n    // reset cursor\n    cursorUnset();\n\n    if (context.trapClick) {\n      endDrag = trapClickAndEnd;\n    } else {\n      endDrag = end;\n    }\n\n    // reset dom listeners\n    domEvent.unbind(document, 'mousemove', move);\n\n    domEvent.unbind(document, 'dragstart', preventDefault);\n    domEvent.unbind(document, 'selectstart', preventDefault);\n\n    domEvent.unbind(document, 'mousedown', endDrag, true);\n    domEvent.unbind(document, 'mouseup', endDrag, true);\n\n    domEvent.unbind(document, 'keyup', checkCancel);\n\n    domEvent.unbind(document, 'touchstart', trapTouch, true);\n    domEvent.unbind(document, 'touchcancel', cancel, true);\n    domEvent.unbind(document, 'touchmove', move, true);\n    domEvent.unbind(document, 'touchend', end, true);\n\n    eventBus.off('element.hover', hover);\n    eventBus.off('element.out', out);\n\n    // remove drag marker on root element\n    canvas.removeMarker(canvas.getRootElement(), DRAG_ACTIVE_CLS);\n\n    // restore selection, unless it has changed\n    var previousSelection = context.payload.previousSelection;\n\n    if (restore !== false && previousSelection && !selection.get().length) {\n      restoreSelection(previousSelection);\n    }\n\n    previousContext = context;\n\n    context = null;\n\n    return previousContext;\n  }\n\n  /**\n   * Initialize a drag operation.\n   *\n   * If `localPosition` is given, drag events will be emitted\n   * relative to it.\n   *\n   * @param {MouseEvent|TouchEvent} [event]\n   * @param {Point} [localPosition] actual diagram local position this drag operation should start at\n   * @param {string} prefix\n   * @param {Object} [options]\n   */\n  function init(event, relativeTo, prefix, options) {\n\n    // only one drag operation may be active, at a time\n    if (context) {\n      cancel(false);\n    }\n\n    if (typeof relativeTo === 'string') {\n      options = prefix;\n      prefix = relativeTo;\n      relativeTo = null;\n    }\n\n    options = assign({}, defaultOptions, options || {});\n\n    var data = options.data || {},\n        originalEvent,\n        globalStart,\n        localStart,\n        endDrag,\n        isTouch;\n\n    if (options.trapClick) {\n      endDrag = trapClickAndEnd;\n    } else {\n      endDrag = end;\n    }\n\n    if (event) {\n      originalEvent = getOriginal(event) || event;\n      globalStart = toPoint(event);\n\n      stopPropagation(event);\n\n      // prevent default browser dragging behavior\n      if (originalEvent.type === 'dragstart') {\n        preventDefault(originalEvent);\n      }\n    } else {\n      originalEvent = null;\n      globalStart = { x: 0, y: 0 };\n    }\n\n    localStart = toLocalPoint(globalStart);\n\n    if (!relativeTo) {\n      relativeTo = localStart;\n    }\n\n    isTouch = isTouchEvent(originalEvent);\n\n    context = assign({\n      prefix: prefix,\n      data: data,\n      payload: {},\n      globalStart: globalStart,\n      displacement: deltaPos(relativeTo, localStart),\n      localStart: localStart,\n      isTouch: isTouch\n    }, options);\n\n    // skip dom registration if trigger\n    // is set to manual (during testing)\n    if (!options.manual) {\n\n      // add dom listeners\n\n      if (isTouch) {\n        domEvent.bind(document, 'touchstart', trapTouch, true);\n        domEvent.bind(document, 'touchcancel', cancel, true);\n        domEvent.bind(document, 'touchmove', move, true);\n        domEvent.bind(document, 'touchend', end, true);\n      } else {\n\n        // assume we use the mouse to interact per default\n        domEvent.bind(document, 'mousemove', move);\n\n        // prevent default browser drag and text selection behavior\n        domEvent.bind(document, 'dragstart', preventDefault);\n        domEvent.bind(document, 'selectstart', preventDefault);\n\n        domEvent.bind(document, 'mousedown', endDrag, true);\n        domEvent.bind(document, 'mouseup', endDrag, true);\n      }\n\n      domEvent.bind(document, 'keyup', checkCancel);\n\n      eventBus.on('element.hover', hover);\n      eventBus.on('element.out', out);\n    }\n\n    fire('init');\n\n    if (options.autoActivate) {\n      move(event, true);\n    }\n  }\n\n  // cancel on diagram destruction\n  eventBus.on('diagram.destroy', cancel);\n\n\n  // API\n\n  this.init = init;\n  this.move = move;\n  this.hover = hover;\n  this.out = out;\n  this.end = end;\n\n  this.cancel = cancel;\n\n  // for introspection\n\n  this.context = function() {\n    return context;\n  };\n\n  this.setOptions = function(options) {\n    assign(defaultOptions, options);\n  };\n}\n\nDragging.$inject = [\n  'eventBus',\n  'canvas',\n  'selection',\n  'elementRegistry'\n];\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,IAAI,CAACD,KAAjB;AAEA,SAASE,MAAT,QAAuB,UAAvB;AAEA,SACEC,KAAK,IAAIC,QADX,QAEO,SAFP;AAIA,SACEC,WADF,EAEEC,OAFF,EAGEC,eAHF,QAIO,kBAJP;AAMA,SACEC,GAAG,IAAIC,SADT,EAEEC,KAAK,IAAIC,WAFX,QAGO,mBAHP;AAKA,SACEC,OAAO,IAAIC,gBADb,QAEO,sBAFP;AAIA,SACEC,KAAK,IAAIC,QADX,QAEO,yBAFP;AAIA,IAAIC,eAAe,GAAG,iBAAtB;;AAGA,SAASC,cAAT,CAAwBd,KAAxB,EAA+B;EAC7BA,KAAK,CAACc,cAAN;AACD;;AAED,SAASC,YAAT,CAAsBf,KAAtB,EAA6B;EAE3B;EACA;EACA,OAAO,OAAOgB,UAAP,KAAsB,WAAtB,IAAqChB,KAAK,YAAYgB,UAA7D;AACD;;AAED,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;EACxB,OAAOpB,IAAI,CAACqB,IAAL,CAAUrB,IAAI,CAACsB,GAAL,CAASF,KAAK,CAACG,CAAf,EAAkB,CAAlB,IAAuBvB,IAAI,CAACsB,GAAL,CAASF,KAAK,CAACI,CAAf,EAAkB,CAAlB,CAAjC,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,QAAT,CAAkBC,QAAlB,EAA4BC,MAA5B,EAAoCC,SAApC,EAA+CC,eAA/C,EAAgE;EAE7E,IAAIC,cAAc,GAAG;IACnBC,SAAS,EA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"},"metadata":{},"sourceType":"module"}