{"ast":null,"code":"import { forEach, isArray } from 'min-dash';\nvar NOT_REGISTERED_ERROR = 'is not a registered action',\n    IS_REGISTERED_ERROR = 'is already registered';\n/**\n * An interface that provides access to modeling actions by decoupling\n * the one who requests the action to be triggered and the trigger itself.\n *\n * It's possible to add new actions by registering them with ´registerAction´\n * and likewise unregister existing ones with ´unregisterAction´.\n *\n *\n * ## Life-Cycle and configuration\n *\n * The editor actions will wait for diagram initialization before\n * registering default actions _and_ firing an `editorActions.init` event.\n *\n * Interested parties may listen to the `editorActions.init` event with\n * low priority to check, which actions got registered. Other components\n * may use the event to register their own actions via `registerAction`.\n *\n * @param {EventBus} eventBus\n * @param {Injector} injector\n */\n\nexport default function EditorActions(eventBus, injector) {\n  // initialize actions\n  this._actions = {};\n  var self = this;\n  eventBus.on('diagram.init', function () {\n    // all diagram modules got loaded; check which ones\n    // are available and register the respective default actions\n    self._registerDefaultActions(injector); // ask interested parties to register available editor\n    // actions on diagram initialization\n\n\n    eventBus.fire('editorActions.init', {\n      editorActions: self\n    });\n  });\n}\nEditorActions.$inject = ['eventBus', 'injector'];\n/**\n * Register default actions.\n *\n * @param {Injector} injector\n */\n\nEditorActions.prototype._registerDefaultActions = function (injector) {\n  // (1) retrieve optional components to integrate with\n  var commandStack = injector.get('commandStack', false);\n  var modeling = injector.get('modeling', false);\n  var selection = injector.get('selection', false);\n  var zoomScroll = injector.get('zoomScroll', false);\n  var copyPaste = injector.get('copyPaste', false);\n  var canvas = injector.get('canvas', false);\n  var rules = injector.get('rules', false);\n  var keyboardMove = injector.get('keyboardMove', false);\n  var keyboardMoveSelection = injector.get('keyboardMoveSelection', false); // (2) check components and register actions\n\n  if (commandStack) {\n    this.register('undo', function () {\n      commandStack.undo();\n    });\n    this.register('redo', function () {\n      commandStack.redo();\n    });\n  }\n\n  if (copyPaste && selection) {\n    this.register('copy', function () {\n      var selectedElements = selection.get();\n\n      if (selectedElements.length) {\n        return copyPaste.copy(selectedElements);\n      }\n    });\n  }\n\n  if (copyPaste) {\n    this.register('paste', function () {\n      copyPaste.paste();\n    });\n  }\n\n  if (zoomScroll) {\n    this.register('stepZoom', function (opts) {\n      zoomScroll.stepZoom(opts.value);\n    });\n  }\n\n  if (canvas) {\n    this.register('zoom', function (opts) {\n      canvas.zoom(opts.value);\n    });\n  }\n\n  if (modeling && selection && rules) {\n    this.register('removeSelection', function () {\n      var selectedElements = selection.get();\n\n      if (!selectedElements.length) {\n        return;\n      }\n\n      var allowed = rules.allowed('elements.delete', {\n        elements: selectedElements\n      }),\n          removableElements;\n\n      if (allowed === false) {\n        return;\n      } else if (isArray(allowed)) {\n        removableElements = allowed;\n      } else {\n        removableElements = selectedElements;\n      }\n\n      if (removableElements.length) {\n        modeling.removeElements(removableElements.slice());\n      }\n    });\n  }\n\n  if (keyboardMove) {\n    this.register('moveCanvas', function (opts) {\n      keyboardMove.moveCanvas(opts);\n    });\n  }\n\n  if (keyboardMoveSelection) {\n    this.register('moveSelection', function (opts) {\n      keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);\n    });\n  }\n};\n/**\n * Triggers a registered action\n *\n * @param  {string} action\n * @param  {Object} opts\n *\n * @return {Unknown} Returns what the registered listener returns\n */\n\n\nEditorActions.prototype.trigger = function (action, opts) {\n  if (!this._actions[action]) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n\n  return this._actions[action](opts);\n};\n/**\n * Registers a collections of actions.\n * The key of the object will be the name of the action.\n *\n * @example\n * ´´´\n * var actions = {\n *   spaceTool: function() {\n *     spaceTool.activateSelection();\n *   },\n *   lassoTool: function() {\n *     lassoTool.activateSelection();\n *   }\n * ];\n *\n * editorActions.register(actions);\n *\n * editorActions.isRegistered('spaceTool'); // true\n * ´´´\n *\n * @param  {Object} actions\n */\n\n\nEditorActions.prototype.register = function (actions, listener) {\n  var self = this;\n\n  if (typeof actions === 'string') {\n    return this._registerAction(actions, listener);\n  }\n\n  forEach(actions, function (listener, action) {\n    self._registerAction(action, listener);\n  });\n};\n/**\n * Registers a listener to an action key\n *\n * @param  {string} action\n * @param  {Function} listener\n */\n\n\nEditorActions.prototype._registerAction = function (action, listener) {\n  if (this.isRegistered(action)) {\n    throw error(action, IS_REGISTERED_ERROR);\n  }\n\n  this._actions[action] = listener;\n};\n/**\n * Unregister an existing action\n *\n * @param {string} action\n */\n\n\nEditorActions.prototype.unregister = function (action) {\n  if (!this.isRegistered(action)) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n\n  this._actions[action] = undefined;\n};\n/**\n * Returns the number of actions that are currently registered\n *\n * @return {number}\n */\n\n\nEditorActions.prototype.getActions = function () {\n  return Object.keys(this._actions);\n};\n/**\n * Checks wether the given action is registered\n *\n * @param {string} action\n *\n * @return {boolean}\n */\n\n\nEditorActions.prototype.isRegistered = function (action) {\n  return !!this._actions[action];\n};\n\nfunction error(action, message) {\n  return new Error(action + ' ' + message);\n}","map":{"version":3,"names":["forEach","isArray","NOT_REGISTERED_ERROR","IS_REGISTERED_ERROR","EditorActions","eventBus","injector","_actions","self","on","_registerDefaultActions","fire","editorActions","$inject","prototype","commandStack","get","modeling","selection","zoomScroll","copyPaste","canvas","rules","keyboardMove","keyboardMoveSelection","register","undo","redo","selectedElements","length","copy","paste","opts","stepZoom","value","zoom","allowed","elements","removableElements","removeElements","slice","moveCanvas","moveSelection","direction","accelerated","trigger","action","error","actions","listener","_registerAction","isRegistered","unregister","undefined","getActions","Object","keys","message","Error"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/editor-actions/EditorActions.js"],"sourcesContent":["import {\n  forEach,\n  isArray\n} from 'min-dash';\n\nvar NOT_REGISTERED_ERROR = 'is not a registered action',\n    IS_REGISTERED_ERROR = 'is already registered';\n\n\n/**\n * An interface that provides access to modeling actions by decoupling\n * the one who requests the action to be triggered and the trigger itself.\n *\n * It's possible to add new actions by registering them with ´registerAction´\n * and likewise unregister existing ones with ´unregisterAction´.\n *\n *\n * ## Life-Cycle and configuration\n *\n * The editor actions will wait for diagram initialization before\n * registering default actions _and_ firing an `editorActions.init` event.\n *\n * Interested parties may listen to the `editorActions.init` event with\n * low priority to check, which actions got registered. Other components\n * may use the event to register their own actions via `registerAction`.\n *\n * @param {EventBus} eventBus\n * @param {Injector} injector\n */\nexport default function EditorActions(eventBus, injector) {\n\n  // initialize actions\n  this._actions = {};\n\n  var self = this;\n\n  eventBus.on('diagram.init', function() {\n\n    // all diagram modules got loaded; check which ones\n    // are available and register the respective default actions\n    self._registerDefaultActions(injector);\n\n    // ask interested parties to register available editor\n    // actions on diagram initialization\n    eventBus.fire('editorActions.init', {\n      editorActions: self\n    });\n  });\n\n}\n\nEditorActions.$inject = [\n  'eventBus',\n  'injector'\n];\n\n/**\n * Register default actions.\n *\n * @param {Injector} injector\n */\nEditorActions.prototype._registerDefaultActions = function(injector) {\n\n  // (1) retrieve optional components to integrate with\n\n  var commandStack = injector.get('commandStack', false);\n  var modeling = injector.get('modeling', false);\n  var selection = injector.get('selection', false);\n  var zoomScroll = injector.get('zoomScroll', false);\n  var copyPaste = injector.get('copyPaste', false);\n  var canvas = injector.get('canvas', false);\n  var rules = injector.get('rules', false);\n  var keyboardMove = injector.get('keyboardMove', false);\n  var keyboardMoveSelection = injector.get('keyboardMoveSelection', false);\n\n  // (2) check components and register actions\n\n  if (commandStack) {\n    this.register('undo', function() {\n      commandStack.undo();\n    });\n\n    this.register('redo', function() {\n      commandStack.redo();\n    });\n  }\n\n  if (copyPaste && selection) {\n    this.register('copy', function() {\n      var selectedElements = selection.get();\n\n      if (selectedElements.length) {\n        return copyPaste.copy(selectedElements);\n      }\n    });\n  }\n\n  if (copyPaste) {\n    this.register('paste', function() {\n      copyPaste.paste();\n    });\n  }\n\n  if (zoomScroll) {\n    this.register('stepZoom', function(opts) {\n      zoomScroll.stepZoom(opts.value);\n    });\n  }\n\n  if (canvas) {\n    this.register('zoom', function(opts) {\n      canvas.zoom(opts.value);\n    });\n  }\n\n  if (modeling && selection && rules) {\n    this.register('removeSelection', function() {\n\n      var selectedElements = selection.get();\n\n      if (!selectedElements.length) {\n        return;\n      }\n\n      var allowed = rules.allowed('elements.delete', { elements: selectedElements }),\n          removableElements;\n\n      if (allowed === false) {\n        return;\n      }\n      else if (isArray(allowed)) {\n        removableElements = allowed;\n      }\n      else {\n        removableElements = selectedElements;\n      }\n\n      if (removableElements.length) {\n        modeling.removeElements(removableElements.slice());\n      }\n    });\n  }\n\n  if (keyboardMove) {\n    this.register('moveCanvas', function(opts) {\n      keyboardMove.moveCanvas(opts);\n    });\n  }\n\n  if (keyboardMoveSelection) {\n    this.register('moveSelection', function(opts) {\n      keyboardMoveSelection.moveSelection(opts.direction, opts.accelerated);\n    });\n  }\n\n};\n\n\n/**\n * Triggers a registered action\n *\n * @param  {string} action\n * @param  {Object} opts\n *\n * @return {Unknown} Returns what the registered listener returns\n */\nEditorActions.prototype.trigger = function(action, opts) {\n  if (!this._actions[action]) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n\n  return this._actions[action](opts);\n};\n\n\n/**\n * Registers a collections of actions.\n * The key of the object will be the name of the action.\n *\n * @example\n * ´´´\n * var actions = {\n *   spaceTool: function() {\n *     spaceTool.activateSelection();\n *   },\n *   lassoTool: function() {\n *     lassoTool.activateSelection();\n *   }\n * ];\n *\n * editorActions.register(actions);\n *\n * editorActions.isRegistered('spaceTool'); // true\n * ´´´\n *\n * @param  {Object} actions\n */\nEditorActions.prototype.register = function(actions, listener) {\n  var self = this;\n\n  if (typeof actions === 'string') {\n    return this._registerAction(actions, listener);\n  }\n\n  forEach(actions, function(listener, action) {\n    self._registerAction(action, listener);\n  });\n};\n\n/**\n * Registers a listener to an action key\n *\n * @param  {string} action\n * @param  {Function} listener\n */\nEditorActions.prototype._registerAction = function(action, listener) {\n  if (this.isRegistered(action)) {\n    throw error(action, IS_REGISTERED_ERROR);\n  }\n\n  this._actions[action] = listener;\n};\n\n/**\n * Unregister an existing action\n *\n * @param {string} action\n */\nEditorActions.prototype.unregister = function(action) {\n  if (!this.isRegistered(action)) {\n    throw error(action, NOT_REGISTERED_ERROR);\n  }\n\n  this._actions[action] = undefined;\n};\n\n/**\n * Returns the number of actions that are currently registered\n *\n * @return {number}\n */\nEditorActions.prototype.getActions = function() {\n  return Object.keys(this._actions);\n};\n\n/**\n * Checks wether the given action is registered\n *\n * @param {string} action\n *\n * @return {boolean}\n */\nEditorActions.prototype.isRegistered = function(action) {\n  return !!this._actions[action];\n};\n\n\nfunction error(action, message) {\n  return new Error(action + ' ' + message);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}