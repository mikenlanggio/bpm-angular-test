{"ast":null,"code":"import { assign } from 'min-dash';\nvar round = Math.round;\n/**\n * Service that allow replacing of elements.\n */\n\nexport default function Replace(modeling) {\n  this._modeling = modeling;\n}\nReplace.$inject = ['modeling'];\n/**\n * @param {Element} oldElement - Element to be replaced\n * @param {Object}  newElementData - Containing information about the new element,\n *                                   for example the new bounds and type.\n * @param {Object}  options - Custom options that will be attached to the context. It can be used to inject data\n *                            that is needed in the command chain. For example it could be used in\n *                            eventbus.on('commandStack.shape.replace.postExecute') to change shape attributes after\n *                            shape creation.\n */\n\nReplace.prototype.replaceElement = function (oldElement, newElementData, options) {\n  if (oldElement.waypoints) {\n    // TODO(nikku): we do not replace connections, yet\n    return null;\n  }\n\n  var modeling = this._modeling;\n  var width = newElementData.width || oldElement.width,\n      height = newElementData.height || oldElement.height,\n      x = newElementData.x || oldElement.x,\n      y = newElementData.y || oldElement.y,\n      centerX = round(x + width / 2),\n      centerY = round(y + height / 2); // modeling API requires center coordinates,\n  // account for that when handling shape bounds\n\n  return modeling.replaceShape(oldElement, assign({}, newElementData, {\n    x: centerX,\n    y: centerY,\n    width: width,\n    height: height\n  }), options);\n};","map":{"version":3,"names":["assign","round","Math","Replace","modeling","_modeling","$inject","prototype","replaceElement","oldElement","newElementData","options","waypoints","width","height","x","y","centerX","centerY","replaceShape"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/replace/Replace.js"],"sourcesContent":["import {\n  assign\n} from 'min-dash';\n\nvar round = Math.round;\n\n/**\n * Service that allow replacing of elements.\n */\nexport default function Replace(modeling) {\n\n  this._modeling = modeling;\n}\n\nReplace.$inject = [ 'modeling' ];\n\n/**\n * @param {Element} oldElement - Element to be replaced\n * @param {Object}  newElementData - Containing information about the new element,\n *                                   for example the new bounds and type.\n * @param {Object}  options - Custom options that will be attached to the context. It can be used to inject data\n *                            that is needed in the command chain. For example it could be used in\n *                            eventbus.on('commandStack.shape.replace.postExecute') to change shape attributes after\n *                            shape creation.\n */\nReplace.prototype.replaceElement = function(oldElement, newElementData, options) {\n\n  if (oldElement.waypoints) {\n\n    // TODO(nikku): we do not replace connections, yet\n    return null;\n  }\n\n  var modeling = this._modeling;\n\n  var width = newElementData.width || oldElement.width,\n      height = newElementData.height || oldElement.height,\n      x = newElementData.x || oldElement.x,\n      y = newElementData.y || oldElement.y,\n      centerX = round(x + width / 2),\n      centerY = round(y + height / 2);\n\n  // modeling API requires center coordinates,\n  // account for that when handling shape bounds\n\n  return modeling.replaceShape(\n    oldElement,\n    assign(\n      {},\n      newElementData,\n      {\n        x: centerX,\n        y: centerY,\n        width: width,\n        height: height\n      }\n    ),\n    options\n  );\n};\n"],"mappings":"AAAA,SACEA,MADF,QAEO,UAFP;AAIA,IAAIC,KAAK,GAAGC,IAAI,CAACD,KAAjB;AAEA;AACA;AACA;;AACA,eAAe,SAASE,OAAT,CAAiBC,QAAjB,EAA2B;EAExC,KAAKC,SAAL,GAAiBD,QAAjB;AACD;AAEDD,OAAO,CAACG,OAAR,GAAkB,CAAE,UAAF,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAH,OAAO,CAACI,SAAR,CAAkBC,cAAlB,GAAmC,UAASC,UAAT,EAAqBC,cAArB,EAAqCC,OAArC,EAA8C;EAE/E,IAAIF,UAAU,CAACG,SAAf,EAA0B;IAExB;IACA,OAAO,IAAP;EACD;;EAED,IAAIR,QAAQ,GAAG,KAAKC,SAApB;EAEA,IAAIQ,KAAK,GAAGH,cAAc,CAACG,KAAf,IAAwBJ,UAAU,CAACI,KAA/C;EAAA,IACIC,MAAM,GAAGJ,cAAc,CAACI,MAAf,IAAyBL,UAAU,CAACK,MADjD;EAAA,IAEIC,CAAC,GAAGL,cAAc,CAACK,CAAf,IAAoBN,UAAU,CAACM,CAFvC;EAAA,IAGIC,CAAC,GAAGN,cAAc,CAACM,CAAf,IAAoBP,UAAU,CAACO,CAHvC;EAAA,IAIIC,OAAO,GAAGhB,KAAK,CAACc,CAAC,GAAGF,KAAK,GAAG,CAAb,CAJnB;EAAA,IAKIK,OAAO,GAAGjB,KAAK,CAACe,CAAC,GAAGF,MAAM,GAAG,CAAd,CALnB,CAV+E,CAiB/E;EACA;;EAEA,OAAOV,QAAQ,CAACe,YAAT,CACLV,UADK,EAELT,MAAM,CACJ,EADI,EAEJU,cAFI,EAGJ;IACEK,CAAC,EAAEE,OADL;IAEED,CAAC,EAAEE,OAFL;IAGEL,KAAK,EAAEA,KAHT;IAIEC,MAAM,EAAEA;EAJV,CAHI,CAFD,EAYLH,OAZK,CAAP;AAcD,CAlCD"},"metadata":{},"sourceType":"module"}