{"ast":null,"code":"import { is } from '../../util/ModelUtil';\nimport inherits from 'inherits-browser';\nimport { forEach } from 'min-dash';\nimport AutoResizeProvider from 'diagram-js/lib/features/auto-resize/AutoResizeProvider';\n/**\n * This module is a provider for automatically resizing parent BPMN elements\n */\n\nexport default function BpmnAutoResizeProvider(eventBus, modeling) {\n  AutoResizeProvider.call(this, eventBus);\n  this._modeling = modeling;\n}\ninherits(BpmnAutoResizeProvider, AutoResizeProvider);\nBpmnAutoResizeProvider.$inject = ['eventBus', 'modeling'];\n/**\n * Check if the given target can be expanded\n *\n * @param  {djs.model.Shape} target\n *\n * @return {boolean}\n */\n\nBpmnAutoResizeProvider.prototype.canResize = function (elements, target) {\n  // do not resize plane elements:\n  // root elements, collapsed sub-processes\n  if (is(target.di, 'bpmndi:BPMNPlane')) {\n    return false;\n  }\n\n  if (!is(target, 'bpmn:Participant') && !is(target, 'bpmn:Lane') && !is(target, 'bpmn:SubProcess')) {\n    return false;\n  }\n\n  var canResize = true;\n  forEach(elements, function (element) {\n    if (is(element, 'bpmn:Lane') || element.labelTarget) {\n      canResize = false;\n      return;\n    }\n  });\n  return canResize;\n};","map":{"version":3,"names":["is","inherits","forEach","AutoResizeProvider","BpmnAutoResizeProvider","eventBus","modeling","call","_modeling","$inject","prototype","canResize","elements","target","di","element","labelTarget"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/auto-resize/BpmnAutoResizeProvider.js"],"sourcesContent":["import { is } from '../../util/ModelUtil';\n\nimport inherits from 'inherits-browser';\n\nimport { forEach } from 'min-dash';\n\nimport AutoResizeProvider from 'diagram-js/lib/features/auto-resize/AutoResizeProvider';\n\n\n/**\n * This module is a provider for automatically resizing parent BPMN elements\n */\nexport default function BpmnAutoResizeProvider(eventBus, modeling) {\n  AutoResizeProvider.call(this, eventBus);\n\n  this._modeling = modeling;\n}\n\ninherits(BpmnAutoResizeProvider, AutoResizeProvider);\n\nBpmnAutoResizeProvider.$inject = [\n  'eventBus',\n  'modeling'\n];\n\n\n/**\n * Check if the given target can be expanded\n *\n * @param  {djs.model.Shape} target\n *\n * @return {boolean}\n */\nBpmnAutoResizeProvider.prototype.canResize = function(elements, target) {\n\n  // do not resize plane elements:\n  // root elements, collapsed sub-processes\n  if (is(target.di, 'bpmndi:BPMNPlane')) {\n    return false;\n  }\n\n  if (!is(target, 'bpmn:Participant') && !is(target, 'bpmn:Lane') && !(is(target, 'bpmn:SubProcess'))) {\n    return false;\n  }\n\n  var canResize = true;\n\n  forEach(elements, function(element) {\n\n    if (is(element, 'bpmn:Lane') || element.labelTarget) {\n      canResize = false;\n      return;\n    }\n  });\n\n  return canResize;\n};\n"],"mappings":"AAAA,SAASA,EAAT,QAAmB,sBAAnB;AAEA,OAAOC,QAAP,MAAqB,kBAArB;AAEA,SAASC,OAAT,QAAwB,UAAxB;AAEA,OAAOC,kBAAP,MAA+B,wDAA/B;AAGA;AACA;AACA;;AACA,eAAe,SAASC,sBAAT,CAAgCC,QAAhC,EAA0CC,QAA1C,EAAoD;EACjEH,kBAAkB,CAACI,IAAnB,CAAwB,IAAxB,EAA8BF,QAA9B;EAEA,KAAKG,SAAL,GAAiBF,QAAjB;AACD;AAEDL,QAAQ,CAACG,sBAAD,EAAyBD,kBAAzB,CAAR;AAEAC,sBAAsB,CAACK,OAAvB,GAAiC,CAC/B,UAD+B,EAE/B,UAF+B,CAAjC;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,sBAAsB,CAACM,SAAvB,CAAiCC,SAAjC,GAA6C,UAASC,QAAT,EAAmBC,MAAnB,EAA2B;EAEtE;EACA;EACA,IAAIb,EAAE,CAACa,MAAM,CAACC,EAAR,EAAY,kBAAZ,CAAN,EAAuC;IACrC,OAAO,KAAP;EACD;;EAED,IAAI,CAACd,EAAE,CAACa,MAAD,EAAS,kBAAT,CAAH,IAAmC,CAACb,EAAE,CAACa,MAAD,EAAS,WAAT,CAAtC,IAA+D,CAAEb,EAAE,CAACa,MAAD,EAAS,iBAAT,CAAvE,EAAqG;IACnG,OAAO,KAAP;EACD;;EAED,IAAIF,SAAS,GAAG,IAAhB;EAEAT,OAAO,CAACU,QAAD,EAAW,UAASG,OAAT,EAAkB;IAElC,IAAIf,EAAE,CAACe,OAAD,EAAU,WAAV,CAAF,IAA4BA,OAAO,CAACC,WAAxC,EAAqD;MACnDL,SAAS,GAAG,KAAZ;MACA;IACD;EACF,CANM,CAAP;EAQA,OAAOA,SAAP;AACD,CAvBD"},"metadata":{},"sourceType":"module"}