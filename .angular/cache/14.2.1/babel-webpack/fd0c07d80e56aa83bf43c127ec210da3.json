{"ast":null,"code":"import inherits from 'inherits-browser';\nimport CommandInterceptor from '../../../command/CommandInterceptor';\nimport { assign, isString } from 'min-dash';\n/**\r\n * Integrates resizing with grid snapping.\r\n */\n\nexport default function ResizeBehavior(eventBus, gridSnapping) {\n  CommandInterceptor.call(this, eventBus);\n  this._gridSnapping = gridSnapping;\n  var self = this;\n  this.preExecute('shape.resize', function (event) {\n    var context = event.context,\n        hints = context.hints || {},\n        autoResize = hints.autoResize;\n\n    if (!autoResize) {\n      return;\n    }\n\n    var shape = context.shape,\n        newBounds = context.newBounds;\n\n    if (isString(autoResize)) {\n      context.newBounds = self.snapComplex(newBounds, autoResize);\n    } else {\n      context.newBounds = self.snapSimple(shape, newBounds);\n    }\n  });\n}\nResizeBehavior.$inject = ['eventBus', 'gridSnapping', 'modeling'];\ninherits(ResizeBehavior, CommandInterceptor);\n/**\r\n * Snap width and height in relation to center.\r\n *\r\n * @param {djs.model.shape} shape\r\n * @param {Bounds} newBounds\r\n *\r\n * @returns {Bounds} Snapped bounds.\r\n */\n\nResizeBehavior.prototype.snapSimple = function (shape, newBounds) {\n  var gridSnapping = this._gridSnapping;\n  newBounds.width = gridSnapping.snapValue(newBounds.width, {\n    min: newBounds.width\n  });\n  newBounds.height = gridSnapping.snapValue(newBounds.height, {\n    min: newBounds.height\n  });\n  newBounds.x = shape.x + shape.width / 2 - newBounds.width / 2;\n  newBounds.y = shape.y + shape.height / 2 - newBounds.height / 2;\n  return newBounds;\n};\n/**\r\n * Snap x, y, width and height according to given directions.\r\n *\r\n * @param {Bounds} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @returns {Bounds} Snapped bounds.\r\n */\n\n\nResizeBehavior.prototype.snapComplex = function (newBounds, directions) {\n  if (/w|e/.test(directions)) {\n    newBounds = this.snapHorizontally(newBounds, directions);\n  }\n\n  if (/n|s/.test(directions)) {\n    newBounds = this.snapVertically(newBounds, directions);\n  }\n\n  return newBounds;\n};\n/**\r\n * Snap in one or both directions horizontally.\r\n *\r\n * @param {Bounds} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @returns {Bounds} Snapped bounds.\r\n */\n\n\nResizeBehavior.prototype.snapHorizontally = function (newBounds, directions) {\n  var gridSnapping = this._gridSnapping,\n      west = /w/.test(directions),\n      east = /e/.test(directions);\n  var snappedNewBounds = {};\n  snappedNewBounds.width = gridSnapping.snapValue(newBounds.width, {\n    min: newBounds.width\n  });\n\n  if (east) {\n    // handle <we>\n    if (west) {\n      snappedNewBounds.x = gridSnapping.snapValue(newBounds.x, {\n        max: newBounds.x\n      });\n      snappedNewBounds.width += gridSnapping.snapValue(newBounds.x - snappedNewBounds.x, {\n        min: newBounds.x - snappedNewBounds.x\n      });\n    } // handle <e>\n    else {\n      newBounds.x = newBounds.x + newBounds.width - snappedNewBounds.width;\n    }\n  } // assign snapped x and width\n\n\n  assign(newBounds, snappedNewBounds);\n  return newBounds;\n};\n/**\r\n * Snap in one or both directions vertically.\r\n *\r\n * @param {Bounds} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @returns {Bounds} Snapped bounds.\r\n */\n\n\nResizeBehavior.prototype.snapVertically = function (newBounds, directions) {\n  var gridSnapping = this._gridSnapping,\n      north = /n/.test(directions),\n      south = /s/.test(directions);\n  var snappedNewBounds = {};\n  snappedNewBounds.height = gridSnapping.snapValue(newBounds.height, {\n    min: newBounds.height\n  });\n\n  if (north) {\n    // handle <ns>\n    if (south) {\n      snappedNewBounds.y = gridSnapping.snapValue(newBounds.y, {\n        max: newBounds.y\n      });\n      snappedNewBounds.height += gridSnapping.snapValue(newBounds.y - snappedNewBounds.y, {\n        min: newBounds.y - snappedNewBounds.y\n      });\n    } // handle <n>\n    else {\n      newBounds.y = newBounds.y + newBounds.height - snappedNewBounds.height;\n    }\n  } // assign snapped y and height\n\n\n  assign(newBounds, snappedNewBounds);\n  return newBounds;\n};","map":{"version":3,"names":["inherits","CommandInterceptor","assign","isString","ResizeBehavior","eventBus","gridSnapping","call","_gridSnapping","self","preExecute","event","context","hints","autoResize","shape","newBounds","snapComplex","snapSimple","$inject","prototype","width","snapValue","min","height","x","y","directions","test","snapHorizontally","snapVertically","west","east","snappedNewBounds","max","north","south"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/grid-snapping/behavior/ResizeBehavior.js"],"sourcesContent":["import inherits from 'inherits-browser';\r\n\r\nimport CommandInterceptor from '../../../command/CommandInterceptor';\r\n\r\nimport {\r\n  assign,\r\n  isString\r\n} from 'min-dash';\r\n\r\n\r\n/**\r\n * Integrates resizing with grid snapping.\r\n */\r\nexport default function ResizeBehavior(eventBus, gridSnapping) {\r\n  CommandInterceptor.call(this, eventBus);\r\n\r\n  this._gridSnapping = gridSnapping;\r\n\r\n  var self = this;\r\n\r\n  this.preExecute('shape.resize', function(event) {\r\n    var context = event.context,\r\n        hints = context.hints || {},\r\n        autoResize = hints.autoResize;\r\n\r\n    if (!autoResize) {\r\n      return;\r\n    }\r\n\r\n    var shape = context.shape,\r\n        newBounds = context.newBounds;\r\n\r\n    if (isString(autoResize)) {\r\n      context.newBounds = self.snapComplex(newBounds, autoResize);\r\n    } else {\r\n      context.newBounds = self.snapSimple(shape, newBounds);\r\n    }\r\n  });\r\n}\r\n\r\nResizeBehavior.$inject = [\r\n  'eventBus',\r\n  'gridSnapping',\r\n  'modeling'\r\n];\r\n\r\ninherits(ResizeBehavior, CommandInterceptor);\r\n\r\n/**\r\n * Snap width and height in relation to center.\r\n *\r\n * @param {djs.model.shape} shape\r\n * @param {Bounds} newBounds\r\n *\r\n * @returns {Bounds} Snapped bounds.\r\n */\r\nResizeBehavior.prototype.snapSimple = function(shape, newBounds) {\r\n  var gridSnapping = this._gridSnapping;\r\n\r\n  newBounds.width = gridSnapping.snapValue(newBounds.width, {\r\n    min: newBounds.width\r\n  });\r\n\r\n  newBounds.height = gridSnapping.snapValue(newBounds.height, {\r\n    min: newBounds.height\r\n  });\r\n\r\n  newBounds.x = shape.x + (shape.width / 2) - (newBounds.width / 2);\r\n  newBounds.y = shape.y + (shape.height / 2) - (newBounds.height / 2);\r\n\r\n  return newBounds;\r\n};\r\n\r\n/**\r\n * Snap x, y, width and height according to given directions.\r\n *\r\n * @param {Bounds} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @returns {Bounds} Snapped bounds.\r\n */\r\nResizeBehavior.prototype.snapComplex = function(newBounds, directions) {\r\n  if (/w|e/.test(directions)) {\r\n    newBounds = this.snapHorizontally(newBounds, directions);\r\n  }\r\n\r\n  if (/n|s/.test(directions)) {\r\n    newBounds = this.snapVertically(newBounds, directions);\r\n  }\r\n\r\n  return newBounds;\r\n};\r\n\r\n/**\r\n * Snap in one or both directions horizontally.\r\n *\r\n * @param {Bounds} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @returns {Bounds} Snapped bounds.\r\n */\r\nResizeBehavior.prototype.snapHorizontally = function(newBounds, directions) {\r\n  var gridSnapping = this._gridSnapping,\r\n      west = /w/.test(directions),\r\n      east = /e/.test(directions);\r\n\r\n  var snappedNewBounds = {};\r\n\r\n  snappedNewBounds.width = gridSnapping.snapValue(newBounds.width, {\r\n    min: newBounds.width\r\n  });\r\n\r\n  if (east) {\r\n\r\n    // handle <we>\r\n    if (west) {\r\n      snappedNewBounds.x = gridSnapping.snapValue(newBounds.x, {\r\n        max: newBounds.x\r\n      });\r\n\r\n      snappedNewBounds.width += gridSnapping.snapValue(newBounds.x - snappedNewBounds.x, {\r\n        min: newBounds.x - snappedNewBounds.x\r\n      });\r\n    }\r\n\r\n    // handle <e>\r\n    else {\r\n      newBounds.x = newBounds.x + newBounds.width - snappedNewBounds.width;\r\n    }\r\n  }\r\n\r\n  // assign snapped x and width\r\n  assign(newBounds, snappedNewBounds);\r\n\r\n  return newBounds;\r\n};\r\n\r\n/**\r\n * Snap in one or both directions vertically.\r\n *\r\n * @param {Bounds} newBounds\r\n * @param {string} directions - Directions as {n|w|s|e}.\r\n *\r\n * @returns {Bounds} Snapped bounds.\r\n */\r\nResizeBehavior.prototype.snapVertically = function(newBounds, directions) {\r\n  var gridSnapping = this._gridSnapping,\r\n      north = /n/.test(directions),\r\n      south = /s/.test(directions);\r\n\r\n  var snappedNewBounds = {};\r\n\r\n  snappedNewBounds.height = gridSnapping.snapValue(newBounds.height, {\r\n    min: newBounds.height\r\n  });\r\n\r\n  if (north) {\r\n\r\n    // handle <ns>\r\n    if (south) {\r\n      snappedNewBounds.y = gridSnapping.snapValue(newBounds.y, {\r\n        max: newBounds.y\r\n      });\r\n\r\n      snappedNewBounds.height += gridSnapping.snapValue(newBounds.y - snappedNewBounds.y, {\r\n        min: newBounds.y - snappedNewBounds.y\r\n      });\r\n    }\r\n\r\n    // handle <n>\r\n    else {\r\n      newBounds.y = newBounds.y + newBounds.height - snappedNewBounds.height;\r\n    }\r\n  }\r\n\r\n  // assign snapped y and height\r\n  assign(newBounds, snappedNewBounds);\r\n\r\n  return newBounds;\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}