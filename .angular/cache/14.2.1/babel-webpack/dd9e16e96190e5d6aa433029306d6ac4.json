{"ast":null,"code":"import inherits from 'inherits-browser';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { getBusinessObject, is } from '../../../util/ModelUtil';\nimport { createCategory, createCategoryValue, linkCategoryValue, unlinkCategory, unlinkCategoryValue } from './util/CategoryUtil';\nvar LOWER_PRIORITY = 770;\n/**\n * BPMN specific Group behavior\n */\n\nexport default function GroupBehavior(bpmnFactory, bpmnjs, elementRegistry, eventBus, injector, moddleCopy) {\n  injector.invoke(CommandInterceptor, this);\n  /**\n   * Returns all group element in the current registry\n   *\n   * @return {Array<djs.model.shape>} a list of group shapes\n   */\n\n  function getGroupElements() {\n    return elementRegistry.filter(function (e) {\n      return is(e, 'bpmn:Group');\n    });\n  }\n  /**\n   * Returns true if given category is referenced in one of the given elements\n   *\n   * @param { djs.model.Element[] } elements\n   * @param { ModdleElement } category\n   *\n   * @return { boolean }\n   */\n\n\n  function isReferencedCategory(elements, category) {\n    return elements.some(function (element) {\n      var businessObject = getBusinessObject(element);\n\n      var _category = businessObject.categoryValueRef && businessObject.categoryValueRef.$parent;\n\n      return _category === category;\n    });\n  }\n  /**\n   * Returns true if given categoryValue is referenced in one of the given elements\n   *\n   * @param { djs.model.Element[] } elements\n   * @param { ModdleElement } categoryValue\n   *\n   * @return { boolean }\n   */\n\n\n  function isReferencedCategoryValue(elements, categoryValue) {\n    return elements.some(function (element) {\n      var businessObject = getBusinessObject(element);\n      return businessObject.categoryValueRef === categoryValue;\n    });\n  }\n  /**\n   * Remove category value unless it is still referenced\n   *\n   * @param {ModdleElement} categoryValue\n   * @param {ModdleElement} category\n   * @param {ModdleElement} businessObject\n   */\n\n\n  function removeCategoryValue(categoryValue, category, businessObject) {\n    var groups = getGroupElements().filter(function (element) {\n      return element.businessObject !== businessObject;\n    });\n\n    if (category && !isReferencedCategory(groups, category)) {\n      unlinkCategory(category);\n    }\n\n    if (categoryValue && !isReferencedCategoryValue(groups, categoryValue)) {\n      unlinkCategoryValue(categoryValue);\n    }\n  }\n  /**\n   * Add category value\n   *\n   * @param {ModdleElement} categoryValue\n   * @param {ModdleElement} category\n   */\n\n\n  function addCategoryValue(categoryValue, category) {\n    return linkCategoryValue(categoryValue, category, bpmnjs.getDefinitions());\n  }\n\n  function setCategoryValue(element, context) {\n    var businessObject = getBusinessObject(element),\n        categoryValue = businessObject.categoryValueRef;\n\n    if (!categoryValue) {\n      categoryValue = businessObject.categoryValueRef = context.categoryValue = context.categoryValue || createCategoryValue(bpmnFactory);\n    }\n\n    var category = categoryValue.$parent;\n\n    if (!category) {\n      category = categoryValue.$parent = context.category = context.category || createCategory(bpmnFactory);\n    }\n\n    addCategoryValue(categoryValue, category, bpmnjs.getDefinitions());\n  }\n\n  function unsetCategoryValue(element, context) {\n    var category = context.category,\n        categoryValue = context.categoryValue,\n        businessObject = getBusinessObject(element);\n\n    if (categoryValue) {\n      businessObject.categoryValueRef = null;\n      removeCategoryValue(categoryValue, category, businessObject);\n    } else {\n      removeCategoryValue(null, businessObject.categoryValueRef.$parent, businessObject);\n    }\n  } // ensure category + value exist before label editing\n\n\n  this.execute('label.create', function (event) {\n    var context = event.context,\n        labelTarget = context.labelTarget;\n\n    if (!is(labelTarget, 'bpmn:Group')) {\n      return;\n    }\n\n    setCategoryValue(labelTarget, context);\n  });\n  this.revert('label.create', function (event) {\n    var context = event.context,\n        labelTarget = context.labelTarget;\n\n    if (!is(labelTarget, 'bpmn:Group')) {\n      return;\n    }\n\n    unsetCategoryValue(labelTarget, context);\n  }); // remove referenced category + value when group was deleted\n\n  this.execute('shape.delete', function (event) {\n    var context = event.context,\n        shape = context.shape,\n        businessObject = getBusinessObject(shape);\n\n    if (!is(shape, 'bpmn:Group') || shape.labelTarget) {\n      return;\n    }\n\n    var categoryValue = context.categoryValue = businessObject.categoryValueRef,\n        category;\n\n    if (categoryValue) {\n      category = context.category = categoryValue.$parent;\n      removeCategoryValue(categoryValue, category, businessObject);\n      businessObject.categoryValueRef = null;\n    }\n  });\n  this.reverted('shape.delete', function (event) {\n    var context = event.context,\n        shape = context.shape;\n\n    if (!is(shape, 'bpmn:Group') || shape.labelTarget) {\n      return;\n    }\n\n    var category = context.category,\n        categoryValue = context.categoryValue,\n        businessObject = getBusinessObject(shape);\n\n    if (categoryValue) {\n      businessObject.categoryValueRef = categoryValue;\n      addCategoryValue(categoryValue, category);\n    }\n  }); // create new category + value when group was created\n\n  this.execute('shape.create', function (event) {\n    var context = event.context,\n        shape = context.shape;\n\n    if (!is(shape, 'bpmn:Group') || shape.labelTarget) {\n      return;\n    }\n\n    if (getBusinessObject(shape).categoryValueRef) {\n      setCategoryValue(shape, context);\n    }\n  });\n  this.reverted('shape.create', function (event) {\n    var context = event.context,\n        shape = context.shape;\n\n    if (!is(shape, 'bpmn:Group') || shape.labelTarget) {\n      return;\n    }\n\n    if (getBusinessObject(shape).categoryValueRef) {\n      unsetCategoryValue(shape, context);\n    }\n  }); // copy + paste categoryValueRef with group\n\n  function copy(bo, clone) {\n    var targetBo = bpmnFactory.create(bo.$type);\n    return moddleCopy.copyElement(bo, targetBo, null, clone);\n  }\n\n  eventBus.on('copyPaste.copyElement', LOWER_PRIORITY, function (context) {\n    var descriptor = context.descriptor,\n        element = context.element;\n\n    if (!is(element, 'bpmn:Group') || element.labelTarget) {\n      return;\n    }\n\n    var groupBo = getBusinessObject(element);\n\n    if (groupBo.categoryValueRef) {\n      var categoryValue = groupBo.categoryValueRef;\n      descriptor.categoryValue = copy(categoryValue, true);\n\n      if (categoryValue.$parent) {\n        descriptor.category = copy(categoryValue.$parent, true);\n      }\n    }\n  });\n  eventBus.on('copyPaste.pasteElement', LOWER_PRIORITY, function (context) {\n    var descriptor = context.descriptor,\n        businessObject = descriptor.businessObject,\n        categoryValue = descriptor.categoryValue,\n        category = descriptor.category;\n\n    if (categoryValue) {\n      categoryValue = businessObject.categoryValueRef = copy(categoryValue);\n    }\n\n    if (category) {\n      categoryValue.$parent = copy(category);\n    }\n\n    delete descriptor.category;\n    delete descriptor.categoryValue;\n  });\n}\nGroupBehavior.$inject = ['bpmnFactory', 'bpmnjs', 'elementRegistry', 'eventBus', 'injector', 'moddleCopy'];\ninherits(GroupBehavior, CommandInterceptor);","map":{"version":3,"names":["inherits","CommandInterceptor","getBusinessObject","is","createCategory","createCategoryValue","linkCategoryValue","unlinkCategory","unlinkCategoryValue","LOWER_PRIORITY","GroupBehavior","bpmnFactory","bpmnjs","elementRegistry","eventBus","injector","moddleCopy","invoke","getGroupElements","filter","e","isReferencedCategory","elements","category","some","element","businessObject","_category","categoryValueRef","$parent","isReferencedCategoryValue","categoryValue","removeCategoryValue","groups","addCategoryValue","getDefinitions","setCategoryValue","context","unsetCategoryValue","execute","event","labelTarget","revert","shape","reverted","copy","bo","clone","targetBo","create","$type","copyElement","on","descriptor","groupBo","$inject"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/modeling/behavior/GroupBehavior.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport {\n  getBusinessObject,\n  is\n} from '../../../util/ModelUtil';\n\nimport {\n  createCategory,\n  createCategoryValue,\n  linkCategoryValue,\n  unlinkCategory,\n  unlinkCategoryValue\n} from './util/CategoryUtil';\n\n\nvar LOWER_PRIORITY = 770;\n\n\n/**\n * BPMN specific Group behavior\n */\nexport default function GroupBehavior(\n    bpmnFactory,\n    bpmnjs,\n    elementRegistry,\n    eventBus,\n    injector,\n    moddleCopy\n) {\n  injector.invoke(CommandInterceptor, this);\n\n  /**\n   * Returns all group element in the current registry\n   *\n   * @return {Array<djs.model.shape>} a list of group shapes\n   */\n  function getGroupElements() {\n    return elementRegistry.filter(function(e) {\n      return is(e, 'bpmn:Group');\n    });\n  }\n\n  /**\n   * Returns true if given category is referenced in one of the given elements\n   *\n   * @param { djs.model.Element[] } elements\n   * @param { ModdleElement } category\n   *\n   * @return { boolean }\n   */\n  function isReferencedCategory(elements, category) {\n    return elements.some(function(element) {\n      var businessObject = getBusinessObject(element);\n\n      var _category = businessObject.categoryValueRef && businessObject.categoryValueRef.$parent;\n\n      return _category === category;\n    });\n  }\n\n  /**\n   * Returns true if given categoryValue is referenced in one of the given elements\n   *\n   * @param { djs.model.Element[] } elements\n   * @param { ModdleElement } categoryValue\n   *\n   * @return { boolean }\n   */\n  function isReferencedCategoryValue(elements, categoryValue) {\n    return elements.some(function(element) {\n      var businessObject = getBusinessObject(element);\n\n      return businessObject.categoryValueRef === categoryValue;\n    });\n  }\n\n  /**\n   * Remove category value unless it is still referenced\n   *\n   * @param {ModdleElement} categoryValue\n   * @param {ModdleElement} category\n   * @param {ModdleElement} businessObject\n   */\n  function removeCategoryValue(categoryValue, category, businessObject) {\n\n    var groups = getGroupElements().filter(function(element) {\n      return element.businessObject !== businessObject;\n    });\n\n    if (category && !isReferencedCategory(groups, category)) {\n      unlinkCategory(category);\n    }\n\n    if (categoryValue && !isReferencedCategoryValue(groups, categoryValue)) {\n      unlinkCategoryValue(categoryValue);\n    }\n  }\n\n  /**\n   * Add category value\n   *\n   * @param {ModdleElement} categoryValue\n   * @param {ModdleElement} category\n   */\n  function addCategoryValue(categoryValue, category) {\n    return linkCategoryValue(categoryValue, category, bpmnjs.getDefinitions());\n  }\n\n  function setCategoryValue(element, context) {\n    var businessObject = getBusinessObject(element),\n        categoryValue = businessObject.categoryValueRef;\n\n    if (!categoryValue) {\n      categoryValue =\n      businessObject.categoryValueRef =\n      context.categoryValue = (\n        context.categoryValue || createCategoryValue(bpmnFactory)\n      );\n    }\n\n    var category = categoryValue.$parent;\n\n    if (!category) {\n      category =\n      categoryValue.$parent =\n      context.category = (\n        context.category || createCategory(bpmnFactory)\n      );\n    }\n\n    addCategoryValue(categoryValue, category, bpmnjs.getDefinitions());\n  }\n\n  function unsetCategoryValue(element, context) {\n    var category = context.category,\n        categoryValue = context.categoryValue,\n        businessObject = getBusinessObject(element);\n\n    if (categoryValue) {\n      businessObject.categoryValueRef = null;\n\n      removeCategoryValue(categoryValue, category, businessObject);\n    } else {\n      removeCategoryValue(null, businessObject.categoryValueRef.$parent, businessObject);\n    }\n  }\n\n\n  // ensure category + value exist before label editing\n\n  this.execute('label.create', function(event) {\n    var context = event.context,\n        labelTarget = context.labelTarget;\n\n    if (!is(labelTarget, 'bpmn:Group')) {\n      return;\n    }\n\n    setCategoryValue(labelTarget, context);\n  });\n\n  this.revert('label.create', function(event) {\n    var context = event.context,\n        labelTarget = context.labelTarget;\n\n    if (!is(labelTarget, 'bpmn:Group')) {\n      return;\n    }\n\n    unsetCategoryValue(labelTarget, context);\n  });\n\n\n  // remove referenced category + value when group was deleted\n\n  this.execute('shape.delete', function(event) {\n\n    var context = event.context,\n        shape = context.shape,\n        businessObject = getBusinessObject(shape);\n\n    if (!is(shape, 'bpmn:Group') || shape.labelTarget) {\n      return;\n    }\n\n    var categoryValue = context.categoryValue = businessObject.categoryValueRef,\n        category;\n\n    if (categoryValue) {\n      category = context.category = categoryValue.$parent;\n\n      removeCategoryValue(categoryValue, category, businessObject);\n\n      businessObject.categoryValueRef = null;\n    }\n  });\n\n  this.reverted('shape.delete', function(event) {\n\n    var context = event.context,\n        shape = context.shape;\n\n    if (!is(shape, 'bpmn:Group') || shape.labelTarget) {\n      return;\n    }\n\n    var category = context.category,\n        categoryValue = context.categoryValue,\n        businessObject = getBusinessObject(shape);\n\n    if (categoryValue) {\n      businessObject.categoryValueRef = categoryValue;\n\n      addCategoryValue(categoryValue, category);\n    }\n  });\n\n\n  // create new category + value when group was created\n\n  this.execute('shape.create', function(event) {\n    var context = event.context,\n        shape = context.shape;\n\n    if (!is(shape, 'bpmn:Group') || shape.labelTarget) {\n      return;\n    }\n\n    if (getBusinessObject(shape).categoryValueRef) {\n      setCategoryValue(shape, context);\n    }\n  });\n\n  this.reverted('shape.create', function(event) {\n\n    var context = event.context,\n        shape = context.shape;\n\n    if (!is(shape, 'bpmn:Group') || shape.labelTarget) {\n      return;\n    }\n\n    if (getBusinessObject(shape).categoryValueRef) {\n      unsetCategoryValue(shape, context);\n    }\n  });\n\n\n  // copy + paste categoryValueRef with group\n\n  function copy(bo, clone) {\n    var targetBo = bpmnFactory.create(bo.$type);\n\n    return moddleCopy.copyElement(bo, targetBo, null, clone);\n  }\n\n  eventBus.on('copyPaste.copyElement', LOWER_PRIORITY, function(context) {\n    var descriptor = context.descriptor,\n        element = context.element;\n\n    if (!is(element, 'bpmn:Group') || element.labelTarget) {\n      return;\n    }\n\n    var groupBo = getBusinessObject(element);\n\n    if (groupBo.categoryValueRef) {\n\n      var categoryValue = groupBo.categoryValueRef;\n\n      descriptor.categoryValue = copy(categoryValue, true);\n\n      if (categoryValue.$parent) {\n        descriptor.category = copy(categoryValue.$parent, true);\n      }\n    }\n  });\n\n  eventBus.on('copyPaste.pasteElement', LOWER_PRIORITY, function(context) {\n    var descriptor = context.descriptor,\n        businessObject = descriptor.businessObject,\n        categoryValue = descriptor.categoryValue,\n        category = descriptor.category;\n\n    if (categoryValue) {\n      categoryValue = businessObject.categoryValueRef = copy(categoryValue);\n    }\n\n    if (category) {\n      categoryValue.$parent = copy(category);\n    }\n\n    delete descriptor.category;\n    delete descriptor.categoryValue;\n  });\n\n}\n\nGroupBehavior.$inject = [\n  'bpmnFactory',\n  'bpmnjs',\n  'elementRegistry',\n  'eventBus',\n  'injector',\n  'moddleCopy'\n];\n\ninherits(GroupBehavior, CommandInterceptor);"],"mappings":"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"},"metadata":{},"sourceType":"module"}