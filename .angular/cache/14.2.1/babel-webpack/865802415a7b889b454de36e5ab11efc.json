{"ast":null,"code":"import { forEach, find, matchPattern } from 'min-dash';\nimport inherits from 'inherits-browser';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\nexport default function ReplaceConnectionBehavior(eventBus, modeling, bpmnRules, injector) {\n  CommandInterceptor.call(this, eventBus);\n  var dragging = injector.get('dragging', false);\n\n  function fixConnection(connection) {\n    var source = connection.source,\n        target = connection.target,\n        parent = connection.parent; // do not do anything if connection\n    // is already deleted (may happen due to other\n    // behaviors plugged-in before)\n\n    if (!parent) {\n      return;\n    }\n\n    var replacementType, remove;\n    /**\n     * Check if incoming or outgoing connections\n     * can stay or could be substituted with an\n     * appropriate replacement.\n     *\n     * This holds true for SequenceFlow <> MessageFlow.\n     */\n\n    if (is(connection, 'bpmn:SequenceFlow')) {\n      if (!bpmnRules.canConnectSequenceFlow(source, target)) {\n        remove = true;\n      }\n\n      if (bpmnRules.canConnectMessageFlow(source, target)) {\n        replacementType = 'bpmn:MessageFlow';\n      }\n    } // transform message flows into sequence flows, if possible\n\n\n    if (is(connection, 'bpmn:MessageFlow')) {\n      if (!bpmnRules.canConnectMessageFlow(source, target)) {\n        remove = true;\n      }\n\n      if (bpmnRules.canConnectSequenceFlow(source, target)) {\n        replacementType = 'bpmn:SequenceFlow';\n      }\n    }\n\n    if (is(connection, 'bpmn:Association') && !bpmnRules.canConnectAssociation(source, target)) {\n      remove = true;\n    } // remove invalid connection,\n    // unless it has been removed already\n\n\n    if (remove) {\n      modeling.removeConnection(connection);\n    } // replace SequenceFlow <> MessageFlow\n\n\n    if (replacementType) {\n      modeling.connect(source, target, {\n        type: replacementType,\n        waypoints: connection.waypoints.slice()\n      });\n    }\n  }\n\n  function replaceReconnectedConnection(event) {\n    var context = event.context,\n        connection = context.connection,\n        source = context.newSource || connection.source,\n        target = context.newTarget || connection.target,\n        allowed,\n        replacement;\n    allowed = bpmnRules.canConnect(source, target);\n\n    if (!allowed || allowed.type === connection.type) {\n      return;\n    }\n\n    replacement = modeling.connect(source, target, {\n      type: allowed.type,\n      waypoints: connection.waypoints.slice()\n    }); // remove old connection\n\n    modeling.removeConnection(connection); // replace connection in context to reconnect end/start\n\n    context.connection = replacement;\n\n    if (dragging) {\n      cleanDraggingSelection(connection, replacement);\n    }\n  } // monkey-patch selection saved in dragging in order to re-select it when operation is finished\n\n\n  function cleanDraggingSelection(oldConnection, newConnection) {\n    var context = dragging.context(),\n        previousSelection = context && context.payload.previousSelection,\n        index; // do nothing if not dragging or no selection was present\n\n    if (!previousSelection || !previousSelection.length) {\n      return;\n    }\n\n    index = previousSelection.indexOf(oldConnection);\n\n    if (index === -1) {\n      return;\n    }\n\n    previousSelection.splice(index, 1, newConnection);\n  } // lifecycle hooks\n\n\n  this.postExecuted('elements.move', function (context) {\n    var closure = context.closure,\n        allConnections = closure.allConnections;\n    forEach(allConnections, fixConnection);\n  }, true);\n  this.preExecute('connection.reconnect', replaceReconnectedConnection);\n  this.postExecuted('element.updateProperties', function (event) {\n    var context = event.context,\n        properties = context.properties,\n        element = context.element,\n        businessObject = element.businessObject,\n        connection; // remove condition on change to default\n\n    if (properties.default) {\n      connection = find(element.outgoing, matchPattern({\n        id: element.businessObject.default.id\n      }));\n\n      if (connection) {\n        modeling.updateProperties(connection, {\n          conditionExpression: undefined\n        });\n      }\n    } // remove default from source on change to conditional\n\n\n    if (properties.conditionExpression && businessObject.sourceRef.default === businessObject) {\n      modeling.updateProperties(element.source, {\n        default: undefined\n      });\n    }\n  });\n}\ninherits(ReplaceConnectionBehavior, CommandInterceptor);\nReplaceConnectionBehavior.$inject = ['eventBus', 'modeling', 'bpmnRules', 'injector'];","map":{"version":3,"names":["forEach","find","matchPattern","inherits","CommandInterceptor","is","ReplaceConnectionBehavior","eventBus","modeling","bpmnRules","injector","call","dragging","get","fixConnection","connection","source","target","parent","replacementType","remove","canConnectSequenceFlow","canConnectMessageFlow","canConnectAssociation","removeConnection","connect","type","waypoints","slice","replaceReconnectedConnection","event","context","newSource","newTarget","allowed","replacement","canConnect","cleanDraggingSelection","oldConnection","newConnection","previousSelection","payload","index","length","indexOf","splice","postExecuted","closure","allConnections","preExecute","properties","element","businessObject","default","outgoing","id","updateProperties","conditionExpression","undefined","sourceRef","$inject"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/modeling/behavior/ReplaceConnectionBehavior.js"],"sourcesContent":["import {\n  forEach,\n  find,\n  matchPattern\n} from 'min-dash';\n\nimport inherits from 'inherits-browser';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { is } from '../../../util/ModelUtil';\n\n\nexport default function ReplaceConnectionBehavior(eventBus, modeling, bpmnRules, injector) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  var dragging = injector.get('dragging', false);\n\n  function fixConnection(connection) {\n\n    var source = connection.source,\n        target = connection.target,\n        parent = connection.parent;\n\n    // do not do anything if connection\n    // is already deleted (may happen due to other\n    // behaviors plugged-in before)\n    if (!parent) {\n      return;\n    }\n\n    var replacementType,\n        remove;\n\n    /**\n     * Check if incoming or outgoing connections\n     * can stay or could be substituted with an\n     * appropriate replacement.\n     *\n     * This holds true for SequenceFlow <> MessageFlow.\n     */\n\n    if (is(connection, 'bpmn:SequenceFlow')) {\n      if (!bpmnRules.canConnectSequenceFlow(source, target)) {\n        remove = true;\n      }\n\n      if (bpmnRules.canConnectMessageFlow(source, target)) {\n        replacementType = 'bpmn:MessageFlow';\n      }\n    }\n\n    // transform message flows into sequence flows, if possible\n\n    if (is(connection, 'bpmn:MessageFlow')) {\n\n      if (!bpmnRules.canConnectMessageFlow(source, target)) {\n        remove = true;\n      }\n\n      if (bpmnRules.canConnectSequenceFlow(source, target)) {\n        replacementType = 'bpmn:SequenceFlow';\n      }\n    }\n\n    if (is(connection, 'bpmn:Association') && !bpmnRules.canConnectAssociation(source, target)) {\n      remove = true;\n    }\n\n\n    // remove invalid connection,\n    // unless it has been removed already\n    if (remove) {\n      modeling.removeConnection(connection);\n    }\n\n    // replace SequenceFlow <> MessageFlow\n\n    if (replacementType) {\n      modeling.connect(source, target, {\n        type: replacementType,\n        waypoints: connection.waypoints.slice()\n      });\n    }\n  }\n\n  function replaceReconnectedConnection(event) {\n\n    var context = event.context,\n        connection = context.connection,\n        source = context.newSource || connection.source,\n        target = context.newTarget || connection.target,\n        allowed,\n        replacement;\n\n    allowed = bpmnRules.canConnect(source, target);\n\n    if (!allowed || allowed.type === connection.type) {\n      return;\n    }\n\n    replacement = modeling.connect(source, target, {\n      type: allowed.type,\n      waypoints: connection.waypoints.slice()\n    });\n\n    // remove old connection\n    modeling.removeConnection(connection);\n\n    // replace connection in context to reconnect end/start\n    context.connection = replacement;\n\n    if (dragging) {\n      cleanDraggingSelection(connection, replacement);\n    }\n  }\n\n  // monkey-patch selection saved in dragging in order to re-select it when operation is finished\n  function cleanDraggingSelection(oldConnection, newConnection) {\n    var context = dragging.context(),\n        previousSelection = context && context.payload.previousSelection,\n        index;\n\n    // do nothing if not dragging or no selection was present\n    if (!previousSelection || !previousSelection.length) {\n      return;\n    }\n\n    index = previousSelection.indexOf(oldConnection);\n\n    if (index === -1) {\n      return;\n    }\n\n    previousSelection.splice(index, 1, newConnection);\n  }\n\n  // lifecycle hooks\n\n  this.postExecuted('elements.move', function(context) {\n\n    var closure = context.closure,\n        allConnections = closure.allConnections;\n\n    forEach(allConnections, fixConnection);\n  }, true);\n\n  this.preExecute('connection.reconnect', replaceReconnectedConnection);\n\n  this.postExecuted('element.updateProperties', function(event) {\n    var context = event.context,\n        properties = context.properties,\n        element = context.element,\n        businessObject = element.businessObject,\n        connection;\n\n    // remove condition on change to default\n    if (properties.default) {\n      connection = find(\n        element.outgoing,\n        matchPattern({ id: element.businessObject.default.id })\n      );\n\n      if (connection) {\n        modeling.updateProperties(connection, { conditionExpression: undefined });\n      }\n    }\n\n    // remove default from source on change to conditional\n    if (properties.conditionExpression && businessObject.sourceRef.default === businessObject) {\n      modeling.updateProperties(element.source, { default: undefined });\n    }\n  });\n}\n\ninherits(ReplaceConnectionBehavior, CommandInterceptor);\n\nReplaceConnectionBehavior.$inject = [\n  'eventBus',\n  'modeling',\n  'bpmnRules',\n  'injector'\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}