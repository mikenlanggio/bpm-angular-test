{"ast":null,"code":"import { assign } from 'min-dash';\nimport { getElementLineIntersection } from './LayoutUtil';\n\nfunction dockingToPoint(docking) {\n  // use the dockings actual point and\n  // retain the original docking\n  return assign({\n    original: docking.point.original || docking.point\n  }, docking.actual);\n}\n/**\n * A {@link ConnectionDocking} that crops connection waypoints based on\n * the path(s) of the connection source and target.\n *\n * @param {djs.core.ElementRegistry} elementRegistry\n */\n\n\nexport default function CroppingConnectionDocking(elementRegistry, graphicsFactory) {\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n}\nCroppingConnectionDocking.$inject = ['elementRegistry', 'graphicsFactory'];\n/**\n * @inheritDoc ConnectionDocking#getCroppedWaypoints\n */\n\nCroppingConnectionDocking.prototype.getCroppedWaypoints = function (connection, source, target) {\n  source = source || connection.source;\n  target = target || connection.target;\n  var sourceDocking = this.getDockingPoint(connection, source, true),\n      targetDocking = this.getDockingPoint(connection, target);\n  var croppedWaypoints = connection.waypoints.slice(sourceDocking.idx + 1, targetDocking.idx);\n  croppedWaypoints.unshift(dockingToPoint(sourceDocking));\n  croppedWaypoints.push(dockingToPoint(targetDocking));\n  return croppedWaypoints;\n};\n/**\n * Return the connection docking point on the specified shape\n *\n * @inheritDoc ConnectionDocking#getDockingPoint\n */\n\n\nCroppingConnectionDocking.prototype.getDockingPoint = function (connection, shape, dockStart) {\n  var waypoints = connection.waypoints,\n      dockingIdx,\n      dockingPoint,\n      croppedPoint;\n  dockingIdx = dockStart ? 0 : waypoints.length - 1;\n  dockingPoint = waypoints[dockingIdx];\n  croppedPoint = this._getIntersection(shape, connection, dockStart);\n  return {\n    point: dockingPoint,\n    actual: croppedPoint || dockingPoint,\n    idx: dockingIdx\n  };\n}; // helpers //////////////////////\n\n\nCroppingConnectionDocking.prototype._getIntersection = function (shape, connection, takeFirst) {\n  var shapePath = this._getShapePath(shape),\n      connectionPath = this._getConnectionPath(connection);\n\n  return getElementLineIntersection(shapePath, connectionPath, takeFirst);\n};\n\nCroppingConnectionDocking.prototype._getConnectionPath = function (connection) {\n  return this._graphicsFactory.getConnectionPath(connection);\n};\n\nCroppingConnectionDocking.prototype._getShapePath = function (shape) {\n  return this._graphicsFactory.getShapePath(shape);\n};\n\nCroppingConnectionDocking.prototype._getGfx = function (element) {\n  return this._elementRegistry.getGraphics(element);\n};","map":{"version":3,"names":["assign","getElementLineIntersection","dockingToPoint","docking","original","point","actual","CroppingConnectionDocking","elementRegistry","graphicsFactory","_elementRegistry","_graphicsFactory","$inject","prototype","getCroppedWaypoints","connection","source","target","sourceDocking","getDockingPoint","targetDocking","croppedWaypoints","waypoints","slice","idx","unshift","push","shape","dockStart","dockingIdx","dockingPoint","croppedPoint","length","_getIntersection","takeFirst","shapePath","_getShapePath","connectionPath","_getConnectionPath","getConnectionPath","getShapePath","_getGfx","element","getGraphics"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/layout/CroppingConnectionDocking.js"],"sourcesContent":["import {\n  assign\n} from 'min-dash';\n\nimport {\n  getElementLineIntersection\n} from './LayoutUtil';\n\n\nfunction dockingToPoint(docking) {\n\n  // use the dockings actual point and\n  // retain the original docking\n  return assign({ original: docking.point.original || docking.point }, docking.actual);\n}\n\n\n/**\n * A {@link ConnectionDocking} that crops connection waypoints based on\n * the path(s) of the connection source and target.\n *\n * @param {djs.core.ElementRegistry} elementRegistry\n */\nexport default function CroppingConnectionDocking(elementRegistry, graphicsFactory) {\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n}\n\nCroppingConnectionDocking.$inject = [ 'elementRegistry', 'graphicsFactory' ];\n\n\n/**\n * @inheritDoc ConnectionDocking#getCroppedWaypoints\n */\nCroppingConnectionDocking.prototype.getCroppedWaypoints = function(connection, source, target) {\n\n  source = source || connection.source;\n  target = target || connection.target;\n\n  var sourceDocking = this.getDockingPoint(connection, source, true),\n      targetDocking = this.getDockingPoint(connection, target);\n\n  var croppedWaypoints = connection.waypoints.slice(sourceDocking.idx + 1, targetDocking.idx);\n\n  croppedWaypoints.unshift(dockingToPoint(sourceDocking));\n  croppedWaypoints.push(dockingToPoint(targetDocking));\n\n  return croppedWaypoints;\n};\n\n/**\n * Return the connection docking point on the specified shape\n *\n * @inheritDoc ConnectionDocking#getDockingPoint\n */\nCroppingConnectionDocking.prototype.getDockingPoint = function(connection, shape, dockStart) {\n\n  var waypoints = connection.waypoints,\n      dockingIdx,\n      dockingPoint,\n      croppedPoint;\n\n  dockingIdx = dockStart ? 0 : waypoints.length - 1;\n  dockingPoint = waypoints[dockingIdx];\n\n  croppedPoint = this._getIntersection(shape, connection, dockStart);\n\n  return {\n    point: dockingPoint,\n    actual: croppedPoint || dockingPoint,\n    idx: dockingIdx\n  };\n};\n\n\n// helpers //////////////////////\n\nCroppingConnectionDocking.prototype._getIntersection = function(shape, connection, takeFirst) {\n\n  var shapePath = this._getShapePath(shape),\n      connectionPath = this._getConnectionPath(connection);\n\n  return getElementLineIntersection(shapePath, connectionPath, takeFirst);\n};\n\nCroppingConnectionDocking.prototype._getConnectionPath = function(connection) {\n  return this._graphicsFactory.getConnectionPath(connection);\n};\n\nCroppingConnectionDocking.prototype._getShapePath = function(shape) {\n  return this._graphicsFactory.getShapePath(shape);\n};\n\nCroppingConnectionDocking.prototype._getGfx = function(element) {\n  return this._elementRegistry.getGraphics(element);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}