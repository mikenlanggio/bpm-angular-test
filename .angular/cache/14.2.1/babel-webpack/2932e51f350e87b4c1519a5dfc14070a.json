{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { closest as domClosest } from 'min-dom';\nvar LOW_PRIORITY = 250;\n/**\n * The tool manager acts as middle-man between the available tool's and the Palette,\n * it takes care of making sure that the correct active state is set.\n *\n * @param  {Object}    eventBus\n * @param  {Object}    dragging\n */\n\nexport default function ToolManager(eventBus, dragging) {\n  this._eventBus = eventBus;\n  this._dragging = dragging;\n  this._tools = [];\n  this._active = null;\n}\nToolManager.$inject = ['eventBus', 'dragging'];\n\nToolManager.prototype.registerTool = function (name, events) {\n  var tools = this._tools;\n\n  if (!events) {\n    throw new Error('A tool has to be registered with it\\'s \"events\"');\n  }\n\n  tools.push(name);\n  this.bindEvents(name, events);\n};\n\nToolManager.prototype.isActive = function (tool) {\n  return tool && this._active === tool;\n};\n\nToolManager.prototype.length = function (tool) {\n  return this._tools.length;\n};\n\nToolManager.prototype.setActive = function (tool) {\n  var eventBus = this._eventBus;\n\n  if (this._active !== tool) {\n    this._active = tool;\n    eventBus.fire('tool-manager.update', {\n      tool: tool\n    });\n  }\n};\n\nToolManager.prototype.bindEvents = function (name, events) {\n  var eventBus = this._eventBus,\n      dragging = this._dragging;\n  var eventsToRegister = [];\n  eventBus.on(events.tool + '.init', function (event) {\n    var context = event.context; // Active tools that want to reactivate themselves must do this explicitly\n\n    if (!context.reactivate && this.isActive(name)) {\n      this.setActive(null);\n      dragging.cancel();\n      return;\n    }\n\n    this.setActive(name);\n  }, this); // Todo[ricardo]: add test cases\n\n  forEach(events, function (event) {\n    eventsToRegister.push(event + '.ended');\n    eventsToRegister.push(event + '.canceled');\n  });\n  eventBus.on(eventsToRegister, LOW_PRIORITY, function (event) {\n    // We defer the de-activation of the tool to the .activate phase,\n    // so we're able to check if we want to toggle off the current\n    // active tool or switch to a new one\n    if (!this._active) {\n      return;\n    }\n\n    if (isPaletteClick(event)) {\n      return;\n    }\n\n    this.setActive(null);\n  }, this);\n}; // helpers ///////////////\n\n/**\n * Check if a given event is a palette click event.\n *\n * @param {EventBus.Event} event\n *\n * @return {boolean}\n */\n\n\nfunction isPaletteClick(event) {\n  var target = event.originalEvent && event.originalEvent.target;\n  return target && domClosest(target, '.group[data-group=\"tools\"]');\n}","map":{"version":3,"names":["forEach","closest","domClosest","LOW_PRIORITY","ToolManager","eventBus","dragging","_eventBus","_dragging","_tools","_active","$inject","prototype","registerTool","name","events","tools","Error","push","bindEvents","isActive","tool","length","setActive","fire","eventsToRegister","on","event","context","reactivate","cancel","isPaletteClick","target","originalEvent"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/tool-manager/ToolManager.js"],"sourcesContent":["import {\n  forEach\n} from 'min-dash';\n\nimport {\n  closest as domClosest\n} from 'min-dom';\n\nvar LOW_PRIORITY = 250;\n\n/**\n * The tool manager acts as middle-man between the available tool's and the Palette,\n * it takes care of making sure that the correct active state is set.\n *\n * @param  {Object}    eventBus\n * @param  {Object}    dragging\n */\nexport default function ToolManager(eventBus, dragging) {\n  this._eventBus = eventBus;\n  this._dragging = dragging;\n\n  this._tools = [];\n  this._active = null;\n}\n\nToolManager.$inject = [ 'eventBus', 'dragging' ];\n\nToolManager.prototype.registerTool = function(name, events) {\n  var tools = this._tools;\n\n  if (!events) {\n    throw new Error('A tool has to be registered with it\\'s \"events\"');\n  }\n\n  tools.push(name);\n\n  this.bindEvents(name, events);\n};\n\nToolManager.prototype.isActive = function(tool) {\n  return tool && this._active === tool;\n};\n\nToolManager.prototype.length = function(tool) {\n  return this._tools.length;\n};\n\nToolManager.prototype.setActive = function(tool) {\n  var eventBus = this._eventBus;\n\n  if (this._active !== tool) {\n    this._active = tool;\n\n    eventBus.fire('tool-manager.update', { tool: tool });\n  }\n};\n\nToolManager.prototype.bindEvents = function(name, events) {\n  var eventBus = this._eventBus,\n      dragging = this._dragging;\n\n  var eventsToRegister = [];\n\n  eventBus.on(events.tool + '.init', function(event) {\n    var context = event.context;\n\n    // Active tools that want to reactivate themselves must do this explicitly\n    if (!context.reactivate && this.isActive(name)) {\n      this.setActive(null);\n\n      dragging.cancel();\n      return;\n    }\n\n    this.setActive(name);\n\n  }, this);\n\n  // Todo[ricardo]: add test cases\n  forEach(events, function(event) {\n    eventsToRegister.push(event + '.ended');\n    eventsToRegister.push(event + '.canceled');\n  });\n\n  eventBus.on(eventsToRegister, LOW_PRIORITY, function(event) {\n\n    // We defer the de-activation of the tool to the .activate phase,\n    // so we're able to check if we want to toggle off the current\n    // active tool or switch to a new one\n    if (!this._active) {\n      return;\n    }\n\n    if (isPaletteClick(event)) {\n      return;\n    }\n\n    this.setActive(null);\n  }, this);\n\n};\n\n\n// helpers ///////////////\n\n/**\n * Check if a given event is a palette click event.\n *\n * @param {EventBus.Event} event\n *\n * @return {boolean}\n */\nfunction isPaletteClick(event) {\n  var target = event.originalEvent && event.originalEvent.target;\n\n  return target && domClosest(target, '.group[data-group=\"tools\"]');\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}