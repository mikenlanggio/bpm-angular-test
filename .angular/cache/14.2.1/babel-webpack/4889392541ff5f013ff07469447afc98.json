{"ast":null,"code":"import { asTRBL, getOrientation, roundPoint } from '../layout/LayoutUtil';\nimport { center, delta } from './PositionUtil';\n/**\n * Calculates the absolute point relative to the new element's position\n *\n * @param {point} point [absolute]\n * @param {bounds} oldBounds\n * @param {bounds} newBounds\n *\n * @return {point} point [absolute]\n */\n\nexport function getNewAttachPoint(point, oldBounds, newBounds) {\n  var oldCenter = center(oldBounds),\n      newCenter = center(newBounds),\n      oldDelta = delta(point, oldCenter);\n  var newDelta = {\n    x: oldDelta.x * (newBounds.width / oldBounds.width),\n    y: oldDelta.y * (newBounds.height / oldBounds.height)\n  };\n  return roundPoint({\n    x: newCenter.x + newDelta.x,\n    y: newCenter.y + newDelta.y\n  });\n}\n/**\n * Calculates the shape's delta relative to a new position\n * of a certain element's bounds\n *\n * @param {djs.model.Shape} point [absolute]\n * @param {bounds} oldBounds\n * @param {bounds} newBounds\n *\n * @return {delta} delta\n */\n\nexport function getNewAttachShapeDelta(shape, oldBounds, newBounds) {\n  var shapeCenter = center(shape),\n      oldCenter = center(oldBounds),\n      newCenter = center(newBounds),\n      shapeDelta = delta(shape, shapeCenter),\n      oldCenterDelta = delta(shapeCenter, oldCenter),\n      stickyPositionDelta = getStickyPositionDelta(shapeCenter, oldBounds, newBounds);\n\n  if (stickyPositionDelta) {\n    return stickyPositionDelta;\n  }\n\n  var newCenterDelta = {\n    x: oldCenterDelta.x * (newBounds.width / oldBounds.width),\n    y: oldCenterDelta.y * (newBounds.height / oldBounds.height)\n  };\n  var newShapeCenter = {\n    x: newCenter.x + newCenterDelta.x,\n    y: newCenter.y + newCenterDelta.y\n  };\n  return roundPoint({\n    x: newShapeCenter.x + shapeDelta.x - shape.x,\n    y: newShapeCenter.y + shapeDelta.y - shape.y\n  });\n}\n\nfunction getStickyPositionDelta(oldShapeCenter, oldBounds, newBounds) {\n  var oldTRBL = asTRBL(oldBounds),\n      newTRBL = asTRBL(newBounds);\n\n  if (isMoved(oldTRBL, newTRBL)) {\n    return null;\n  }\n\n  var oldOrientation = getOrientation(oldBounds, oldShapeCenter),\n      stickyPositionDelta,\n      newShapeCenter,\n      newOrientation;\n\n  if (oldOrientation === 'top') {\n    stickyPositionDelta = {\n      x: 0,\n      y: newTRBL.bottom - oldTRBL.bottom\n    };\n  } else if (oldOrientation === 'bottom') {\n    stickyPositionDelta = {\n      x: 0,\n      y: newTRBL.top - oldTRBL.top\n    };\n  } else if (oldOrientation === 'right') {\n    stickyPositionDelta = {\n      x: newTRBL.left - oldTRBL.left,\n      y: 0\n    };\n  } else if (oldOrientation === 'left') {\n    stickyPositionDelta = {\n      x: newTRBL.right - oldTRBL.right,\n      y: 0\n    };\n  } else {\n    // fallback to proportional movement for corner-placed attachments\n    return null;\n  }\n\n  newShapeCenter = {\n    x: oldShapeCenter.x + stickyPositionDelta.x,\n    y: oldShapeCenter.y + stickyPositionDelta.y\n  };\n  newOrientation = getOrientation(newBounds, newShapeCenter);\n\n  if (newOrientation !== oldOrientation) {\n    // fallback to proportional movement if orientation would otherwise change\n    return null;\n  }\n\n  return stickyPositionDelta;\n}\n\nfunction isMoved(oldTRBL, newTRBL) {\n  return isHorizontallyMoved(oldTRBL, newTRBL) || isVerticallyMoved(oldTRBL, newTRBL);\n}\n\nfunction isHorizontallyMoved(oldTRBL, newTRBL) {\n  return oldTRBL.right !== newTRBL.right && oldTRBL.left !== newTRBL.left;\n}\n\nfunction isVerticallyMoved(oldTRBL, newTRBL) {\n  return oldTRBL.top !== newTRBL.top && oldTRBL.bottom !== newTRBL.bottom;\n}","map":{"version":3,"names":["asTRBL","getOrientation","roundPoint","center","delta","getNewAttachPoint","point","oldBounds","newBounds","oldCenter","newCenter","oldDelta","newDelta","x","width","y","height","getNewAttachShapeDelta","shape","shapeCenter","shapeDelta","oldCenterDelta","stickyPositionDelta","getStickyPositionDelta","newCenterDelta","newShapeCenter","oldShapeCenter","oldTRBL","newTRBL","isMoved","oldOrientation","newOrientation","bottom","top","left","right","isHorizontallyMoved","isVerticallyMoved"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/util/AttachUtil.js"],"sourcesContent":["import {\n  asTRBL,\n  getOrientation,\n  roundPoint\n} from '../layout/LayoutUtil';\n\nimport {\n  center,\n  delta\n} from './PositionUtil';\n\n\n/**\n * Calculates the absolute point relative to the new element's position\n *\n * @param {point} point [absolute]\n * @param {bounds} oldBounds\n * @param {bounds} newBounds\n *\n * @return {point} point [absolute]\n */\nexport function getNewAttachPoint(point, oldBounds, newBounds) {\n  var oldCenter = center(oldBounds),\n      newCenter = center(newBounds),\n      oldDelta = delta(point, oldCenter);\n\n  var newDelta = {\n    x: oldDelta.x * (newBounds.width / oldBounds.width),\n    y: oldDelta.y * (newBounds.height / oldBounds.height)\n  };\n\n  return roundPoint({\n    x: newCenter.x + newDelta.x,\n    y: newCenter.y + newDelta.y\n  });\n}\n\n\n/**\n * Calculates the shape's delta relative to a new position\n * of a certain element's bounds\n *\n * @param {djs.model.Shape} point [absolute]\n * @param {bounds} oldBounds\n * @param {bounds} newBounds\n *\n * @return {delta} delta\n */\nexport function getNewAttachShapeDelta(shape, oldBounds, newBounds) {\n  var shapeCenter = center(shape),\n      oldCenter = center(oldBounds),\n      newCenter = center(newBounds),\n      shapeDelta = delta(shape, shapeCenter),\n      oldCenterDelta = delta(shapeCenter, oldCenter),\n      stickyPositionDelta = getStickyPositionDelta(shapeCenter, oldBounds, newBounds);\n\n  if (stickyPositionDelta) {\n    return stickyPositionDelta;\n  }\n\n  var newCenterDelta = {\n    x: oldCenterDelta.x * (newBounds.width / oldBounds.width),\n    y: oldCenterDelta.y * (newBounds.height / oldBounds.height)\n  };\n\n  var newShapeCenter = {\n    x: newCenter.x + newCenterDelta.x,\n    y: newCenter.y + newCenterDelta.y\n  };\n\n  return roundPoint({\n    x: newShapeCenter.x + shapeDelta.x - shape.x,\n    y: newShapeCenter.y + shapeDelta.y - shape.y\n  });\n}\n\nfunction getStickyPositionDelta(oldShapeCenter, oldBounds, newBounds) {\n  var oldTRBL = asTRBL(oldBounds),\n      newTRBL = asTRBL(newBounds);\n\n  if (isMoved(oldTRBL, newTRBL)) {\n    return null;\n  }\n\n  var oldOrientation = getOrientation(oldBounds, oldShapeCenter),\n      stickyPositionDelta,\n      newShapeCenter,\n      newOrientation;\n\n  if (oldOrientation === 'top') {\n    stickyPositionDelta = {\n      x: 0,\n      y: newTRBL.bottom - oldTRBL.bottom\n    };\n  } else if (oldOrientation === 'bottom') {\n    stickyPositionDelta = {\n      x: 0,\n      y: newTRBL.top - oldTRBL.top\n    };\n  } else if (oldOrientation === 'right') {\n    stickyPositionDelta = {\n      x: newTRBL.left - oldTRBL.left,\n      y: 0\n    };\n  } else if (oldOrientation === 'left') {\n    stickyPositionDelta = {\n      x: newTRBL.right - oldTRBL.right,\n      y: 0\n    };\n  } else {\n\n    // fallback to proportional movement for corner-placed attachments\n    return null;\n  }\n\n  newShapeCenter = {\n    x: oldShapeCenter.x + stickyPositionDelta.x,\n    y: oldShapeCenter.y + stickyPositionDelta.y\n  };\n\n  newOrientation = getOrientation(newBounds, newShapeCenter);\n\n  if (newOrientation !== oldOrientation) {\n\n    // fallback to proportional movement if orientation would otherwise change\n    return null;\n  }\n\n  return stickyPositionDelta;\n}\n\nfunction isMoved(oldTRBL, newTRBL) {\n  return isHorizontallyMoved(oldTRBL, newTRBL) || isVerticallyMoved(oldTRBL, newTRBL);\n}\n\nfunction isHorizontallyMoved(oldTRBL, newTRBL) {\n  return oldTRBL.right !== newTRBL.right && oldTRBL.left !== newTRBL.left;\n}\n\nfunction isVerticallyMoved(oldTRBL, newTRBL) {\n  return oldTRBL.top !== newTRBL.top && oldTRBL.bottom !== newTRBL.bottom;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}