{"ast":null,"code":"import inherits from 'inherits-browser';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { find } from 'min-dash';\nimport { isExpanded } from '../../../util/DiUtil';\nimport { getBusinessObject, getDi, is } from '../../../util/ModelUtil';\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport { getBBox } from 'diagram-js/lib/util/Elements';\nimport { getPlaneIdFromShape, getShapeIdFromPlane, isPlane, toPlaneId } from '../../../util/DrilldownUtil';\nvar LOW_PRIORITY = 400;\nvar HIGH_PRIORITY = 600;\nvar DEFAULT_POSITION = {\n  x: 180,\n  y: 160\n};\n/**\n * Creates bpmndi:BPMNPlane elements and canvas planes when collapsed subprocesses are created.\n *\n *\n * @param {Canvas} canvas\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n * @param {ElementFactory} elementFactory\n * @param {BpmnFactory} bpmnFactory\n * @param {Bpmnjs} bpmnjs\n * @param {ElementRegistry} elementRegistry\n */\n\nexport default function SubProcessPlaneBehavior(canvas, eventBus, modeling, elementFactory, bpmnFactory, bpmnjs, elementRegistry) {\n  CommandInterceptor.call(this, eventBus);\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._modeling = modeling;\n  this._elementFactory = elementFactory;\n  this._bpmnFactory = bpmnFactory;\n  this._bpmnjs = bpmnjs;\n  this._elementRegistry = elementRegistry;\n  var self = this;\n\n  function isCollapsedSubProcess(element) {\n    return is(element, 'bpmn:SubProcess') && !isExpanded(element);\n  }\n\n  function createRoot(context) {\n    var shape = context.shape,\n        rootElement = context.newRootElement;\n    var businessObject = getBusinessObject(shape);\n    rootElement = self._addDiagram(rootElement || businessObject);\n    context.newRootElement = canvas.addRootElement(rootElement);\n  }\n\n  function removeRoot(context) {\n    var shape = context.shape;\n    var businessObject = getBusinessObject(shape);\n\n    self._removeDiagram(businessObject);\n\n    var rootElement = context.newRootElement = elementRegistry.get(getPlaneIdFromShape(businessObject));\n    canvas.removeRootElement(rootElement);\n  } // add plane elements for newly created sub-processes\n  // this ensures we can actually drill down into the element\n\n\n  this.executed('shape.create', function (context) {\n    var shape = context.shape;\n\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    createRoot(context);\n  }, true);\n  this.postExecuted('shape.create', function (context) {\n    var shape = context.shape,\n        rootElement = context.newRootElement;\n\n    if (!rootElement || !shape.children) {\n      return;\n    }\n\n    self._showRecursively(shape.children);\n\n    self._moveChildrenToShape(shape, rootElement);\n  }, true);\n  this.reverted('shape.create', function (context) {\n    var shape = context.shape;\n\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    removeRoot(context);\n  }, true);\n  this.preExecuted('shape.delete', function (context) {\n    var shape = context.shape;\n\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    var attachedRoot = elementRegistry.get(getPlaneIdFromShape(shape));\n\n    if (!attachedRoot) {\n      return;\n    }\n\n    modeling.removeElements(attachedRoot.children.slice());\n  }, true);\n  this.executed('shape.delete', function (context) {\n    var shape = context.shape;\n\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    removeRoot(context);\n  }, true);\n  this.reverted('shape.delete', function (context) {\n    var shape = context.shape;\n\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    createRoot(context);\n  }, true);\n  this.preExecuted('shape.replace', function (context) {\n    var oldShape = context.oldShape;\n    var newShape = context.newShape;\n\n    if (!isCollapsedSubProcess(oldShape) || !isCollapsedSubProcess(newShape)) {\n      return;\n    } // old plane could have content,\n    // we remove it so it is not recursively deleted from 'shape.delete'\n\n\n    context.oldRoot = canvas.removeRootElement(getPlaneIdFromShape(oldShape));\n  }, true);\n  this.postExecuted('shape.replace', function (context) {\n    var newShape = context.newShape,\n        source = context.oldRoot,\n        target = canvas.findRoot(getPlaneIdFromShape(newShape));\n\n    if (!source || !target) {\n      return;\n    }\n\n    var elements = source.children;\n    modeling.moveElements(elements, {\n      x: 0,\n      y: 0\n    }, target);\n  }, true); // rename primary elements when the secondary element changes\n  // this ensures rootElement.id = element.id + '_plane'\n\n  this.executed('element.updateProperties', function (context) {\n    var shape = context.element;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    var properties = context.properties;\n    var oldProperties = context.oldProperties;\n    var oldId = oldProperties.id,\n        newId = properties.id;\n\n    if (oldId === newId) {\n      return;\n    }\n\n    if (isPlane(shape)) {\n      elementRegistry.updateId(shape, toPlaneId(newId));\n      elementRegistry.updateId(oldId, newId);\n      return;\n    }\n\n    var planeElement = elementRegistry.get(toPlaneId(oldId));\n\n    if (!planeElement) {\n      return;\n    }\n\n    elementRegistry.updateId(toPlaneId(oldId), toPlaneId(newId));\n  }, true);\n  this.reverted('element.updateProperties', function (context) {\n    var shape = context.element;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    var properties = context.properties;\n    var oldProperties = context.oldProperties;\n    var oldId = oldProperties.id,\n        newId = properties.id;\n\n    if (oldId === newId) {\n      return;\n    }\n\n    if (isPlane(shape)) {\n      elementRegistry.updateId(shape, toPlaneId(oldId));\n      elementRegistry.updateId(newId, oldId);\n      return;\n    }\n\n    var planeElement = elementRegistry.get(toPlaneId(newId));\n\n    if (!planeElement) {\n      return;\n    }\n\n    elementRegistry.updateId(planeElement, toPlaneId(oldId));\n  }, true); // re-throw element.changed to re-render primary shape if associated plane has\n  // changed (e.g. bpmn:name property has changed)\n\n  eventBus.on('element.changed', function (context) {\n    var element = context.element;\n\n    if (!isPlane(element)) {\n      return;\n    }\n\n    var plane = element;\n    var primaryShape = elementRegistry.get(getShapeIdFromPlane(plane)); // do not re-throw if no associated primary shape (e.g. bpmn:Process)\n\n    if (!primaryShape || primaryShape === plane) {\n      return;\n    }\n\n    eventBus.fire('element.changed', {\n      element: primaryShape\n    });\n  }); // create/remove plane for the subprocess\n\n  this.executed('shape.toggleCollapse', LOW_PRIORITY, function (context) {\n    var shape = context.shape;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    if (!isExpanded(shape)) {\n      createRoot(context);\n\n      self._showRecursively(shape.children);\n    } else {\n      removeRoot(context);\n    }\n  }, true); // create/remove plane for the subprocess\n\n  this.reverted('shape.toggleCollapse', LOW_PRIORITY, function (context) {\n    var shape = context.shape;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    if (!isExpanded(shape)) {\n      createRoot(context);\n\n      self._showRecursively(shape.children);\n    } else {\n      removeRoot(context);\n    }\n  }, true); // move elements between planes\n\n  this.postExecuted('shape.toggleCollapse', HIGH_PRIORITY, function (context) {\n    var shape = context.shape;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    var rootElement = context.newRootElement;\n\n    if (!rootElement) {\n      return;\n    }\n\n    if (!isExpanded(shape)) {\n      // collapsed\n      self._moveChildrenToShape(shape, rootElement);\n    } else {\n      self._moveChildrenToShape(rootElement, shape);\n    }\n  }, true); // copy-paste ///////////\n  // add elements in plane to tree\n\n  eventBus.on('copyPaste.createTree', function (context) {\n    var element = context.element,\n        children = context.children;\n\n    if (!isCollapsedSubProcess(element)) {\n      return;\n    }\n\n    var id = getPlaneIdFromShape(element);\n    var parent = elementRegistry.get(id);\n\n    if (parent) {\n      // do not copy invisible root element\n      children.push.apply(children, parent.children);\n    }\n  }); // set plane children as direct children of collapsed shape\n\n  eventBus.on('copyPaste.copyElement', function (context) {\n    var descriptor = context.descriptor,\n        element = context.element,\n        elements = context.elements;\n    var parent = element.parent;\n    var isPlane = is(getDi(parent), 'bpmndi:BPMNPlane');\n\n    if (!isPlane) {\n      return;\n    }\n\n    var parentId = getShapeIdFromPlane(parent);\n    var referencedShape = find(elements, function (element) {\n      return element.id === parentId;\n    });\n\n    if (!referencedShape) {\n      return;\n    }\n\n    descriptor.parent = referencedShape.id;\n  }); // hide children during pasting\n\n  eventBus.on('copyPaste.pasteElement', function (context) {\n    var descriptor = context.descriptor;\n\n    if (!descriptor.parent) {\n      return;\n    }\n\n    if (isCollapsedSubProcess(descriptor.parent) || descriptor.parent.hidden) {\n      descriptor.hidden = true;\n    }\n  });\n}\ninherits(SubProcessPlaneBehavior, CommandInterceptor);\n/**\n * Moves the child elements from source to target.\n *\n * If the target is a plane, the children are moved to the top left corner.\n * Otherwise, the center of the target is used.\n *\n * @param {Object|djs.model.Base} source\n * @param {Object|djs.model.Base} target\n */\n\nSubProcessPlaneBehavior.prototype._moveChildrenToShape = function (source, target) {\n  var modeling = this._modeling;\n  var children = source.children;\n  var offset;\n\n  if (!children) {\n    return;\n  } // add external labels that weren't children of sub process\n\n\n  children = children.concat(children.reduce(function (labels, child) {\n    if (child.label && child.label.parent !== source) {\n      return labels.concat(child.label);\n    }\n\n    return labels;\n  }, [])); // only change plane if there are no visible children, but don't move them\n\n  var visibleChildren = children.filter(function (child) {\n    return !child.hidden;\n  });\n\n  if (!visibleChildren.length) {\n    modeling.moveElements(children, {\n      x: 0,\n      y: 0\n    }, target, {\n      autoResize: false\n    });\n    return;\n  }\n\n  var childrenBounds = getBBox(visibleChildren); // target is a plane\n\n  if (!target.x) {\n    offset = {\n      x: DEFAULT_POSITION.x - childrenBounds.x,\n      y: DEFAULT_POSITION.y - childrenBounds.y\n    };\n  } // source is a plane\n  else {\n    // move relative to the center of the shape\n    var targetMid = getMid(target);\n    var childrenMid = getMid(childrenBounds);\n    offset = {\n      x: targetMid.x - childrenMid.x,\n      y: targetMid.y - childrenMid.y\n    };\n  }\n\n  modeling.moveElements(children, offset, target, {\n    autoResize: false\n  });\n};\n/**\n * Sets `hidden` property on all children of the given shape.\n *\n * @param {Array} elements\n * @param {Boolean} [hidden]\n * @returns {Array} all child elements\n */\n\n\nSubProcessPlaneBehavior.prototype._showRecursively = function (elements, hidden) {\n  var self = this;\n  var result = [];\n  elements.forEach(function (element) {\n    element.hidden = !!hidden;\n    result = result.concat(element);\n\n    if (element.children) {\n      result = result.concat(self._showRecursively(element.children, element.collapsed || hidden));\n    }\n  });\n  return result;\n};\n/**\n* Adds a given rootElement to the bpmnDi diagrams.\n*\n* @param {Object} rootElement\n* @returns {Object} planeElement\n*/\n\n\nSubProcessPlaneBehavior.prototype._addDiagram = function (planeElement) {\n  var bpmnjs = this._bpmnjs;\n  var diagrams = bpmnjs.getDefinitions().diagrams;\n\n  if (!planeElement.businessObject) {\n    planeElement = this._createNewDiagram(planeElement);\n  }\n\n  diagrams.push(planeElement.di.$parent);\n  return planeElement;\n};\n/**\n* Creates a new plane element for the given sub process.\n*\n* @param {Object} bpmnElement\n*\n* @return {Object} new diagram element\n*/\n\n\nSubProcessPlaneBehavior.prototype._createNewDiagram = function (bpmnElement) {\n  var bpmnFactory = this._bpmnFactory;\n  var elementFactory = this._elementFactory;\n  var diPlane = bpmnFactory.create('bpmndi:BPMNPlane', {\n    bpmnElement: bpmnElement\n  });\n  var diDiagram = bpmnFactory.create('bpmndi:BPMNDiagram', {\n    plane: diPlane\n  });\n  diPlane.$parent = diDiagram; // add a virtual element (not being drawn),\n  // a copy cat of our BpmnImporter code\n\n  var planeElement = elementFactory.createRoot({\n    id: getPlaneIdFromShape(bpmnElement),\n    type: bpmnElement.$type,\n    di: diPlane,\n    businessObject: bpmnElement,\n    collapsed: true\n  });\n  return planeElement;\n};\n/**\n * Removes the diagram for a given root element\n *\n * @param {Object} rootElement\n * @returns {Object} removed bpmndi:BPMNDiagram\n */\n\n\nSubProcessPlaneBehavior.prototype._removeDiagram = function (rootElement) {\n  var bpmnjs = this._bpmnjs;\n  var diagrams = bpmnjs.getDefinitions().diagrams;\n  var removedDiagram = find(diagrams, function (diagram) {\n    return diagram.plane.bpmnElement.id === rootElement.id;\n  });\n  diagrams.splice(diagrams.indexOf(removedDiagram), 1);\n  return removedDiagram;\n};\n\nSubProcessPlaneBehavior.$inject = ['canvas', 'eventBus', 'modeling', 'elementFactory', 'bpmnFactory', 'bpmnjs', 'elementRegistry'];","map":{"version":3,"names":["inherits","CommandInterceptor","find","isExpanded","getBusinessObject","getDi","is","getMid","getBBox","getPlaneIdFromShape","getShapeIdFromPlane","isPlane","toPlaneId","LOW_PRIORITY","HIGH_PRIORITY","DEFAULT_POSITION","x","y","SubProcessPlaneBehavior","canvas","eventBus","modeling","elementFactory","bpmnFactory","bpmnjs","elementRegistry","call","_canvas","_eventBus","_modeling","_elementFactory","_bpmnFactory","_bpmnjs","_elementRegistry","self","isCollapsedSubProcess","element","createRoot","context","shape","rootElement","newRootElement","businessObject","_addDiagram","addRootElement","removeRoot","_removeDiagram","get","removeRootElement","executed","postExecuted","children","_showRecursively","_moveChildrenToShape","reverted","preExecuted","attachedRoot","removeElements","slice","oldShape","newShape","oldRoot","source","target","findRoot","elements","moveElements","properties","oldProperties","oldId","id","newId","updateId","planeElement","on","plane","primaryShape","fire","parent","push","apply","descriptor","parentId","referencedShape","hidden","prototype","offset","concat","reduce","labels","child","label","visibleChildren","filter","length","autoResize","childrenBounds","targetMid","childrenMid","result","forEach","collapsed","diagrams","getDefinitions","_createNewDiagram","di","$parent","bpmnElement","diPlane","create","diDiagram","type","$type","removedDiagram","diagram","splice","indexOf","$inject"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/modeling/behavior/SubProcessPlaneBehavior.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { find } from 'min-dash';\nimport { isExpanded } from '../../../util/DiUtil';\nimport { getBusinessObject, getDi, is } from '../../../util/ModelUtil';\nimport { getMid } from 'diagram-js/lib/layout/LayoutUtil';\nimport { getBBox } from 'diagram-js/lib/util/Elements';\nimport {\n  getPlaneIdFromShape,\n  getShapeIdFromPlane,\n  isPlane,\n  toPlaneId\n} from '../../../util/DrilldownUtil';\n\n\nvar LOW_PRIORITY = 400;\nvar HIGH_PRIORITY = 600;\n\nvar DEFAULT_POSITION = {\n  x: 180,\n  y: 160\n};\n\n\n/**\n * Creates bpmndi:BPMNPlane elements and canvas planes when collapsed subprocesses are created.\n *\n *\n * @param {Canvas} canvas\n * @param {EventBus} eventBus\n * @param {Modeling} modeling\n * @param {ElementFactory} elementFactory\n * @param {BpmnFactory} bpmnFactory\n * @param {Bpmnjs} bpmnjs\n * @param {ElementRegistry} elementRegistry\n */\nexport default function SubProcessPlaneBehavior(\n    canvas, eventBus, modeling,\n    elementFactory, bpmnFactory, bpmnjs, elementRegistry) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  this._canvas = canvas;\n  this._eventBus = eventBus;\n  this._modeling = modeling;\n  this._elementFactory = elementFactory;\n  this._bpmnFactory = bpmnFactory;\n  this._bpmnjs = bpmnjs;\n  this._elementRegistry = elementRegistry;\n\n  var self = this;\n\n  function isCollapsedSubProcess(element) {\n    return is(element, 'bpmn:SubProcess') && !isExpanded(element);\n  }\n\n  function createRoot(context) {\n    var shape = context.shape,\n        rootElement = context.newRootElement;\n\n    var businessObject = getBusinessObject(shape);\n\n    rootElement = self._addDiagram(rootElement || businessObject);\n\n    context.newRootElement = canvas.addRootElement(rootElement);\n  }\n\n  function removeRoot(context) {\n    var shape = context.shape;\n\n    var businessObject = getBusinessObject(shape);\n    self._removeDiagram(businessObject);\n\n    var rootElement = context.newRootElement = elementRegistry.get(getPlaneIdFromShape(businessObject));\n\n    canvas.removeRootElement(rootElement);\n  }\n\n  // add plane elements for newly created sub-processes\n  // this ensures we can actually drill down into the element\n  this.executed('shape.create', function(context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    createRoot(context);\n  }, true);\n\n\n  this.postExecuted('shape.create', function(context) {\n    var shape = context.shape,\n        rootElement = context.newRootElement;\n\n    if (!rootElement || !shape.children) {\n      return;\n    }\n\n    self._showRecursively(shape.children);\n\n    self._moveChildrenToShape(shape, rootElement);\n  }, true);\n\n\n  this.reverted('shape.create', function(context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    removeRoot(context);\n  }, true);\n\n\n  this.preExecuted('shape.delete', function(context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    var attachedRoot = elementRegistry.get(getPlaneIdFromShape(shape));\n\n    if (!attachedRoot) {\n      return;\n    }\n\n    modeling.removeElements(attachedRoot.children.slice());\n  }, true);\n\n\n  this.executed('shape.delete', function(context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n    removeRoot(context);\n  }, true);\n\n\n  this.reverted('shape.delete', function(context) {\n    var shape = context.shape;\n    if (!isCollapsedSubProcess(shape)) {\n      return;\n    }\n\n    createRoot(context);\n  }, true);\n\n\n  this.preExecuted('shape.replace', function(context) {\n    var oldShape = context.oldShape;\n    var newShape = context.newShape;\n\n    if (!isCollapsedSubProcess(oldShape) || !isCollapsedSubProcess(newShape)) {\n      return;\n    }\n\n    // old plane could have content,\n    // we remove it so it is not recursively deleted from 'shape.delete'\n    context.oldRoot = canvas.removeRootElement(getPlaneIdFromShape(oldShape));\n  }, true);\n\n\n  this.postExecuted('shape.replace', function(context) {\n    var newShape = context.newShape,\n        source = context.oldRoot,\n        target = canvas.findRoot(getPlaneIdFromShape(newShape));\n\n    if (!source || !target) {\n      return;\n    }\n    var elements = source.children;\n\n    modeling.moveElements(elements, { x: 0, y: 0 }, target);\n  }, true);\n\n\n  // rename primary elements when the secondary element changes\n  // this ensures rootElement.id = element.id + '_plane'\n  this.executed('element.updateProperties', function(context) {\n    var shape = context.element;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    var properties = context.properties;\n    var oldProperties = context.oldProperties;\n\n    var oldId = oldProperties.id,\n        newId = properties.id;\n\n    if (oldId === newId) {\n      return;\n    }\n\n    if (isPlane(shape)) {\n      elementRegistry.updateId(shape, toPlaneId(newId));\n      elementRegistry.updateId(oldId, newId);\n\n      return;\n    }\n\n    var planeElement = elementRegistry.get(toPlaneId(oldId));\n\n    if (!planeElement) {\n      return;\n    }\n\n    elementRegistry.updateId(toPlaneId(oldId), toPlaneId(newId));\n  }, true);\n\n\n  this.reverted('element.updateProperties', function(context) {\n    var shape = context.element;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    var properties = context.properties;\n    var oldProperties = context.oldProperties;\n\n    var oldId = oldProperties.id,\n        newId = properties.id;\n\n    if (oldId === newId) {\n      return;\n    }\n\n    if (isPlane(shape)) {\n      elementRegistry.updateId(shape, toPlaneId(oldId));\n      elementRegistry.updateId(newId, oldId);\n\n      return;\n    }\n\n    var planeElement = elementRegistry.get(toPlaneId(newId));\n\n    if (!planeElement) {\n      return;\n    }\n\n    elementRegistry.updateId(planeElement, toPlaneId(oldId));\n  }, true);\n\n  // re-throw element.changed to re-render primary shape if associated plane has\n  // changed (e.g. bpmn:name property has changed)\n  eventBus.on('element.changed', function(context) {\n    var element = context.element;\n\n    if (!isPlane(element)) {\n      return;\n    }\n\n    var plane = element;\n\n    var primaryShape = elementRegistry.get(getShapeIdFromPlane(plane));\n\n    // do not re-throw if no associated primary shape (e.g. bpmn:Process)\n    if (!primaryShape || primaryShape === plane) {\n      return;\n    }\n\n    eventBus.fire('element.changed', { element: primaryShape });\n  });\n\n\n  // create/remove plane for the subprocess\n  this.executed('shape.toggleCollapse', LOW_PRIORITY, function(context) {\n    var shape = context.shape;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    if (!isExpanded(shape)) {\n      createRoot(context);\n      self._showRecursively(shape.children);\n    } else {\n      removeRoot(context);\n    }\n\n  }, true);\n\n\n  // create/remove plane for the subprocess\n  this.reverted('shape.toggleCollapse', LOW_PRIORITY, function(context) {\n    var shape = context.shape;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    if (!isExpanded(shape)) {\n      createRoot(context);\n      self._showRecursively(shape.children);\n    } else {\n      removeRoot(context);\n    }\n\n  }, true);\n\n  // move elements between planes\n  this.postExecuted('shape.toggleCollapse', HIGH_PRIORITY, function(context) {\n    var shape = context.shape;\n\n    if (!is(shape, 'bpmn:SubProcess')) {\n      return;\n    }\n\n    var rootElement = context.newRootElement;\n\n    if (!rootElement) {\n      return;\n    }\n\n    if (!isExpanded(shape)) {\n\n      // collapsed\n      self._moveChildrenToShape(shape, rootElement);\n\n    } else {\n      self._moveChildrenToShape(rootElement, shape);\n    }\n  }, true);\n\n\n  // copy-paste ///////////\n\n  // add elements in plane to tree\n  eventBus.on('copyPaste.createTree', function(context) {\n    var element = context.element,\n        children = context.children;\n\n    if (!isCollapsedSubProcess(element)) {\n      return;\n    }\n\n    var id = getPlaneIdFromShape(element);\n    var parent = elementRegistry.get(id);\n\n    if (parent) {\n\n      // do not copy invisible root element\n      children.push.apply(children, parent.children);\n    }\n  });\n\n  // set plane children as direct children of collapsed shape\n  eventBus.on('copyPaste.copyElement', function(context) {\n    var descriptor = context.descriptor,\n        element = context.element,\n        elements = context.elements;\n\n    var parent = element.parent;\n\n    var isPlane = is(getDi(parent), 'bpmndi:BPMNPlane');\n    if (!isPlane) {\n      return;\n    }\n\n    var parentId = getShapeIdFromPlane(parent);\n\n    var referencedShape = find(elements, function(element) {\n      return element.id === parentId;\n    });\n\n    if (!referencedShape) {\n      return;\n    }\n\n    descriptor.parent = referencedShape.id;\n  });\n\n  // hide children during pasting\n  eventBus.on('copyPaste.pasteElement', function(context) {\n    var descriptor = context.descriptor;\n\n    if (!descriptor.parent) {\n      return;\n    }\n\n    if (isCollapsedSubProcess(descriptor.parent) || descriptor.parent.hidden) {\n      descriptor.hidden = true;\n    }\n  });\n\n}\n\ninherits(SubProcessPlaneBehavior, CommandInterceptor);\n\n/**\n * Moves the child elements from source to target.\n *\n * If the target is a plane, the children are moved to the top left corner.\n * Otherwise, the center of the target is used.\n *\n * @param {Object|djs.model.Base} source\n * @param {Object|djs.model.Base} target\n */\nSubProcessPlaneBehavior.prototype._moveChildrenToShape = function(source, target) {\n  var modeling = this._modeling;\n\n  var children = source.children;\n  var offset;\n\n  if (!children) {\n    return;\n  }\n\n  // add external labels that weren't children of sub process\n  children = children.concat(children.reduce(function(labels, child) {\n    if (child.label && child.label.parent !== source) {\n      return labels.concat(child.label);\n    }\n\n    return labels;\n  }, []));\n\n  // only change plane if there are no visible children, but don't move them\n  var visibleChildren = children.filter(function(child) {\n    return !child.hidden;\n  });\n\n  if (!visibleChildren.length) {\n    modeling.moveElements(children, { x: 0, y: 0 }, target, { autoResize: false });\n    return;\n  }\n\n  var childrenBounds = getBBox(visibleChildren);\n\n  // target is a plane\n  if (!target.x) {\n    offset = {\n      x: DEFAULT_POSITION.x - childrenBounds.x,\n      y: DEFAULT_POSITION.y - childrenBounds.y\n    };\n  }\n\n  // source is a plane\n  else {\n\n    // move relative to the center of the shape\n    var targetMid = getMid(target);\n    var childrenMid = getMid(childrenBounds);\n\n    offset = {\n      x: targetMid.x - childrenMid.x,\n      y: targetMid.y - childrenMid.y\n    };\n  }\n\n  modeling.moveElements(children, offset, target, { autoResize: false });\n};\n\n/**\n * Sets `hidden` property on all children of the given shape.\n *\n * @param {Array} elements\n * @param {Boolean} [hidden]\n * @returns {Array} all child elements\n */\nSubProcessPlaneBehavior.prototype._showRecursively = function(elements, hidden) {\n  var self = this;\n\n  var result = [];\n  elements.forEach(function(element) {\n    element.hidden = !!hidden;\n\n    result = result.concat(element);\n\n    if (element.children) {\n      result = result.concat(\n        self._showRecursively(element.children, element.collapsed || hidden)\n      );\n    }\n  });\n\n  return result;\n};\n\n/**\n* Adds a given rootElement to the bpmnDi diagrams.\n*\n* @param {Object} rootElement\n* @returns {Object} planeElement\n*/\nSubProcessPlaneBehavior.prototype._addDiagram = function(planeElement) {\n  var bpmnjs = this._bpmnjs;\n  var diagrams = bpmnjs.getDefinitions().diagrams;\n\n  if (!planeElement.businessObject) {\n    planeElement = this._createNewDiagram(planeElement);\n  }\n\n  diagrams.push(planeElement.di.$parent);\n\n  return planeElement;\n};\n\n\n/**\n* Creates a new plane element for the given sub process.\n*\n* @param {Object} bpmnElement\n*\n* @return {Object} new diagram element\n*/\nSubProcessPlaneBehavior.prototype._createNewDiagram = function(bpmnElement) {\n  var bpmnFactory = this._bpmnFactory;\n  var elementFactory = this._elementFactory;\n\n  var diPlane = bpmnFactory.create('bpmndi:BPMNPlane', {\n    bpmnElement: bpmnElement\n  });\n  var diDiagram = bpmnFactory.create('bpmndi:BPMNDiagram', {\n    plane: diPlane\n  });\n  diPlane.$parent = diDiagram;\n\n  // add a virtual element (not being drawn),\n  // a copy cat of our BpmnImporter code\n  var planeElement = elementFactory.createRoot({\n    id: getPlaneIdFromShape(bpmnElement),\n    type: bpmnElement.$type,\n    di: diPlane,\n    businessObject: bpmnElement,\n    collapsed: true\n  });\n\n  return planeElement;\n};\n\n/**\n * Removes the diagram for a given root element\n *\n * @param {Object} rootElement\n * @returns {Object} removed bpmndi:BPMNDiagram\n */\nSubProcessPlaneBehavior.prototype._removeDiagram = function(rootElement) {\n  var bpmnjs = this._bpmnjs;\n\n  var diagrams = bpmnjs.getDefinitions().diagrams;\n\n  var removedDiagram = find(diagrams, function(diagram) {\n    return diagram.plane.bpmnElement.id === rootElement.id;\n  });\n\n  diagrams.splice(diagrams.indexOf(removedDiagram), 1);\n\n  return removedDiagram;\n};\n\n\nSubProcessPlaneBehavior.$inject = [\n  'canvas',\n  'eventBus',\n  'modeling',\n  'elementFactory',\n  'bpmnFactory',\n  'bpmnjs',\n  'elementRegistry'\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}