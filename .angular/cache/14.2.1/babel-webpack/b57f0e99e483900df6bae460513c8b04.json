{"ast":null,"code":"import { isNumber, assign, forEach, every, debounce, bind, reduce, find, isDefined } from 'min-dash';\nimport { assignStyle } from 'min-dom';\nimport { add as collectionAdd, remove as collectionRemove } from '../util/Collections';\nimport { getType, getBBox as getBoundingBox } from '../util/Elements';\nimport { asTRBL } from '../layout/LayoutUtil';\nimport { append as svgAppend, attr as svgAttr, classes as svgClasses, create as svgCreate, transform as svgTransform, remove as svgRemove } from 'tiny-svg';\nimport { createMatrix } from 'tiny-svg';\n\nfunction round(number, resolution) {\n  return Math.round(number * resolution) / resolution;\n}\n\nfunction ensurePx(number) {\n  return isNumber(number) ? number + 'px' : number;\n}\n\nfunction findRoot(element) {\n  while (element.parent) {\n    element = element.parent;\n  }\n\n  return element;\n}\n/**\n * Creates a HTML container element for a SVG element with\n * the given configuration\n *\n * @param  {Object} options\n * @return {HTMLElement} the container element\n */\n\n\nfunction createContainer(options) {\n  options = assign({}, {\n    width: '100%',\n    height: '100%'\n  }, options);\n  var container = options.container || document.body; // create a <div> around the svg element with the respective size\n  // this way we can always get the correct container size\n  // (this is impossible for <svg> elements at the moment)\n\n  var parent = document.createElement('div');\n  parent.setAttribute('class', 'djs-container');\n  assignStyle(parent, {\n    position: 'relative',\n    overflow: 'hidden',\n    width: ensurePx(options.width),\n    height: ensurePx(options.height)\n  });\n  container.appendChild(parent);\n  return parent;\n}\n\nfunction createGroup(parent, cls, childIndex) {\n  var group = svgCreate('g');\n  svgClasses(group).add(cls);\n  var index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1; // must ensure second argument is node or _null_\n  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n\n  parent.insertBefore(group, parent.childNodes[index] || null);\n  return group;\n}\n\nvar BASE_LAYER = 'base'; // render plane contents behind utility layers\n\nvar PLANE_LAYER_INDEX = 0;\nvar UTILITY_LAYER_INDEX = 1;\nvar REQUIRED_MODEL_ATTRS = {\n  shape: ['x', 'y', 'width', 'height'],\n  connection: ['waypoints']\n};\n/**\n * The main drawing canvas.\n *\n * @class\n * @constructor\n *\n * @emits Canvas#canvas.init\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {GraphicsFactory} graphicsFactory\n * @param {ElementRegistry} elementRegistry\n */\n\nexport default function Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n  this._rootsIdx = 0;\n  this._layers = {};\n  this._planes = [];\n  this._rootElement = null;\n\n  this._init(config || {});\n}\nCanvas.$inject = ['config.canvas', 'eventBus', 'graphicsFactory', 'elementRegistry'];\n/**\n * Creates a <svg> element that is wrapped into a <div>.\n * This way we are always able to correctly figure out the size of the svg element\n * by querying the parent node.\n\n * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n\n * <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n *   <svg width=\"100%\" height=\"100%\">\n *    ...\n *   </svg>\n * </div>\n */\n\nCanvas.prototype._init = function (config) {\n  var eventBus = this._eventBus; // html container\n\n  var container = this._container = createContainer(config);\n  var svg = this._svg = svgCreate('svg');\n  svgAttr(svg, {\n    width: '100%',\n    height: '100%'\n  });\n  svgAppend(container, svg);\n  var viewport = this._viewport = createGroup(svg, 'viewport'); // debounce canvas.viewbox.changed events\n  // for smoother diagram interaction\n\n  if (config.deferUpdate !== false) {\n    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n  }\n\n  eventBus.on('diagram.init', function () {\n    /**\n     * An event indicating that the canvas is ready to be drawn on.\n     *\n     * @memberOf Canvas\n     *\n     * @event canvas.init\n     *\n     * @type {Object}\n     * @property {SVGElement} svg the created svg element\n     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n     */\n    eventBus.fire('canvas.init', {\n      svg: svg,\n      viewport: viewport\n    });\n  }, this); // reset viewbox on shape changes to\n  // recompute the viewbox\n\n  eventBus.on(['shape.added', 'connection.added', 'shape.removed', 'connection.removed', 'elements.changed', 'root.set'], function () {\n    delete this._cachedViewbox;\n  }, this);\n  eventBus.on('diagram.destroy', 500, this._destroy, this);\n  eventBus.on('diagram.clear', 500, this._clear, this);\n};\n\nCanvas.prototype._destroy = function (emit) {\n  this._eventBus.fire('canvas.destroy', {\n    svg: this._svg,\n    viewport: this._viewport\n  });\n\n  var parent = this._container.parentNode;\n\n  if (parent) {\n    parent.removeChild(this._container);\n  }\n\n  delete this._svg;\n  delete this._container;\n  delete this._layers;\n  delete this._planes;\n  delete this._rootElement;\n  delete this._viewport;\n};\n\nCanvas.prototype._clear = function () {\n  var self = this;\n\n  var allElements = this._elementRegistry.getAll(); // remove all elements\n\n\n  allElements.forEach(function (element) {\n    var type = getType(element);\n\n    if (type === 'root') {\n      self.removeRootElement(element);\n    } else {\n      self._removeElement(element, type);\n    }\n  }); // remove all planes\n\n  this._planes = [];\n  this._rootElement = null; // force recomputation of view box\n\n  delete this._cachedViewbox;\n};\n/**\n * Returns the default layer on which\n * all elements are drawn.\n *\n * @returns {SVGElement}\n */\n\n\nCanvas.prototype.getDefaultLayer = function () {\n  return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);\n};\n/**\n * Returns a layer that is used to draw elements\n * or annotations on it.\n *\n * Non-existing layers retrieved through this method\n * will be created. During creation, the optional index\n * may be used to create layers below or above existing layers.\n * A layer with a certain index is always created above all\n * existing layers with the same index.\n *\n * @param {string} name\n * @param {number} index\n *\n * @returns {SVGElement}\n */\n\n\nCanvas.prototype.getLayer = function (name, index) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    layer = this._layers[name] = this._createLayer(name, index);\n  } // throw an error if layer creation / retrival is\n  // requested on different index\n\n\n  if (typeof index !== 'undefined' && layer.index !== index) {\n    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n  }\n\n  return layer.group;\n};\n/**\n * For a given index, return the number of layers that have a higher index and\n * are visible.\n *\n * This is used to determine the node a layer should be inserted at.\n *\n * @param {Number} index\n * @returns {Number}\n */\n\n\nCanvas.prototype._getChildIndex = function (index) {\n  return reduce(this._layers, function (childIndex, layer) {\n    if (layer.visible && index >= layer.index) {\n      childIndex++;\n    }\n\n    return childIndex;\n  }, 0);\n};\n/**\n * Creates a given layer and returns it.\n *\n * @param {string} name\n * @param {number} [index=0]\n *\n * @return {Object} layer descriptor with { index, group: SVGGroup }\n */\n\n\nCanvas.prototype._createLayer = function (name, index) {\n  if (typeof index === 'undefined') {\n    index = UTILITY_LAYER_INDEX;\n  }\n\n  var childIndex = this._getChildIndex(index);\n\n  return {\n    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n    index: index,\n    visible: true\n  };\n};\n/**\n * Shows a given layer.\n *\n * @param {String} layer\n * @returns {SVGElement}\n */\n\n\nCanvas.prototype.showLayer = function (name) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    throw new Error('layer <' + name + '> does not exist');\n  }\n\n  var viewport = this._viewport;\n  var group = layer.group;\n  var index = layer.index;\n\n  if (layer.visible) {\n    return group;\n  }\n\n  var childIndex = this._getChildIndex(index);\n\n  viewport.insertBefore(group, viewport.childNodes[childIndex] || null);\n  layer.visible = true;\n  return group;\n};\n/**\n * Hides a given layer.\n *\n * @param {String} layer\n * @returns {SVGElement}\n */\n\n\nCanvas.prototype.hideLayer = function (name) {\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    throw new Error('layer <' + name + '> does not exist');\n  }\n\n  var group = layer.group;\n\n  if (!layer.visible) {\n    return group;\n  }\n\n  svgRemove(group);\n  layer.visible = false;\n  return group;\n};\n\nCanvas.prototype._removeLayer = function (name) {\n  var layer = this._layers[name];\n\n  if (layer) {\n    delete this._layers[name];\n    svgRemove(layer.group);\n  }\n};\n/**\n * Returns the currently active layer. Can be null.\n *\n * @returns {SVGElement|null}\n */\n\n\nCanvas.prototype.getActiveLayer = function () {\n  var plane = this._findPlaneForRoot(this.getRootElement());\n\n  if (!plane) {\n    return null;\n  }\n\n  return plane.layer;\n};\n/**\n * Returns the plane which contains the given element.\n *\n * @param {string|djs.model.Base} element\n *\n * @return {djs.model.Base} root for element\n */\n\n\nCanvas.prototype.findRoot = function (element) {\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  if (!element) {\n    return;\n  }\n\n  var plane = this._findPlaneForRoot(findRoot(element)) || {};\n  return plane.rootElement;\n};\n/**\n * Return a list of all root elements on the diagram.\n *\n * @return {djs.model.Root[]}\n */\n\n\nCanvas.prototype.getRootElements = function () {\n  return this._planes.map(function (plane) {\n    return plane.rootElement;\n  });\n};\n\nCanvas.prototype._findPlaneForRoot = function (rootElement) {\n  return find(this._planes, function (plane) {\n    return plane.rootElement === rootElement;\n  });\n};\n/**\n * Returns the html element that encloses the\n * drawing canvas.\n *\n * @return {DOMNode}\n */\n\n\nCanvas.prototype.getContainer = function () {\n  return this._container;\n}; // markers //////////////////////\n\n\nCanvas.prototype._updateMarker = function (element, marker, add) {\n  var container;\n\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  } // we need to access all\n\n\n  container = this._elementRegistry._elements[element.id];\n\n  if (!container) {\n    return;\n  }\n\n  forEach([container.gfx, container.secondaryGfx], function (gfx) {\n    if (gfx) {\n      // invoke either addClass or removeClass based on mode\n      if (add) {\n        svgClasses(gfx).add(marker);\n      } else {\n        svgClasses(gfx).remove(marker);\n      }\n    }\n  });\n  /**\n   * An event indicating that a marker has been updated for an element\n   *\n   * @event element.marker.update\n   * @type {Object}\n   * @property {djs.model.Element} element the shape\n   * @property {Object} gfx the graphical representation of the shape\n   * @property {string} marker\n   * @property {boolean} add true if the marker was added, false if it got removed\n   */\n\n  this._eventBus.fire('element.marker.update', {\n    element: element,\n    gfx: container.gfx,\n    marker: marker,\n    add: !!add\n  });\n};\n/**\n * Adds a marker to an element (basically a css class).\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @example\n * canvas.addMarker('foo', 'some-marker');\n *\n * var fooGfx = canvas.getGraphics('foo');\n *\n * fooGfx; // <g class=\"... some-marker\"> ... </g>\n *\n * @param {string|djs.model.Base} element\n * @param {string} marker\n */\n\n\nCanvas.prototype.addMarker = function (element, marker) {\n  this._updateMarker(element, marker, true);\n};\n/**\n * Remove a marker from an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\n\n\nCanvas.prototype.removeMarker = function (element, marker) {\n  this._updateMarker(element, marker, false);\n};\n/**\n * Check the existence of a marker on element.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\n\n\nCanvas.prototype.hasMarker = function (element, marker) {\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  var gfx = this.getGraphics(element);\n  return svgClasses(gfx).has(marker);\n};\n/**\n * Toggles a marker on an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\n\n\nCanvas.prototype.toggleMarker = function (element, marker) {\n  if (this.hasMarker(element, marker)) {\n    this.removeMarker(element, marker);\n  } else {\n    this.addMarker(element, marker);\n  }\n};\n/**\n * Returns the current root element.\n *\n * Supports two different modes for handling root elements:\n *\n * 1. if no root element has been added before, an implicit root will be added\n * and returned. This is used in applications that don't require explicit\n * root elements.\n *\n * 2. when root elements have been added before calling `getRootElement`,\n * root elements can be null. This is used for applications that want to manage\n * root elements themselves.\n *\n * @returns {Object|djs.model.Root|null} rootElement.\n */\n\n\nCanvas.prototype.getRootElement = function () {\n  var rootElement = this._rootElement; // can return null if root elements are present but none was set yet\n\n  if (rootElement || this._planes.length) {\n    return rootElement;\n  }\n\n  return this.setRootElement(this.addRootElement(null));\n};\n/**\n * Adds a given root element and returns it.\n *\n * @param {Object|djs.model.Root} rootElement\n *\n * @return {Object|djs.model.Root} rootElement\n */\n\n\nCanvas.prototype.addRootElement = function (rootElement) {\n  var idx = this._rootsIdx++;\n\n  if (!rootElement) {\n    rootElement = {\n      id: '__implicitroot_' + idx,\n      children: [],\n      isImplicit: true\n    };\n  }\n\n  var layerName = rootElement.layer = 'root-' + idx;\n\n  this._ensureValid('root', rootElement);\n\n  var layer = this.getLayer(layerName, PLANE_LAYER_INDEX);\n  this.hideLayer(layerName);\n\n  this._addRoot(rootElement, layer);\n\n  this._planes.push({\n    rootElement: rootElement,\n    layer: layer\n  });\n\n  return rootElement;\n};\n/**\n * Removes a given rootElement and returns it.\n *\n * @param {djs.model.Root|String} rootElement\n *\n * @return {Object|djs.model.Root} rootElement\n */\n\n\nCanvas.prototype.removeRootElement = function (rootElement) {\n  if (typeof rootElement === 'string') {\n    rootElement = this._elementRegistry.get(rootElement);\n  }\n\n  var plane = this._findPlaneForRoot(rootElement);\n\n  if (!plane) {\n    return;\n  } // hook up life-cycle events\n\n\n  this._removeRoot(rootElement); // clean up layer\n\n\n  this._removeLayer(rootElement.layer); // clean up plane\n\n\n  this._planes = this._planes.filter(function (plane) {\n    return plane.rootElement !== rootElement;\n  }); // clean up active root\n\n  if (this._rootElement === rootElement) {\n    this._rootElement = null;\n  }\n\n  return rootElement;\n}; // root element handling //////////////////////\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} rootElement\n *\n * @return {Object|djs.model.Root} new root element\n */\n\n\nCanvas.prototype.setRootElement = function (rootElement, override) {\n  if (isDefined(override)) {\n    throw new Error('override not supported');\n  }\n\n  if (rootElement === this._rootElement) {\n    return;\n  }\n\n  var plane;\n\n  if (!rootElement) {\n    throw new Error('rootElement required');\n  }\n\n  plane = this._findPlaneForRoot(rootElement); // give set add semantics for backwards compatibility\n\n  if (!plane) {\n    rootElement = this.addRootElement(rootElement);\n  }\n\n  this._setRoot(rootElement);\n\n  return rootElement;\n};\n\nCanvas.prototype._removeRoot = function (element) {\n  var elementRegistry = this._elementRegistry,\n      eventBus = this._eventBus; // simulate element remove event sequence\n\n  eventBus.fire('root.remove', {\n    element: element\n  });\n  eventBus.fire('root.removed', {\n    element: element\n  });\n  elementRegistry.remove(element);\n};\n\nCanvas.prototype._addRoot = function (element, gfx) {\n  var elementRegistry = this._elementRegistry,\n      eventBus = this._eventBus; // resemble element add event sequence\n\n  eventBus.fire('root.add', {\n    element: element\n  });\n  elementRegistry.add(element, gfx);\n  eventBus.fire('root.added', {\n    element: element,\n    gfx: gfx\n  });\n};\n\nCanvas.prototype._setRoot = function (rootElement, layer) {\n  var currentRoot = this._rootElement;\n\n  if (currentRoot) {\n    // un-associate previous root element <svg>\n    this._elementRegistry.updateGraphics(currentRoot, null, true); // hide previous layer\n\n\n    this.hideLayer(currentRoot.layer);\n  }\n\n  if (rootElement) {\n    if (!layer) {\n      layer = this._findPlaneForRoot(rootElement).layer;\n    } // associate element with <svg>\n\n\n    this._elementRegistry.updateGraphics(rootElement, this._svg, true); // show root layer\n\n\n    this.showLayer(rootElement.layer);\n  }\n\n  this._rootElement = rootElement;\n\n  this._eventBus.fire('root.set', {\n    element: rootElement\n  });\n}; // add functionality //////////////////////\n\n\nCanvas.prototype._ensureValid = function (type, element) {\n  if (!element.id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elementRegistry.get(element.id)) {\n    throw new Error('element <' + element.id + '> already exists');\n  }\n\n  var requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n  var valid = every(requiredAttrs, function (attr) {\n    return typeof element[attr] !== 'undefined';\n  });\n\n  if (!valid) {\n    throw new Error('must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n  }\n};\n\nCanvas.prototype._setParent = function (element, parent, parentIndex) {\n  collectionAdd(parent.children, element, parentIndex);\n  element.parent = parent;\n};\n/**\n * Adds an element to the canvas.\n *\n * This wires the parent <-> child relationship between the element and\n * a explicitly specified parent or an implicit root element.\n *\n * During add it emits the events\n *\n *  * <{type}.add> (element, parent)\n *  * <{type}.added> (element, gfx)\n *\n * Extensions may hook into these events to perform their magic.\n *\n * @param {string} type\n * @param {Object|djs.model.Base} element\n * @param {Object|djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {Object|djs.model.Base} the added element\n */\n\n\nCanvas.prototype._addElement = function (type, element, parent, parentIndex) {\n  parent = parent || this.getRootElement();\n  var eventBus = this._eventBus,\n      graphicsFactory = this._graphicsFactory;\n\n  this._ensureValid(type, element);\n\n  eventBus.fire(type + '.add', {\n    element: element,\n    parent: parent\n  });\n\n  this._setParent(element, parent, parentIndex); // create graphics\n\n\n  var gfx = graphicsFactory.create(type, element, parentIndex);\n\n  this._elementRegistry.add(element, gfx); // update its visual\n\n\n  graphicsFactory.update(type, element, gfx);\n  eventBus.fire(type + '.added', {\n    element: element,\n    gfx: gfx\n  });\n  return element;\n};\n/**\n * Adds a shape to the canvas\n *\n * @param {Object|djs.model.Shape} shape to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Shape} the added shape\n */\n\n\nCanvas.prototype.addShape = function (shape, parent, parentIndex) {\n  return this._addElement('shape', shape, parent, parentIndex);\n};\n/**\n * Adds a connection to the canvas\n *\n * @param {Object|djs.model.Connection} connection to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Connection} the added connection\n */\n\n\nCanvas.prototype.addConnection = function (connection, parent, parentIndex) {\n  return this._addElement('connection', connection, parent, parentIndex);\n};\n/**\n * Internal remove element\n */\n\n\nCanvas.prototype._removeElement = function (element, type) {\n  var elementRegistry = this._elementRegistry,\n      graphicsFactory = this._graphicsFactory,\n      eventBus = this._eventBus;\n  element = elementRegistry.get(element.id || element);\n\n  if (!element) {\n    // element was removed already\n    return;\n  }\n\n  eventBus.fire(type + '.remove', {\n    element: element\n  });\n  graphicsFactory.remove(element); // unset parent <-> child relationship\n\n  collectionRemove(element.parent && element.parent.children, element);\n  element.parent = null;\n  eventBus.fire(type + '.removed', {\n    element: element\n  });\n  elementRegistry.remove(element);\n  return element;\n};\n/**\n * Removes a shape from the canvas\n *\n * @param {string|djs.model.Shape} shape or shape id to be removed\n *\n * @return {djs.model.Shape} the removed shape\n */\n\n\nCanvas.prototype.removeShape = function (shape) {\n  /**\n   * An event indicating that a shape is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.remove\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n\n  /**\n   * An event indicating that a shape has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.removed\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n  return this._removeElement(shape, 'shape');\n};\n/**\n * Removes a connection from the canvas\n *\n * @param {string|djs.model.Connection} connection or connection id to be removed\n *\n * @return {djs.model.Connection} the removed connection\n */\n\n\nCanvas.prototype.removeConnection = function (connection) {\n  /**\n   * An event indicating that a connection is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.remove\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n\n  /**\n   * An event indicating that a connection has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.removed\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n  return this._removeElement(connection, 'connection');\n};\n/**\n * Return the graphical object underlaying a certain diagram element\n *\n * @param {string|djs.model.Base} element descriptor of the element\n * @param {boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\n\n\nCanvas.prototype.getGraphics = function (element, secondary) {\n  return this._elementRegistry.getGraphics(element, secondary);\n};\n/**\n * Perform a viewbox update via a given change function.\n *\n * @param {Function} changeFn\n */\n\n\nCanvas.prototype._changeViewbox = function (changeFn) {\n  // notify others of the upcoming viewbox change\n  this._eventBus.fire('canvas.viewbox.changing'); // perform actual change\n\n\n  changeFn.apply(this); // reset the cached viewbox so that\n  // a new get operation on viewbox or zoom\n  // triggers a viewbox re-computation\n\n  this._cachedViewbox = null; // notify others of the change; this step\n  // may or may not be debounced\n\n  this._viewboxChanged();\n};\n\nCanvas.prototype._viewboxChanged = function () {\n  this._eventBus.fire('canvas.viewbox.changed', {\n    viewbox: this.viewbox()\n  });\n};\n/**\n * Gets or sets the view box of the canvas, i.e. the\n * area that is currently displayed.\n *\n * The getter may return a cached viewbox (if it is currently\n * changing). To force a recomputation, pass `false` as the first argument.\n *\n * @example\n *\n * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n *\n * // sets the visible area of the diagram to (100|100) -> (600|100)\n * // and and scales it according to the diagram width\n *\n * var viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n *\n * console.log(viewbox);\n * // {\n * //   inner: Dimensions,\n * //   outer: Dimensions,\n * //   scale,\n * //   x, y,\n * //   width, height\n * // }\n *\n * // if the current diagram is zoomed and scrolled, you may reset it to the\n * // default zoom via this method, too:\n *\n * var zoomedAndScrolledViewbox = canvas.viewbox();\n *\n * canvas.viewbox({\n *   x: 0,\n *   y: 0,\n *   width: zoomedAndScrolledViewbox.outer.width,\n *   height: zoomedAndScrolledViewbox.outer.height\n * });\n *\n * @param  {Object} [box] the new view box to set\n * @param  {number} box.x the top left X coordinate of the canvas visible in view box\n * @param  {number} box.y the top left Y coordinate of the canvas visible in view box\n * @param  {number} box.width the visible width\n * @param  {number} box.height\n *\n * @return {Object} the current view box\n */\n\n\nCanvas.prototype.viewbox = function (box) {\n  if (box === undefined && this._cachedViewbox) {\n    return this._cachedViewbox;\n  }\n\n  var viewport = this._viewport,\n      innerBox,\n      outerBox = this.getSize(),\n      matrix,\n      activeLayer,\n      transform,\n      scale,\n      x,\n      y;\n\n  if (!box) {\n    // compute the inner box based on the\n    // diagrams active layer. This allows us to exclude\n    // external components, such as overlays\n    activeLayer = this._rootElement ? this.getActiveLayer() : null;\n    innerBox = activeLayer && activeLayer.getBBox() || {};\n    transform = svgTransform(viewport);\n    matrix = transform ? transform.matrix : createMatrix();\n    scale = round(matrix.a, 1000);\n    x = round(-matrix.e || 0, 1000);\n    y = round(-matrix.f || 0, 1000);\n    box = this._cachedViewbox = {\n      x: x ? x / scale : 0,\n      y: y ? y / scale : 0,\n      width: outerBox.width / scale,\n      height: outerBox.height / scale,\n      scale: scale,\n      inner: {\n        width: innerBox.width || 0,\n        height: innerBox.height || 0,\n        x: innerBox.x || 0,\n        y: innerBox.y || 0\n      },\n      outer: outerBox\n    };\n    return box;\n  } else {\n    this._changeViewbox(function () {\n      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n\n      var matrix = this._svg.createSVGMatrix().scale(scale).translate(-box.x, -box.y);\n\n      svgTransform(viewport, matrix);\n    });\n  }\n\n  return box;\n};\n/**\n * Gets or sets the scroll of the canvas.\n *\n * @param {Object} [delta] the new scroll to apply.\n *\n * @param {number} [delta.dx]\n * @param {number} [delta.dy]\n */\n\n\nCanvas.prototype.scroll = function (delta) {\n  var node = this._viewport;\n  var matrix = node.getCTM();\n\n  if (delta) {\n    this._changeViewbox(function () {\n      delta = assign({\n        dx: 0,\n        dy: 0\n      }, delta || {});\n      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n      setCTM(node, matrix);\n    });\n  }\n\n  return {\n    x: matrix.e,\n    y: matrix.f\n  };\n};\n/**\n * Scrolls the viewbox to contain the given element.\n * Optionally specify a padding to be applied to the edges.\n *\n * @param {Object|String} [element] the element to scroll to.\n * @param {Object|Number} [padding=100] the padding to be applied. Can also specify top, bottom, left and right.\n *\n */\n\n\nCanvas.prototype.scrollToElement = function (element, padding) {\n  var defaultPadding = 100;\n\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  } // set to correct rootElement\n\n\n  var rootElement = this.findRoot(element);\n\n  if (rootElement !== this.getRootElement()) {\n    this.setRootElement(rootElement);\n  }\n\n  if (!padding) {\n    padding = {};\n  }\n\n  if (typeof padding === 'number') {\n    defaultPadding = padding;\n  }\n\n  padding = {\n    top: padding.top || defaultPadding,\n    right: padding.right || defaultPadding,\n    bottom: padding.bottom || defaultPadding,\n    left: padding.left || defaultPadding\n  };\n  var elementBounds = getBoundingBox(element),\n      elementTrbl = asTRBL(elementBounds),\n      viewboxBounds = this.viewbox(),\n      zoom = this.zoom(),\n      dx,\n      dy; // shrink viewboxBounds with padding\n\n  viewboxBounds.y += padding.top / zoom;\n  viewboxBounds.x += padding.left / zoom;\n  viewboxBounds.width -= (padding.right + padding.left) / zoom;\n  viewboxBounds.height -= (padding.bottom + padding.top) / zoom;\n  var viewboxTrbl = asTRBL(viewboxBounds);\n  var canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;\n\n  if (!canFit) {\n    // top-left when element can't fit\n    dx = elementBounds.x - viewboxBounds.x;\n    dy = elementBounds.y - viewboxBounds.y;\n  } else {\n    var dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),\n        dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),\n        dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),\n        dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);\n    dx = dRight || dLeft;\n    dy = dBottom || dTop;\n  }\n\n  this.scroll({\n    dx: -dx * zoom,\n    dy: -dy * zoom\n  });\n};\n/**\n * Gets or sets the current zoom of the canvas, optionally zooming\n * to the specified position.\n *\n * The getter may return a cached zoom level. Call it with `false` as\n * the first argument to force recomputation of the current level.\n *\n * @param {string|number} [newScale] the new zoom level, either a number, i.e. 0.9,\n *                                   or `fit-viewport` to adjust the size to fit the current viewport\n * @param {string|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null\n *\n * @return {number} the current scale\n */\n\n\nCanvas.prototype.zoom = function (newScale, center) {\n  if (!newScale) {\n    return this.viewbox(newScale).scale;\n  }\n\n  if (newScale === 'fit-viewport') {\n    return this._fitViewport(center);\n  }\n\n  var outer, matrix;\n\n  this._changeViewbox(function () {\n    if (typeof center !== 'object') {\n      outer = this.viewbox().outer;\n      center = {\n        x: outer.width / 2,\n        y: outer.height / 2\n      };\n    }\n\n    matrix = this._setZoom(newScale, center);\n  });\n\n  return round(matrix.a, 1000);\n};\n\nfunction setCTM(node, m) {\n  var mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n  node.setAttribute('transform', mstr);\n}\n\nCanvas.prototype._fitViewport = function (center) {\n  var vbox = this.viewbox(),\n      outer = vbox.outer,\n      inner = vbox.inner,\n      newScale,\n      newViewbox; // display the complete diagram without zooming in.\n  // instead of relying on internal zoom, we perform a\n  // hard reset on the canvas viewbox to realize this\n  //\n  // if diagram does not need to be zoomed in, we focus it around\n  // the diagram origin instead\n\n  if (inner.x >= 0 && inner.y >= 0 && inner.x + inner.width <= outer.width && inner.y + inner.height <= outer.height && !center) {\n    newViewbox = {\n      x: 0,\n      y: 0,\n      width: Math.max(inner.width + inner.x, outer.width),\n      height: Math.max(inner.height + inner.y, outer.height)\n    };\n  } else {\n    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n    newViewbox = {\n      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n      width: outer.width / newScale,\n      height: outer.height / newScale\n    };\n  }\n\n  this.viewbox(newViewbox);\n  return this.viewbox(false).scale;\n};\n\nCanvas.prototype._setZoom = function (scale, center) {\n  var svg = this._svg,\n      viewport = this._viewport;\n  var matrix = svg.createSVGMatrix();\n  var point = svg.createSVGPoint();\n  var centerPoint, originalPoint, currentMatrix, scaleMatrix, newMatrix;\n  currentMatrix = viewport.getCTM();\n  var currentScale = currentMatrix.a;\n\n  if (center) {\n    centerPoint = assign(point, center); // revert applied viewport transformations\n\n    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse()); // create scale matrix\n\n    scaleMatrix = matrix.translate(originalPoint.x, originalPoint.y).scale(1 / currentScale * scale).translate(-originalPoint.x, -originalPoint.y);\n    newMatrix = currentMatrix.multiply(scaleMatrix);\n  } else {\n    newMatrix = matrix.scale(scale);\n  }\n\n  setCTM(this._viewport, newMatrix);\n  return newMatrix;\n};\n/**\n * Returns the size of the canvas\n *\n * @return {Dimensions}\n */\n\n\nCanvas.prototype.getSize = function () {\n  return {\n    width: this._container.clientWidth,\n    height: this._container.clientHeight\n  };\n};\n/**\n * Return the absolute bounding box for the given element\n *\n * The absolute bounding box may be used to display overlays in the\n * callers (browser) coordinate system rather than the zoomed in/out\n * canvas coordinates.\n *\n * @param  {ElementDescriptor} element\n * @return {Bounds} the absolute bounding box\n */\n\n\nCanvas.prototype.getAbsoluteBBox = function (element) {\n  var vbox = this.viewbox();\n  var bbox; // connection\n  // use svg bbox\n\n  if (element.waypoints) {\n    var gfx = this.getGraphics(element);\n    bbox = gfx.getBBox();\n  } // shapes\n  // use data\n  else {\n    bbox = element;\n  }\n\n  var x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n  var y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n  var width = bbox.width * vbox.scale;\n  var height = bbox.height * vbox.scale;\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n/**\n * Fires an event in order other modules can react to the\n * canvas resizing\n */\n\n\nCanvas.prototype.resized = function () {\n  // force recomputation of view box\n  delete this._cachedViewbox;\n\n  this._eventBus.fire('canvas.resized');\n};","map":{"version":3,"names":["isNumber","assign","forEach","every","debounce","bind","reduce","find","isDefined","assignStyle","add","collectionAdd","remove","collectionRemove","getType","getBBox","getBoundingBox","asTRBL","append","svgAppend","attr","svgAttr","classes","svgClasses","create","svgCreate","transform","svgTransform","svgRemove","createMatrix","round","number","resolution","Math","ensurePx","findRoot","element","parent","createContainer","options","width","height","container","document","body","createElement","setAttribute","position","overflow","appendChild","createGroup","cls","childIndex","group","index","undefined","childNodes","length","insertBefore","BASE_LAYER","PLANE_LAYER_INDEX","UTILITY_LAYER_INDEX","REQUIRED_MODEL_ATTRS","shape","connection","Canvas","config","eventBus","graphicsFactory","elementRegistry","_eventBus","_elementRegistry","_graphicsFactory","_rootsIdx","_layers","_planes","_rootElement","_init","$inject","prototype","_container","svg","_svg","viewport","_viewport","deferUpdate","_viewboxChanged","on","fire","_cachedViewbox","_destroy","_clear","emit","parentNode","removeChild","self","allElements","getAll","type","removeRootElement","_removeElement","getDefaultLayer","getLayer","name","Error","layer","_createLayer","_getChildIndex","visible","showLayer","hideLayer","_removeLayer","getActiveLayer","plane","_findPlaneForRoot","getRootElement","get","rootElement","getRootElements","map","getContainer","_updateMarker","marker","id","_elements","gfx","secondaryGfx","addMarker","removeMarker","hasMarker","getGraphics","has","toggleMarker","setRootElement","addRootElement","idx","children","isImplicit","layerName","_ensureValid","_addRoot","push","_removeRoot","filter","override","_setRoot","currentRoot","updateGraphics","requiredAttrs","valid","join","_setParent","parentIndex","_addElement","update","addShape","addConnection","removeShape","removeConnection","secondary","_changeViewbox","changeFn","apply","viewbox","box","innerBox","outerBox","getSize","matrix","activeLayer","scale","x","y","a","e","f","inner","outer","min","createSVGMatrix","translate","scroll","delta","node","getCTM","dx","dy","multiply","setCTM","scrollToElement","padding","defaultPadding","top","right","bottom","left","elementBounds","elementTrbl","viewboxBounds","zoom","viewboxTrbl","canFit","dRight","max","dLeft","dBottom","dTop","newScale","center","_fitViewport","_setZoom","m","mstr","b","c","d","vbox","newViewbox","point","createSVGPoint","centerPoint","originalPoint","currentMatrix","scaleMatrix","newMatrix","currentScale","matrixTransform","inverse","clientWidth","clientHeight","getAbsoluteBBox","bbox","waypoints","resized"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/core/Canvas.js"],"sourcesContent":["import {\n  isNumber,\n  assign,\n  forEach,\n  every,\n  debounce,\n  bind,\n  reduce,\n  find,\n  isDefined\n} from 'min-dash';\n\nimport {\n  assignStyle\n} from 'min-dom';\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../util/Collections';\n\nimport {\n  getType,\n  getBBox as getBoundingBox\n} from '../util/Elements';\n\nimport { asTRBL } from '../layout/LayoutUtil';\n\nimport {\n  append as svgAppend,\n  attr as svgAttr,\n  classes as svgClasses,\n  create as svgCreate,\n  transform as svgTransform,\n  remove as svgRemove\n} from 'tiny-svg';\n\nimport { createMatrix as createMatrix } from 'tiny-svg';\n\n\nfunction round(number, resolution) {\n  return Math.round(number * resolution) / resolution;\n}\n\nfunction ensurePx(number) {\n  return isNumber(number) ? number + 'px' : number;\n}\n\nfunction findRoot(element) {\n  while (element.parent) {\n    element = element.parent;\n  }\n\n  return element;\n}\n\n/**\n * Creates a HTML container element for a SVG element with\n * the given configuration\n *\n * @param  {Object} options\n * @return {HTMLElement} the container element\n */\nfunction createContainer(options) {\n\n  options = assign({}, { width: '100%', height: '100%' }, options);\n\n  var container = options.container || document.body;\n\n  // create a <div> around the svg element with the respective size\n  // this way we can always get the correct container size\n  // (this is impossible for <svg> elements at the moment)\n  var parent = document.createElement('div');\n  parent.setAttribute('class', 'djs-container');\n\n  assignStyle(parent, {\n    position: 'relative',\n    overflow: 'hidden',\n    width: ensurePx(options.width),\n    height: ensurePx(options.height)\n  });\n\n  container.appendChild(parent);\n\n  return parent;\n}\n\nfunction createGroup(parent, cls, childIndex) {\n  var group = svgCreate('g');\n  svgClasses(group).add(cls);\n\n  var index = childIndex !== undefined ? childIndex : parent.childNodes.length - 1;\n\n  // must ensure second argument is node or _null_\n  // cf. https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore\n  parent.insertBefore(group, parent.childNodes[index] || null);\n\n  return group;\n}\n\nvar BASE_LAYER = 'base';\n\n// render plane contents behind utility layers\nvar PLANE_LAYER_INDEX = 0;\nvar UTILITY_LAYER_INDEX = 1;\n\n\nvar REQUIRED_MODEL_ATTRS = {\n  shape: [ 'x', 'y', 'width', 'height' ],\n  connection: [ 'waypoints' ]\n};\n\n/**\n * The main drawing canvas.\n *\n * @class\n * @constructor\n *\n * @emits Canvas#canvas.init\n *\n * @param {Object} config\n * @param {EventBus} eventBus\n * @param {GraphicsFactory} graphicsFactory\n * @param {ElementRegistry} elementRegistry\n */\nexport default function Canvas(config, eventBus, graphicsFactory, elementRegistry) {\n\n  this._eventBus = eventBus;\n  this._elementRegistry = elementRegistry;\n  this._graphicsFactory = graphicsFactory;\n\n  this._rootsIdx = 0;\n\n  this._layers = {};\n  this._planes = [];\n  this._rootElement = null;\n\n  this._init(config || {});\n}\n\nCanvas.$inject = [\n  'config.canvas',\n  'eventBus',\n  'graphicsFactory',\n  'elementRegistry'\n];\n\n/**\n * Creates a <svg> element that is wrapped into a <div>.\n * This way we are always able to correctly figure out the size of the svg element\n * by querying the parent node.\n\n * (It is not possible to get the size of a svg element cross browser @ 2014-04-01)\n\n * <div class=\"djs-container\" style=\"width: {desired-width}, height: {desired-height}\">\n *   <svg width=\"100%\" height=\"100%\">\n *    ...\n *   </svg>\n * </div>\n */\nCanvas.prototype._init = function(config) {\n\n  var eventBus = this._eventBus;\n\n  // html container\n  var container = this._container = createContainer(config);\n\n  var svg = this._svg = svgCreate('svg');\n  svgAttr(svg, { width: '100%', height: '100%' });\n\n  svgAppend(container, svg);\n\n  var viewport = this._viewport = createGroup(svg, 'viewport');\n\n  // debounce canvas.viewbox.changed events\n  // for smoother diagram interaction\n  if (config.deferUpdate !== false) {\n    this._viewboxChanged = debounce(bind(this._viewboxChanged, this), 300);\n  }\n\n  eventBus.on('diagram.init', function() {\n\n    /**\n     * An event indicating that the canvas is ready to be drawn on.\n     *\n     * @memberOf Canvas\n     *\n     * @event canvas.init\n     *\n     * @type {Object}\n     * @property {SVGElement} svg the created svg element\n     * @property {SVGElement} viewport the direct parent of diagram elements and shapes\n     */\n    eventBus.fire('canvas.init', {\n      svg: svg,\n      viewport: viewport\n    });\n\n  }, this);\n\n  // reset viewbox on shape changes to\n  // recompute the viewbox\n  eventBus.on([\n    'shape.added',\n    'connection.added',\n    'shape.removed',\n    'connection.removed',\n    'elements.changed',\n    'root.set'\n  ], function() {\n    delete this._cachedViewbox;\n  }, this);\n\n  eventBus.on('diagram.destroy', 500, this._destroy, this);\n  eventBus.on('diagram.clear', 500, this._clear, this);\n};\n\nCanvas.prototype._destroy = function(emit) {\n  this._eventBus.fire('canvas.destroy', {\n    svg: this._svg,\n    viewport: this._viewport\n  });\n\n  var parent = this._container.parentNode;\n\n  if (parent) {\n    parent.removeChild(this._container);\n  }\n\n  delete this._svg;\n  delete this._container;\n  delete this._layers;\n  delete this._planes;\n  delete this._rootElement;\n  delete this._viewport;\n};\n\nCanvas.prototype._clear = function() {\n\n  var self = this;\n\n  var allElements = this._elementRegistry.getAll();\n\n  // remove all elements\n  allElements.forEach(function(element) {\n    var type = getType(element);\n\n    if (type === 'root') {\n      self.removeRootElement(element);\n    } else {\n      self._removeElement(element, type);\n    }\n  });\n\n  // remove all planes\n  this._planes = [];\n  this._rootElement = null;\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n};\n\n/**\n * Returns the default layer on which\n * all elements are drawn.\n *\n * @returns {SVGElement}\n */\nCanvas.prototype.getDefaultLayer = function() {\n  return this.getLayer(BASE_LAYER, PLANE_LAYER_INDEX);\n};\n\n/**\n * Returns a layer that is used to draw elements\n * or annotations on it.\n *\n * Non-existing layers retrieved through this method\n * will be created. During creation, the optional index\n * may be used to create layers below or above existing layers.\n * A layer with a certain index is always created above all\n * existing layers with the same index.\n *\n * @param {string} name\n * @param {number} index\n *\n * @returns {SVGElement}\n */\nCanvas.prototype.getLayer = function(name, index) {\n\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    layer = this._layers[name] = this._createLayer(name, index);\n  }\n\n  // throw an error if layer creation / retrival is\n  // requested on different index\n  if (typeof index !== 'undefined' && layer.index !== index) {\n    throw new Error('layer <' + name + '> already created at index <' + index + '>');\n  }\n\n  return layer.group;\n};\n\n/**\n * For a given index, return the number of layers that have a higher index and\n * are visible.\n *\n * This is used to determine the node a layer should be inserted at.\n *\n * @param {Number} index\n * @returns {Number}\n */\nCanvas.prototype._getChildIndex = function(index) {\n  return reduce(this._layers, function(childIndex, layer) {\n    if (layer.visible && index >= layer.index) {\n      childIndex++;\n    }\n\n    return childIndex;\n  }, 0);\n};\n\n/**\n * Creates a given layer and returns it.\n *\n * @param {string} name\n * @param {number} [index=0]\n *\n * @return {Object} layer descriptor with { index, group: SVGGroup }\n */\nCanvas.prototype._createLayer = function(name, index) {\n\n  if (typeof index === 'undefined') {\n    index = UTILITY_LAYER_INDEX;\n  }\n\n  var childIndex = this._getChildIndex(index);\n\n  return {\n    group: createGroup(this._viewport, 'layer-' + name, childIndex),\n    index: index,\n    visible: true\n  };\n};\n\n\n/**\n * Shows a given layer.\n *\n * @param {String} layer\n * @returns {SVGElement}\n */\nCanvas.prototype.showLayer = function(name) {\n\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    throw new Error('layer <' + name + '> does not exist');\n  }\n\n  var viewport = this._viewport;\n  var group = layer.group;\n  var index = layer.index;\n\n  if (layer.visible) {\n    return group;\n  }\n\n  var childIndex = this._getChildIndex(index);\n\n  viewport.insertBefore(group, viewport.childNodes[childIndex] || null);\n\n  layer.visible = true;\n\n  return group;\n};\n\n/**\n * Hides a given layer.\n *\n * @param {String} layer\n * @returns {SVGElement}\n */\nCanvas.prototype.hideLayer = function(name) {\n\n  if (!name) {\n    throw new Error('must specify a name');\n  }\n\n  var layer = this._layers[name];\n\n  if (!layer) {\n    throw new Error('layer <' + name + '> does not exist');\n  }\n\n  var group = layer.group;\n\n  if (!layer.visible) {\n    return group;\n  }\n\n  svgRemove(group);\n\n  layer.visible = false;\n\n  return group;\n};\n\n\nCanvas.prototype._removeLayer = function(name) {\n\n  var layer = this._layers[name];\n\n  if (layer) {\n    delete this._layers[name];\n\n    svgRemove(layer.group);\n  }\n};\n\n/**\n * Returns the currently active layer. Can be null.\n *\n * @returns {SVGElement|null}\n */\nCanvas.prototype.getActiveLayer = function() {\n  var plane = this._findPlaneForRoot(this.getRootElement());\n\n  if (!plane) {\n    return null;\n  }\n\n  return plane.layer;\n};\n\n\n/**\n * Returns the plane which contains the given element.\n *\n * @param {string|djs.model.Base} element\n *\n * @return {djs.model.Base} root for element\n */\nCanvas.prototype.findRoot = function(element) {\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  if (!element) {\n    return;\n  }\n\n  var plane = this._findPlaneForRoot(\n    findRoot(element)\n  ) || {};\n\n  return plane.rootElement;\n};\n\n/**\n * Return a list of all root elements on the diagram.\n *\n * @return {djs.model.Root[]}\n */\nCanvas.prototype.getRootElements = function() {\n  return this._planes.map(function(plane) {\n    return plane.rootElement;\n  });\n};\n\nCanvas.prototype._findPlaneForRoot = function(rootElement) {\n  return find(this._planes, function(plane) {\n    return plane.rootElement === rootElement;\n  });\n};\n\n\n/**\n * Returns the html element that encloses the\n * drawing canvas.\n *\n * @return {DOMNode}\n */\nCanvas.prototype.getContainer = function() {\n  return this._container;\n};\n\n\n// markers //////////////////////\n\nCanvas.prototype._updateMarker = function(element, marker, add) {\n  var container;\n\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  // we need to access all\n  container = this._elementRegistry._elements[element.id];\n\n  if (!container) {\n    return;\n  }\n\n  forEach([ container.gfx, container.secondaryGfx ], function(gfx) {\n    if (gfx) {\n\n      // invoke either addClass or removeClass based on mode\n      if (add) {\n        svgClasses(gfx).add(marker);\n      } else {\n        svgClasses(gfx).remove(marker);\n      }\n    }\n  });\n\n  /**\n   * An event indicating that a marker has been updated for an element\n   *\n   * @event element.marker.update\n   * @type {Object}\n   * @property {djs.model.Element} element the shape\n   * @property {Object} gfx the graphical representation of the shape\n   * @property {string} marker\n   * @property {boolean} add true if the marker was added, false if it got removed\n   */\n  this._eventBus.fire('element.marker.update', { element: element, gfx: container.gfx, marker: marker, add: !!add });\n};\n\n\n/**\n * Adds a marker to an element (basically a css class).\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @example\n * canvas.addMarker('foo', 'some-marker');\n *\n * var fooGfx = canvas.getGraphics('foo');\n *\n * fooGfx; // <g class=\"... some-marker\"> ... </g>\n *\n * @param {string|djs.model.Base} element\n * @param {string} marker\n */\nCanvas.prototype.addMarker = function(element, marker) {\n  this._updateMarker(element, marker, true);\n};\n\n\n/**\n * Remove a marker from an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.removeMarker = function(element, marker) {\n  this._updateMarker(element, marker, false);\n};\n\n/**\n * Check the existence of a marker on element.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.hasMarker = function(element, marker) {\n  if (!element.id) {\n    element = this._elementRegistry.get(element);\n  }\n\n  var gfx = this.getGraphics(element);\n\n  return svgClasses(gfx).has(marker);\n};\n\n/**\n * Toggles a marker on an element.\n *\n * Fires the element.marker.update event, making it possible to\n * integrate extension into the marker life-cycle, too.\n *\n * @param  {string|djs.model.Base} element\n * @param  {string} marker\n */\nCanvas.prototype.toggleMarker = function(element, marker) {\n  if (this.hasMarker(element, marker)) {\n    this.removeMarker(element, marker);\n  } else {\n    this.addMarker(element, marker);\n  }\n};\n\n/**\n * Returns the current root element.\n *\n * Supports two different modes for handling root elements:\n *\n * 1. if no root element has been added before, an implicit root will be added\n * and returned. This is used in applications that don't require explicit\n * root elements.\n *\n * 2. when root elements have been added before calling `getRootElement`,\n * root elements can be null. This is used for applications that want to manage\n * root elements themselves.\n *\n * @returns {Object|djs.model.Root|null} rootElement.\n */\nCanvas.prototype.getRootElement = function() {\n  var rootElement = this._rootElement;\n\n  // can return null if root elements are present but none was set yet\n  if (rootElement || this._planes.length) {\n    return rootElement;\n  }\n\n  return this.setRootElement(this.addRootElement(null));\n};\n\n/**\n * Adds a given root element and returns it.\n *\n * @param {Object|djs.model.Root} rootElement\n *\n * @return {Object|djs.model.Root} rootElement\n */\n\nCanvas.prototype.addRootElement = function(rootElement) {\n  var idx = this._rootsIdx++;\n\n  if (!rootElement) {\n    rootElement = {\n      id: '__implicitroot_' + idx,\n      children: [],\n      isImplicit: true\n    };\n  }\n\n  var layerName = rootElement.layer = 'root-' + idx;\n\n  this._ensureValid('root', rootElement);\n\n  var layer = this.getLayer(layerName, PLANE_LAYER_INDEX);\n\n  this.hideLayer(layerName);\n\n  this._addRoot(rootElement, layer);\n\n  this._planes.push({\n    rootElement: rootElement,\n    layer: layer\n  });\n\n  return rootElement;\n};\n\n/**\n * Removes a given rootElement and returns it.\n *\n * @param {djs.model.Root|String} rootElement\n *\n * @return {Object|djs.model.Root} rootElement\n */\nCanvas.prototype.removeRootElement = function(rootElement) {\n\n  if (typeof rootElement === 'string') {\n    rootElement = this._elementRegistry.get(rootElement);\n  }\n\n  var plane = this._findPlaneForRoot(rootElement);\n\n  if (!plane) {\n    return;\n  }\n\n  // hook up life-cycle events\n  this._removeRoot(rootElement);\n\n  // clean up layer\n  this._removeLayer(rootElement.layer);\n\n  // clean up plane\n  this._planes = this._planes.filter(function(plane) {\n    return plane.rootElement !== rootElement;\n  });\n\n  // clean up active root\n  if (this._rootElement === rootElement) {\n    this._rootElement = null;\n  }\n\n  return rootElement;\n};\n\n\n// root element handling //////////////////////\n\n/**\n * Sets a given element as the new root element for the canvas\n * and returns the new root element.\n *\n * @param {Object|djs.model.Root} rootElement\n *\n * @return {Object|djs.model.Root} new root element\n */\nCanvas.prototype.setRootElement = function(rootElement, override) {\n\n  if (isDefined(override)) {\n    throw new Error('override not supported');\n  }\n\n  if (rootElement === this._rootElement) {\n    return;\n  }\n\n  var plane;\n\n  if (!rootElement) {\n    throw new Error('rootElement required');\n  }\n\n  plane = this._findPlaneForRoot(rootElement);\n\n  // give set add semantics for backwards compatibility\n  if (!plane) {\n    rootElement = this.addRootElement(rootElement);\n  }\n\n  this._setRoot(rootElement);\n\n  return rootElement;\n};\n\n\nCanvas.prototype._removeRoot = function(element) {\n  var elementRegistry = this._elementRegistry,\n      eventBus = this._eventBus;\n\n  // simulate element remove event sequence\n  eventBus.fire('root.remove', { element: element });\n  eventBus.fire('root.removed', { element: element });\n\n  elementRegistry.remove(element);\n};\n\n\nCanvas.prototype._addRoot = function(element, gfx) {\n  var elementRegistry = this._elementRegistry,\n      eventBus = this._eventBus;\n\n  // resemble element add event sequence\n  eventBus.fire('root.add', { element: element });\n\n  elementRegistry.add(element, gfx);\n\n  eventBus.fire('root.added', { element: element, gfx: gfx });\n};\n\n\nCanvas.prototype._setRoot = function(rootElement, layer) {\n\n  var currentRoot = this._rootElement;\n\n  if (currentRoot) {\n\n    // un-associate previous root element <svg>\n    this._elementRegistry.updateGraphics(currentRoot, null, true);\n\n    // hide previous layer\n    this.hideLayer(currentRoot.layer);\n  }\n\n  if (rootElement) {\n\n    if (!layer) {\n      layer = this._findPlaneForRoot(rootElement).layer;\n    }\n\n    // associate element with <svg>\n    this._elementRegistry.updateGraphics(rootElement, this._svg, true);\n\n    // show root layer\n    this.showLayer(rootElement.layer);\n  }\n\n  this._rootElement = rootElement;\n\n  this._eventBus.fire('root.set', { element: rootElement });\n};\n\n// add functionality //////////////////////\n\nCanvas.prototype._ensureValid = function(type, element) {\n  if (!element.id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elementRegistry.get(element.id)) {\n    throw new Error('element <' + element.id + '> already exists');\n  }\n\n  var requiredAttrs = REQUIRED_MODEL_ATTRS[type];\n\n  var valid = every(requiredAttrs, function(attr) {\n    return typeof element[attr] !== 'undefined';\n  });\n\n  if (!valid) {\n    throw new Error(\n      'must supply { ' + requiredAttrs.join(', ') + ' } with ' + type);\n  }\n};\n\nCanvas.prototype._setParent = function(element, parent, parentIndex) {\n  collectionAdd(parent.children, element, parentIndex);\n  element.parent = parent;\n};\n\n/**\n * Adds an element to the canvas.\n *\n * This wires the parent <-> child relationship between the element and\n * a explicitly specified parent or an implicit root element.\n *\n * During add it emits the events\n *\n *  * <{type}.add> (element, parent)\n *  * <{type}.added> (element, gfx)\n *\n * Extensions may hook into these events to perform their magic.\n *\n * @param {string} type\n * @param {Object|djs.model.Base} element\n * @param {Object|djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {Object|djs.model.Base} the added element\n */\nCanvas.prototype._addElement = function(type, element, parent, parentIndex) {\n\n  parent = parent || this.getRootElement();\n\n  var eventBus = this._eventBus,\n      graphicsFactory = this._graphicsFactory;\n\n  this._ensureValid(type, element);\n\n  eventBus.fire(type + '.add', { element: element, parent: parent });\n\n  this._setParent(element, parent, parentIndex);\n\n  // create graphics\n  var gfx = graphicsFactory.create(type, element, parentIndex);\n\n  this._elementRegistry.add(element, gfx);\n\n  // update its visual\n  graphicsFactory.update(type, element, gfx);\n\n  eventBus.fire(type + '.added', { element: element, gfx: gfx });\n\n  return element;\n};\n\n/**\n * Adds a shape to the canvas\n *\n * @param {Object|djs.model.Shape} shape to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Shape} the added shape\n */\nCanvas.prototype.addShape = function(shape, parent, parentIndex) {\n  return this._addElement('shape', shape, parent, parentIndex);\n};\n\n/**\n * Adds a connection to the canvas\n *\n * @param {Object|djs.model.Connection} connection to add to the diagram\n * @param {djs.model.Base} [parent]\n * @param {number} [parentIndex]\n *\n * @return {djs.model.Connection} the added connection\n */\nCanvas.prototype.addConnection = function(connection, parent, parentIndex) {\n  return this._addElement('connection', connection, parent, parentIndex);\n};\n\n\n/**\n * Internal remove element\n */\nCanvas.prototype._removeElement = function(element, type) {\n\n  var elementRegistry = this._elementRegistry,\n      graphicsFactory = this._graphicsFactory,\n      eventBus = this._eventBus;\n\n  element = elementRegistry.get(element.id || element);\n\n  if (!element) {\n\n    // element was removed already\n    return;\n  }\n\n  eventBus.fire(type + '.remove', { element: element });\n\n  graphicsFactory.remove(element);\n\n  // unset parent <-> child relationship\n  collectionRemove(element.parent && element.parent.children, element);\n  element.parent = null;\n\n  eventBus.fire(type + '.removed', { element: element });\n\n  elementRegistry.remove(element);\n\n  return element;\n};\n\n\n/**\n * Removes a shape from the canvas\n *\n * @param {string|djs.model.Shape} shape or shape id to be removed\n *\n * @return {djs.model.Shape} the removed shape\n */\nCanvas.prototype.removeShape = function(shape) {\n\n  /**\n   * An event indicating that a shape is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.remove\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n\n  /**\n   * An event indicating that a shape has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event shape.removed\n   * @type {Object}\n   * @property {djs.model.Shape} element the shape descriptor\n   * @property {Object} gfx the graphical representation of the shape\n   */\n  return this._removeElement(shape, 'shape');\n};\n\n\n/**\n * Removes a connection from the canvas\n *\n * @param {string|djs.model.Connection} connection or connection id to be removed\n *\n * @return {djs.model.Connection} the removed connection\n */\nCanvas.prototype.removeConnection = function(connection) {\n\n  /**\n   * An event indicating that a connection is about to be removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.remove\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n\n  /**\n   * An event indicating that a connection has been removed from the canvas.\n   *\n   * @memberOf Canvas\n   *\n   * @event connection.removed\n   * @type {Object}\n   * @property {djs.model.Connection} element the connection descriptor\n   * @property {Object} gfx the graphical representation of the connection\n   */\n  return this._removeElement(connection, 'connection');\n};\n\n\n/**\n * Return the graphical object underlaying a certain diagram element\n *\n * @param {string|djs.model.Base} element descriptor of the element\n * @param {boolean} [secondary=false] whether to return the secondary connected element\n *\n * @return {SVGElement}\n */\nCanvas.prototype.getGraphics = function(element, secondary) {\n  return this._elementRegistry.getGraphics(element, secondary);\n};\n\n\n/**\n * Perform a viewbox update via a given change function.\n *\n * @param {Function} changeFn\n */\nCanvas.prototype._changeViewbox = function(changeFn) {\n\n  // notify others of the upcoming viewbox change\n  this._eventBus.fire('canvas.viewbox.changing');\n\n  // perform actual change\n  changeFn.apply(this);\n\n  // reset the cached viewbox so that\n  // a new get operation on viewbox or zoom\n  // triggers a viewbox re-computation\n  this._cachedViewbox = null;\n\n  // notify others of the change; this step\n  // may or may not be debounced\n  this._viewboxChanged();\n};\n\nCanvas.prototype._viewboxChanged = function() {\n  this._eventBus.fire('canvas.viewbox.changed', { viewbox: this.viewbox() });\n};\n\n\n/**\n * Gets or sets the view box of the canvas, i.e. the\n * area that is currently displayed.\n *\n * The getter may return a cached viewbox (if it is currently\n * changing). To force a recomputation, pass `false` as the first argument.\n *\n * @example\n *\n * canvas.viewbox({ x: 100, y: 100, width: 500, height: 500 })\n *\n * // sets the visible area of the diagram to (100|100) -> (600|100)\n * // and and scales it according to the diagram width\n *\n * var viewbox = canvas.viewbox(); // pass `false` to force recomputing the box.\n *\n * console.log(viewbox);\n * // {\n * //   inner: Dimensions,\n * //   outer: Dimensions,\n * //   scale,\n * //   x, y,\n * //   width, height\n * // }\n *\n * // if the current diagram is zoomed and scrolled, you may reset it to the\n * // default zoom via this method, too:\n *\n * var zoomedAndScrolledViewbox = canvas.viewbox();\n *\n * canvas.viewbox({\n *   x: 0,\n *   y: 0,\n *   width: zoomedAndScrolledViewbox.outer.width,\n *   height: zoomedAndScrolledViewbox.outer.height\n * });\n *\n * @param  {Object} [box] the new view box to set\n * @param  {number} box.x the top left X coordinate of the canvas visible in view box\n * @param  {number} box.y the top left Y coordinate of the canvas visible in view box\n * @param  {number} box.width the visible width\n * @param  {number} box.height\n *\n * @return {Object} the current view box\n */\nCanvas.prototype.viewbox = function(box) {\n\n  if (box === undefined && this._cachedViewbox) {\n    return this._cachedViewbox;\n  }\n\n  var viewport = this._viewport,\n      innerBox,\n      outerBox = this.getSize(),\n      matrix,\n      activeLayer,\n      transform,\n      scale,\n      x, y;\n\n  if (!box) {\n\n    // compute the inner box based on the\n    // diagrams active layer. This allows us to exclude\n    // external components, such as overlays\n\n    activeLayer = this._rootElement ? this.getActiveLayer() : null;\n    innerBox = activeLayer && activeLayer.getBBox() || {};\n\n    transform = svgTransform(viewport);\n    matrix = transform ? transform.matrix : createMatrix();\n    scale = round(matrix.a, 1000);\n\n    x = round(-matrix.e || 0, 1000);\n    y = round(-matrix.f || 0, 1000);\n\n    box = this._cachedViewbox = {\n      x: x ? x / scale : 0,\n      y: y ? y / scale : 0,\n      width: outerBox.width / scale,\n      height: outerBox.height / scale,\n      scale: scale,\n      inner: {\n        width: innerBox.width || 0,\n        height: innerBox.height || 0,\n        x: innerBox.x || 0,\n        y: innerBox.y || 0\n      },\n      outer: outerBox\n    };\n\n    return box;\n  } else {\n\n    this._changeViewbox(function() {\n      scale = Math.min(outerBox.width / box.width, outerBox.height / box.height);\n\n      var matrix = this._svg.createSVGMatrix()\n        .scale(scale)\n        .translate(-box.x, -box.y);\n\n      svgTransform(viewport, matrix);\n    });\n  }\n\n  return box;\n};\n\n\n/**\n * Gets or sets the scroll of the canvas.\n *\n * @param {Object} [delta] the new scroll to apply.\n *\n * @param {number} [delta.dx]\n * @param {number} [delta.dy]\n */\nCanvas.prototype.scroll = function(delta) {\n\n  var node = this._viewport;\n  var matrix = node.getCTM();\n\n  if (delta) {\n    this._changeViewbox(function() {\n      delta = assign({ dx: 0, dy: 0 }, delta || {});\n\n      matrix = this._svg.createSVGMatrix().translate(delta.dx, delta.dy).multiply(matrix);\n\n      setCTM(node, matrix);\n    });\n  }\n\n  return { x: matrix.e, y: matrix.f };\n};\n\n/**\n * Scrolls the viewbox to contain the given element.\n * Optionally specify a padding to be applied to the edges.\n *\n * @param {Object|String} [element] the element to scroll to.\n * @param {Object|Number} [padding=100] the padding to be applied. Can also specify top, bottom, left and right.\n *\n */\nCanvas.prototype.scrollToElement = function(element, padding) {\n  var defaultPadding = 100;\n\n  if (typeof element === 'string') {\n    element = this._elementRegistry.get(element);\n  }\n\n  // set to correct rootElement\n  var rootElement = this.findRoot(element);\n\n  if (rootElement !== this.getRootElement()) {\n    this.setRootElement(rootElement);\n  }\n\n  if (!padding) {\n    padding = {};\n  }\n  if (typeof padding === 'number') {\n    defaultPadding = padding;\n  }\n\n  padding = {\n    top: padding.top || defaultPadding,\n    right: padding.right || defaultPadding,\n    bottom: padding.bottom || defaultPadding,\n    left: padding.left || defaultPadding\n  };\n\n  var elementBounds = getBoundingBox(element),\n      elementTrbl = asTRBL(elementBounds),\n      viewboxBounds = this.viewbox(),\n      zoom = this.zoom(),\n      dx, dy;\n\n  // shrink viewboxBounds with padding\n  viewboxBounds.y += padding.top / zoom;\n  viewboxBounds.x += padding.left / zoom;\n  viewboxBounds.width -= (padding.right + padding.left) / zoom;\n  viewboxBounds.height -= (padding.bottom + padding.top) / zoom;\n\n  var viewboxTrbl = asTRBL(viewboxBounds);\n\n  var canFit = elementBounds.width < viewboxBounds.width && elementBounds.height < viewboxBounds.height;\n\n  if (!canFit) {\n\n    // top-left when element can't fit\n    dx = elementBounds.x - viewboxBounds.x;\n    dy = elementBounds.y - viewboxBounds.y;\n\n  } else {\n\n    var dRight = Math.max(0, elementTrbl.right - viewboxTrbl.right),\n        dLeft = Math.min(0, elementTrbl.left - viewboxTrbl.left),\n        dBottom = Math.max(0, elementTrbl.bottom - viewboxTrbl.bottom),\n        dTop = Math.min(0, elementTrbl.top - viewboxTrbl.top);\n\n    dx = dRight || dLeft;\n    dy = dBottom || dTop;\n\n  }\n\n  this.scroll({ dx: -dx * zoom, dy: -dy * zoom });\n};\n\n/**\n * Gets or sets the current zoom of the canvas, optionally zooming\n * to the specified position.\n *\n * The getter may return a cached zoom level. Call it with `false` as\n * the first argument to force recomputation of the current level.\n *\n * @param {string|number} [newScale] the new zoom level, either a number, i.e. 0.9,\n *                                   or `fit-viewport` to adjust the size to fit the current viewport\n * @param {string|Point} [center] the reference point { x: .., y: ..} to zoom to, 'auto' to zoom into mid or null\n *\n * @return {number} the current scale\n */\nCanvas.prototype.zoom = function(newScale, center) {\n\n  if (!newScale) {\n    return this.viewbox(newScale).scale;\n  }\n\n  if (newScale === 'fit-viewport') {\n    return this._fitViewport(center);\n  }\n\n  var outer,\n      matrix;\n\n  this._changeViewbox(function() {\n\n    if (typeof center !== 'object') {\n      outer = this.viewbox().outer;\n\n      center = {\n        x: outer.width / 2,\n        y: outer.height / 2\n      };\n    }\n\n    matrix = this._setZoom(newScale, center);\n  });\n\n  return round(matrix.a, 1000);\n};\n\nfunction setCTM(node, m) {\n  var mstr = 'matrix(' + m.a + ',' + m.b + ',' + m.c + ',' + m.d + ',' + m.e + ',' + m.f + ')';\n  node.setAttribute('transform', mstr);\n}\n\nCanvas.prototype._fitViewport = function(center) {\n\n  var vbox = this.viewbox(),\n      outer = vbox.outer,\n      inner = vbox.inner,\n      newScale,\n      newViewbox;\n\n  // display the complete diagram without zooming in.\n  // instead of relying on internal zoom, we perform a\n  // hard reset on the canvas viewbox to realize this\n  //\n  // if diagram does not need to be zoomed in, we focus it around\n  // the diagram origin instead\n\n  if (inner.x >= 0 &&\n      inner.y >= 0 &&\n      inner.x + inner.width <= outer.width &&\n      inner.y + inner.height <= outer.height &&\n      !center) {\n\n    newViewbox = {\n      x: 0,\n      y: 0,\n      width: Math.max(inner.width + inner.x, outer.width),\n      height: Math.max(inner.height + inner.y, outer.height)\n    };\n  } else {\n\n    newScale = Math.min(1, outer.width / inner.width, outer.height / inner.height);\n    newViewbox = {\n      x: inner.x + (center ? inner.width / 2 - outer.width / newScale / 2 : 0),\n      y: inner.y + (center ? inner.height / 2 - outer.height / newScale / 2 : 0),\n      width: outer.width / newScale,\n      height: outer.height / newScale\n    };\n  }\n\n  this.viewbox(newViewbox);\n\n  return this.viewbox(false).scale;\n};\n\n\nCanvas.prototype._setZoom = function(scale, center) {\n\n  var svg = this._svg,\n      viewport = this._viewport;\n\n  var matrix = svg.createSVGMatrix();\n  var point = svg.createSVGPoint();\n\n  var centerPoint,\n      originalPoint,\n      currentMatrix,\n      scaleMatrix,\n      newMatrix;\n\n  currentMatrix = viewport.getCTM();\n\n  var currentScale = currentMatrix.a;\n\n  if (center) {\n    centerPoint = assign(point, center);\n\n    // revert applied viewport transformations\n    originalPoint = centerPoint.matrixTransform(currentMatrix.inverse());\n\n    // create scale matrix\n    scaleMatrix = matrix\n      .translate(originalPoint.x, originalPoint.y)\n      .scale(1 / currentScale * scale)\n      .translate(-originalPoint.x, -originalPoint.y);\n\n    newMatrix = currentMatrix.multiply(scaleMatrix);\n  } else {\n    newMatrix = matrix.scale(scale);\n  }\n\n  setCTM(this._viewport, newMatrix);\n\n  return newMatrix;\n};\n\n\n/**\n * Returns the size of the canvas\n *\n * @return {Dimensions}\n */\nCanvas.prototype.getSize = function() {\n  return {\n    width: this._container.clientWidth,\n    height: this._container.clientHeight\n  };\n};\n\n\n/**\n * Return the absolute bounding box for the given element\n *\n * The absolute bounding box may be used to display overlays in the\n * callers (browser) coordinate system rather than the zoomed in/out\n * canvas coordinates.\n *\n * @param  {ElementDescriptor} element\n * @return {Bounds} the absolute bounding box\n */\nCanvas.prototype.getAbsoluteBBox = function(element) {\n  var vbox = this.viewbox();\n  var bbox;\n\n  // connection\n  // use svg bbox\n  if (element.waypoints) {\n    var gfx = this.getGraphics(element);\n\n    bbox = gfx.getBBox();\n  }\n\n  // shapes\n  // use data\n  else {\n    bbox = element;\n  }\n\n  var x = bbox.x * vbox.scale - vbox.x * vbox.scale;\n  var y = bbox.y * vbox.scale - vbox.y * vbox.scale;\n\n  var width = bbox.width * vbox.scale;\n  var height = bbox.height * vbox.scale;\n\n  return {\n    x: x,\n    y: y,\n    width: width,\n    height: height\n  };\n};\n\n/**\n * Fires an event in order other modules can react to the\n * canvas resizing\n */\nCanvas.prototype.resized = function() {\n\n  // force recomputation of view box\n  delete this._cachedViewbox;\n\n  this._eventBus.fire('canvas.resized');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}