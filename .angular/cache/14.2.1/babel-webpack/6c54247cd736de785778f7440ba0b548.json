{"ast":null,"code":"import { find, forEach, map } from 'min-dash';\nimport BpmnTreeWalker from './BpmnTreeWalker';\nimport { is } from '../util/ModelUtil';\n/**\n * The importBpmnDiagram result.\n *\n * @typedef {Object} ImportBPMNDiagramResult\n *\n * @property {Array<string>} warnings\n */\n\n/**\n* The importBpmnDiagram error.\n*\n* @typedef {Error} ImportBPMNDiagramError\n*\n* @property {Array<string>} warnings\n*/\n\n/**\n * Import the definitions into a diagram.\n *\n * Errors and warnings are reported through the specified callback.\n *\n * @param  {djs.Diagram} diagram\n * @param  {ModdleElement<Definitions>} definitions\n * @param  {ModdleElement<BPMNDiagram>} [bpmnDiagram] the diagram to be rendered\n * (if not provided, the first one will be rendered)\n *\n * Returns {Promise<ImportBPMNDiagramResult, ImportBPMNDiagramError>}\n */\n\nexport function importBpmnDiagram(diagram, definitions, bpmnDiagram) {\n  var importer, eventBus, translate, canvas;\n  var error,\n      warnings = [];\n  /**\n   * Walk the diagram semantically, importing (=drawing)\n   * all elements you encounter.\n   *\n   * @param {ModdleElement<Definitions>} definitions\n   * @param {ModdleElement<BPMNDiagram>} bpmnDiagram\n   */\n\n  function render(definitions, bpmnDiagram) {\n    var visitor = {\n      root: function (element, di) {\n        return importer.add(element, di);\n      },\n      element: function (element, di, parentShape) {\n        return importer.add(element, di, parentShape);\n      },\n      error: function (message, context) {\n        warnings.push({\n          message: message,\n          context: context\n        });\n      }\n    };\n    var walker = new BpmnTreeWalker(visitor, translate);\n    bpmnDiagram = bpmnDiagram || definitions.diagrams && definitions.diagrams[0];\n    var diagramsToImport = getDiagramsToImport(definitions, bpmnDiagram);\n\n    if (!diagramsToImport) {\n      throw new Error(translate('no diagram to display'));\n    } // traverse BPMN 2.0 document model,\n    // starting at definitions\n\n\n    forEach(diagramsToImport, function (diagram) {\n      walker.handleDefinitions(definitions, diagram);\n    });\n    var rootId = bpmnDiagram.plane.bpmnElement.id; // we do need to account for different ways we create root elements\n    // each nested imported <root> do have the `_plane` suffix, while\n    // the root <root> is found under the business object ID\n\n    canvas.setRootElement(canvas.findRoot(rootId + '_plane') || canvas.findRoot(rootId));\n  }\n\n  return new Promise(function (resolve, reject) {\n    try {\n      importer = diagram.get('bpmnImporter');\n      eventBus = diagram.get('eventBus');\n      translate = diagram.get('translate');\n      canvas = diagram.get('canvas');\n      eventBus.fire('import.render.start', {\n        definitions: definitions\n      });\n      render(definitions, bpmnDiagram);\n      eventBus.fire('import.render.complete', {\n        error: error,\n        warnings: warnings\n      });\n      return resolve({\n        warnings: warnings\n      });\n    } catch (e) {\n      e.warnings = warnings;\n      return reject(e);\n    }\n  });\n}\n/**\n * Returns all diagrams in the same hierarchy as the requested diagram.\n * Includes all parent and sub process diagrams.\n *\n * @param {Array} definitions\n * @param {Object} bpmnDiagram\n *\n * @returns {Array<Object>}\n */\n\nfunction getDiagramsToImport(definitions, bpmnDiagram) {\n  if (!bpmnDiagram) {\n    return;\n  }\n\n  var bpmnElement = bpmnDiagram.plane.bpmnElement,\n      rootElement = bpmnElement;\n\n  if (!is(bpmnElement, 'bpmn:Process') && !is(bpmnElement, 'bpmn:Collaboration')) {\n    rootElement = findRootProcess(bpmnElement);\n  } // in case the process is part of a collaboration, the plane references the\n  // collaboration, not the process\n\n\n  var collaboration;\n\n  if (is(rootElement, 'bpmn:Collaboration')) {\n    collaboration = rootElement;\n  } else {\n    collaboration = find(definitions.rootElements, function (element) {\n      if (!is(element, 'bpmn:Collaboration')) {\n        return;\n      }\n\n      return find(element.participants, function (participant) {\n        return participant.processRef === rootElement;\n      });\n    });\n  }\n\n  var rootElements = [rootElement]; // all collaboration processes can contain sub-diagrams\n\n  if (collaboration) {\n    rootElements = map(collaboration.participants, function (participant) {\n      return participant.processRef;\n    });\n    rootElements.push(collaboration);\n  }\n\n  var allChildren = selfAndAllFlowElements(rootElements); // if we have multiple diagrams referencing the same element, we\n  // use the first in the file\n\n  var diagramsToImport = [bpmnDiagram];\n  var handledElements = [bpmnElement];\n  forEach(definitions.diagrams, function (diagram) {\n    var businessObject = diagram.plane.bpmnElement;\n\n    if (allChildren.indexOf(businessObject) !== -1 && handledElements.indexOf(businessObject) === -1) {\n      diagramsToImport.push(diagram);\n      handledElements.push(businessObject);\n    }\n  });\n  return diagramsToImport;\n}\n\nfunction selfAndAllFlowElements(elements) {\n  var result = [];\n  forEach(elements, function (element) {\n    if (!element) {\n      return;\n    }\n\n    result.push(element);\n    result = result.concat(selfAndAllFlowElements(element.flowElements));\n  });\n  return result;\n}\n\nfunction findRootProcess(element) {\n  var parent = element;\n\n  while (parent) {\n    if (is(parent, 'bpmn:Process')) {\n      return parent;\n    }\n\n    parent = parent.$parent;\n  }\n}","map":{"version":3,"names":["find","forEach","map","BpmnTreeWalker","is","importBpmnDiagram","diagram","definitions","bpmnDiagram","importer","eventBus","translate","canvas","error","warnings","render","visitor","root","element","di","add","parentShape","message","context","push","walker","diagrams","diagramsToImport","getDiagramsToImport","Error","handleDefinitions","rootId","plane","bpmnElement","id","setRootElement","findRoot","Promise","resolve","reject","get","fire","e","rootElement","findRootProcess","collaboration","rootElements","participants","participant","processRef","allChildren","selfAndAllFlowElements","handledElements","businessObject","indexOf","elements","result","concat","flowElements","parent","$parent"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/import/Importer.js"],"sourcesContent":["import {\n  find,\n  forEach,\n  map\n} from 'min-dash';\n\nimport BpmnTreeWalker from './BpmnTreeWalker';\n\nimport { is } from '../util/ModelUtil';\n\n\n/**\n * The importBpmnDiagram result.\n *\n * @typedef {Object} ImportBPMNDiagramResult\n *\n * @property {Array<string>} warnings\n */\n\n/**\n* The importBpmnDiagram error.\n*\n* @typedef {Error} ImportBPMNDiagramError\n*\n* @property {Array<string>} warnings\n*/\n\n/**\n * Import the definitions into a diagram.\n *\n * Errors and warnings are reported through the specified callback.\n *\n * @param  {djs.Diagram} diagram\n * @param  {ModdleElement<Definitions>} definitions\n * @param  {ModdleElement<BPMNDiagram>} [bpmnDiagram] the diagram to be rendered\n * (if not provided, the first one will be rendered)\n *\n * Returns {Promise<ImportBPMNDiagramResult, ImportBPMNDiagramError>}\n */\nexport function importBpmnDiagram(diagram, definitions, bpmnDiagram) {\n\n  var importer,\n      eventBus,\n      translate,\n      canvas;\n\n  var error,\n      warnings = [];\n\n  /**\n   * Walk the diagram semantically, importing (=drawing)\n   * all elements you encounter.\n   *\n   * @param {ModdleElement<Definitions>} definitions\n   * @param {ModdleElement<BPMNDiagram>} bpmnDiagram\n   */\n  function render(definitions, bpmnDiagram) {\n\n    var visitor = {\n\n      root: function(element, di) {\n        return importer.add(element, di);\n      },\n\n      element: function(element, di, parentShape) {\n        return importer.add(element, di, parentShape);\n      },\n\n      error: function(message, context) {\n        warnings.push({ message: message, context: context });\n      }\n    };\n\n    var walker = new BpmnTreeWalker(visitor, translate);\n\n\n    bpmnDiagram = bpmnDiagram || (definitions.diagrams && definitions.diagrams[0]);\n\n    var diagramsToImport = getDiagramsToImport(definitions, bpmnDiagram);\n\n    if (!diagramsToImport) {\n      throw new Error(translate('no diagram to display'));\n    }\n\n    // traverse BPMN 2.0 document model,\n    // starting at definitions\n    forEach(diagramsToImport, function(diagram) {\n      walker.handleDefinitions(definitions, diagram);\n    });\n\n    var rootId = bpmnDiagram.plane.bpmnElement.id;\n\n    // we do need to account for different ways we create root elements\n    // each nested imported <root> do have the `_plane` suffix, while\n    // the root <root> is found under the business object ID\n    canvas.setRootElement(\n      canvas.findRoot(rootId + '_plane') || canvas.findRoot(rootId)\n    );\n  }\n\n  return new Promise(function(resolve, reject) {\n    try {\n      importer = diagram.get('bpmnImporter');\n      eventBus = diagram.get('eventBus');\n      translate = diagram.get('translate');\n      canvas = diagram.get('canvas');\n\n      eventBus.fire('import.render.start', { definitions: definitions });\n\n      render(definitions, bpmnDiagram);\n\n      eventBus.fire('import.render.complete', {\n        error: error,\n        warnings: warnings\n      });\n\n      return resolve({ warnings: warnings });\n    } catch (e) {\n\n      e.warnings = warnings;\n      return reject(e);\n    }\n  });\n}\n\n/**\n * Returns all diagrams in the same hierarchy as the requested diagram.\n * Includes all parent and sub process diagrams.\n *\n * @param {Array} definitions\n * @param {Object} bpmnDiagram\n *\n * @returns {Array<Object>}\n */\nfunction getDiagramsToImport(definitions, bpmnDiagram) {\n  if (!bpmnDiagram) {\n    return;\n  }\n\n  var bpmnElement = bpmnDiagram.plane.bpmnElement,\n      rootElement = bpmnElement;\n\n  if (!is(bpmnElement, 'bpmn:Process') && !is(bpmnElement, 'bpmn:Collaboration')) {\n    rootElement = findRootProcess(bpmnElement);\n  }\n\n  // in case the process is part of a collaboration, the plane references the\n  // collaboration, not the process\n  var collaboration;\n\n  if (is(rootElement, 'bpmn:Collaboration')) {\n    collaboration = rootElement;\n  } else {\n    collaboration = find(definitions.rootElements, function(element) {\n      if (!is(element, 'bpmn:Collaboration')) {\n        return;\n      }\n\n      return find(element.participants, function(participant) {\n        return participant.processRef === rootElement;\n      });\n    });\n  }\n\n  var rootElements = [ rootElement ];\n\n  // all collaboration processes can contain sub-diagrams\n  if (collaboration) {\n    rootElements = map(collaboration.participants, function(participant) {\n      return participant.processRef;\n    });\n\n    rootElements.push(collaboration);\n  }\n\n  var allChildren = selfAndAllFlowElements(rootElements);\n\n  // if we have multiple diagrams referencing the same element, we\n  // use the first in the file\n  var diagramsToImport = [ bpmnDiagram ];\n  var handledElements = [ bpmnElement ];\n\n  forEach(definitions.diagrams, function(diagram) {\n    var businessObject = diagram.plane.bpmnElement;\n\n    if (\n      allChildren.indexOf(businessObject) !== -1 &&\n      handledElements.indexOf(businessObject) === -1\n    ) {\n      diagramsToImport.push(diagram);\n      handledElements.push(businessObject);\n    }\n  });\n\n\n  return diagramsToImport;\n}\n\nfunction selfAndAllFlowElements(elements) {\n  var result = [];\n\n  forEach(elements, function(element) {\n    if (!element) {\n      return;\n    }\n\n    result.push(element);\n\n    result = result.concat(selfAndAllFlowElements(element.flowElements));\n  });\n\n  return result;\n}\n\nfunction findRootProcess(element) {\n  var parent = element;\n\n  while (parent) {\n    if (is(parent, 'bpmn:Process')) {\n      return parent;\n    }\n\n    parent = parent.$parent;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}