{"ast":null,"code":"import { setLabel, getLabel } from '../LabelUtil';\nimport { getExternalLabelMid, isLabelExternal, hasExternalLabel, isLabel } from '../../../util/LabelUtil';\nimport { getDi, is } from '../../../util/ModelUtil';\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n/**\n * A handler that updates the text of a BPMN element.\n */\n\nexport default function UpdateLabelHandler(modeling, textRenderer, bpmnFactory) {\n  /**\n   * Creates an empty `diLabel` attribute for embedded labels.\n   *\n   * @param {djs.model.Base} element\n   * @param {string} text\n   */\n  function ensureInternalLabelDi(element, text) {\n    if (isLabelExternal(element)) {\n      return;\n    }\n\n    var di = getDi(element);\n\n    if (text && !di.label) {\n      di.label = bpmnFactory.create('bpmndi:BPMNLabel');\n    }\n\n    if (!text && di.label) {\n      delete di.label;\n    }\n  }\n  /**\n   * Set the label and return the changed elements.\n   *\n   * Element parameter can be label itself or connection (i.e. sequence flow).\n   *\n   * @param {djs.model.Base} element\n   * @param {string} text\n   */\n\n\n  function setText(element, text) {\n    // external label if present\n    var label = element.label || element;\n    var labelTarget = element.labelTarget || element;\n    setLabel(label, text, labelTarget !== label);\n    ensureInternalLabelDi(element, text);\n    return [label, labelTarget];\n  }\n\n  function preExecute(ctx) {\n    var element = ctx.element,\n        businessObject = element.businessObject,\n        newLabel = ctx.newLabel;\n\n    if (!isLabel(element) && isLabelExternal(element) && !hasExternalLabel(element) && !isEmptyText(newLabel)) {\n      // create label\n      var paddingTop = 7;\n      var labelCenter = getExternalLabelMid(element);\n      labelCenter = {\n        x: labelCenter.x,\n        y: labelCenter.y + paddingTop\n      };\n      modeling.createLabel(element, labelCenter, {\n        id: businessObject.id + '_label',\n        businessObject: businessObject,\n        di: element.di\n      });\n    }\n  }\n\n  function execute(ctx) {\n    ctx.oldLabel = getLabel(ctx.element);\n    return setText(ctx.element, ctx.newLabel);\n  }\n\n  function revert(ctx) {\n    return setText(ctx.element, ctx.oldLabel);\n  }\n\n  function postExecute(ctx) {\n    var element = ctx.element,\n        label = element.label || element,\n        newLabel = ctx.newLabel,\n        newBounds = ctx.newBounds,\n        hints = ctx.hints || {}; // ignore internal labels for elements except text annotations\n\n    if (!isLabel(label) && !is(label, 'bpmn:TextAnnotation')) {\n      return;\n    }\n\n    if (isLabel(label) && isEmptyText(newLabel)) {\n      if (hints.removeShape !== false) {\n        modeling.removeShape(label, {\n          unsetLabel: false\n        });\n      }\n\n      return;\n    }\n\n    var text = getLabel(label); // resize element based on label _or_ pre-defined bounds\n\n    if (typeof newBounds === 'undefined') {\n      newBounds = textRenderer.getExternalLabelBounds(label, text);\n    } // setting newBounds to false or _null_ will\n    // disable the postExecute resize operation\n\n\n    if (newBounds) {\n      modeling.resizeShape(label, newBounds, NULL_DIMENSIONS);\n    }\n  } // API\n\n\n  this.preExecute = preExecute;\n  this.execute = execute;\n  this.revert = revert;\n  this.postExecute = postExecute;\n}\nUpdateLabelHandler.$inject = ['modeling', 'textRenderer', 'bpmnFactory']; // helpers ///////////////////////\n\nfunction isEmptyText(label) {\n  return !label || !label.trim();\n}","map":{"version":3,"names":["setLabel","getLabel","getExternalLabelMid","isLabelExternal","hasExternalLabel","isLabel","getDi","is","NULL_DIMENSIONS","width","height","UpdateLabelHandler","modeling","textRenderer","bpmnFactory","ensureInternalLabelDi","element","text","di","label","create","setText","labelTarget","preExecute","ctx","businessObject","newLabel","isEmptyText","paddingTop","labelCenter","x","y","createLabel","id","execute","oldLabel","revert","postExecute","newBounds","hints","removeShape","unsetLabel","getExternalLabelBounds","resizeShape","$inject","trim"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/label-editing/cmd/UpdateLabelHandler.js"],"sourcesContent":["import {\n  setLabel,\n  getLabel\n} from '../LabelUtil';\n\nimport {\n  getExternalLabelMid,\n  isLabelExternal,\n  hasExternalLabel,\n  isLabel\n} from '../../../util/LabelUtil';\n\nimport {\n  getDi,\n  is\n} from '../../../util/ModelUtil';\n\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n\n\n/**\n * A handler that updates the text of a BPMN element.\n */\nexport default function UpdateLabelHandler(modeling, textRenderer, bpmnFactory) {\n\n  /**\n   * Creates an empty `diLabel` attribute for embedded labels.\n   *\n   * @param {djs.model.Base} element\n   * @param {string} text\n   */\n  function ensureInternalLabelDi(element, text) {\n    if (isLabelExternal(element)) {\n      return;\n    }\n\n    var di = getDi(element);\n\n    if (text && !di.label) {\n      di.label = bpmnFactory.create('bpmndi:BPMNLabel');\n    }\n\n    if (!text && di.label) {\n      delete di.label;\n    }\n  }\n\n\n  /**\n   * Set the label and return the changed elements.\n   *\n   * Element parameter can be label itself or connection (i.e. sequence flow).\n   *\n   * @param {djs.model.Base} element\n   * @param {string} text\n   */\n  function setText(element, text) {\n\n    // external label if present\n    var label = element.label || element;\n\n    var labelTarget = element.labelTarget || element;\n\n    setLabel(label, text, labelTarget !== label);\n\n    ensureInternalLabelDi(element, text);\n\n    return [ label, labelTarget ];\n  }\n\n  function preExecute(ctx) {\n    var element = ctx.element,\n        businessObject = element.businessObject,\n        newLabel = ctx.newLabel;\n\n    if (!isLabel(element)\n        && isLabelExternal(element)\n        && !hasExternalLabel(element)\n        && !isEmptyText(newLabel)) {\n\n      // create label\n      var paddingTop = 7;\n\n      var labelCenter = getExternalLabelMid(element);\n\n      labelCenter = {\n        x: labelCenter.x,\n        y: labelCenter.y + paddingTop\n      };\n\n      modeling.createLabel(element, labelCenter, {\n        id: businessObject.id + '_label',\n        businessObject: businessObject,\n        di: element.di\n      });\n    }\n  }\n\n  function execute(ctx) {\n    ctx.oldLabel = getLabel(ctx.element);\n    return setText(ctx.element, ctx.newLabel);\n  }\n\n  function revert(ctx) {\n    return setText(ctx.element, ctx.oldLabel);\n  }\n\n  function postExecute(ctx) {\n    var element = ctx.element,\n        label = element.label || element,\n        newLabel = ctx.newLabel,\n        newBounds = ctx.newBounds,\n        hints = ctx.hints || {};\n\n    // ignore internal labels for elements except text annotations\n    if (!isLabel(label) && !is(label, 'bpmn:TextAnnotation')) {\n      return;\n    }\n\n    if (isLabel(label) && isEmptyText(newLabel)) {\n\n      if (hints.removeShape !== false) {\n        modeling.removeShape(label, { unsetLabel: false });\n      }\n\n      return;\n    }\n\n    var text = getLabel(label);\n\n    // resize element based on label _or_ pre-defined bounds\n    if (typeof newBounds === 'undefined') {\n      newBounds = textRenderer.getExternalLabelBounds(label, text);\n    }\n\n    // setting newBounds to false or _null_ will\n    // disable the postExecute resize operation\n    if (newBounds) {\n      modeling.resizeShape(label, newBounds, NULL_DIMENSIONS);\n    }\n  }\n\n  // API\n\n  this.preExecute = preExecute;\n  this.execute = execute;\n  this.revert = revert;\n  this.postExecute = postExecute;\n}\n\nUpdateLabelHandler.$inject = [\n  'modeling',\n  'textRenderer',\n  'bpmnFactory'\n];\n\n\n// helpers ///////////////////////\n\nfunction isEmptyText(label) {\n  return !label || !label.trim();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}