{"ast":null,"code":"import { assign, forEach } from 'min-dash';\n/**\n * A handler that toggles the collapsed state of an element\n * and the visibility of all its children.\n *\n * @param {Modeling} modeling\n */\n\nexport default function ToggleShapeCollapseHandler(modeling) {\n  this._modeling = modeling;\n}\nToggleShapeCollapseHandler.$inject = ['modeling'];\n\nToggleShapeCollapseHandler.prototype.execute = function (context) {\n  var shape = context.shape,\n      children = shape.children; // recursively remember previous visibility of children\n\n  context.oldChildrenVisibility = getElementsVisibilityRecursive(children); // toggle state\n\n  shape.collapsed = !shape.collapsed; // recursively hide/show children\n\n  var result = setHiddenRecursive(children, shape.collapsed);\n  return [shape].concat(result);\n};\n\nToggleShapeCollapseHandler.prototype.revert = function (context) {\n  var shape = context.shape,\n      oldChildrenVisibility = context.oldChildrenVisibility;\n  var children = shape.children; // recursively set old visability of children\n\n  var result = restoreVisibilityRecursive(children, oldChildrenVisibility); // retoggle state\n\n  shape.collapsed = !shape.collapsed;\n  return [shape].concat(result);\n}; // helpers //////////////////////\n\n/**\n * Return a map { elementId -> hiddenState}.\n *\n * @param {Array<djs.model.Shape>} elements\n *\n * @return {Object}\n */\n\n\nfunction getElementsVisibilityRecursive(elements) {\n  var result = {};\n  forEach(elements, function (element) {\n    result[element.id] = element.hidden;\n\n    if (element.children) {\n      result = assign({}, result, getElementsVisibilityRecursive(element.children));\n    }\n  });\n  return result;\n}\n\nfunction setHiddenRecursive(elements, newHidden) {\n  var result = [];\n  forEach(elements, function (element) {\n    element.hidden = newHidden;\n    result = result.concat(element);\n\n    if (element.children) {\n      result = result.concat(setHiddenRecursive(element.children, element.collapsed || newHidden));\n    }\n  });\n  return result;\n}\n\nfunction restoreVisibilityRecursive(elements, lastState) {\n  var result = [];\n  forEach(elements, function (element) {\n    element.hidden = lastState[element.id];\n    result = result.concat(element);\n\n    if (element.children) {\n      result = result.concat(restoreVisibilityRecursive(element.children, lastState));\n    }\n  });\n  return result;\n}","map":{"version":3,"names":["assign","forEach","ToggleShapeCollapseHandler","modeling","_modeling","$inject","prototype","execute","context","shape","children","oldChildrenVisibility","getElementsVisibilityRecursive","collapsed","result","setHiddenRecursive","concat","revert","restoreVisibilityRecursive","elements","element","id","hidden","newHidden","lastState"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/modeling/cmd/ToggleShapeCollapseHandler.js"],"sourcesContent":["import {\n  assign,\n  forEach\n} from 'min-dash';\n\n/**\n * A handler that toggles the collapsed state of an element\n * and the visibility of all its children.\n *\n * @param {Modeling} modeling\n */\nexport default function ToggleShapeCollapseHandler(modeling) {\n  this._modeling = modeling;\n}\n\nToggleShapeCollapseHandler.$inject = [ 'modeling' ];\n\n\nToggleShapeCollapseHandler.prototype.execute = function(context) {\n\n  var shape = context.shape,\n      children = shape.children;\n\n  // recursively remember previous visibility of children\n  context.oldChildrenVisibility = getElementsVisibilityRecursive(children);\n\n  // toggle state\n  shape.collapsed = !shape.collapsed;\n\n  // recursively hide/show children\n  var result = setHiddenRecursive(children, shape.collapsed);\n\n  return [ shape ].concat(result);\n};\n\n\nToggleShapeCollapseHandler.prototype.revert = function(context) {\n\n  var shape = context.shape,\n      oldChildrenVisibility = context.oldChildrenVisibility;\n\n  var children = shape.children;\n\n  // recursively set old visability of children\n  var result = restoreVisibilityRecursive(children, oldChildrenVisibility);\n\n  // retoggle state\n  shape.collapsed = !shape.collapsed;\n\n  return [ shape ].concat(result);\n};\n\n\n// helpers //////////////////////\n\n/**\n * Return a map { elementId -> hiddenState}.\n *\n * @param {Array<djs.model.Shape>} elements\n *\n * @return {Object}\n */\nfunction getElementsVisibilityRecursive(elements) {\n\n  var result = {};\n\n  forEach(elements, function(element) {\n    result[element.id] = element.hidden;\n\n    if (element.children) {\n      result = assign({}, result, getElementsVisibilityRecursive(element.children));\n    }\n  });\n\n  return result;\n}\n\n\nfunction setHiddenRecursive(elements, newHidden) {\n  var result = [];\n  forEach(elements, function(element) {\n    element.hidden = newHidden;\n\n    result = result.concat(element);\n\n    if (element.children) {\n      result = result.concat(setHiddenRecursive(element.children, element.collapsed || newHidden));\n    }\n  });\n\n  return result;\n}\n\nfunction restoreVisibilityRecursive(elements, lastState) {\n  var result = [];\n  forEach(elements, function(element) {\n    element.hidden = lastState[element.id];\n\n    result = result.concat(element);\n\n    if (element.children) {\n      result = result.concat(restoreVisibilityRecursive(element.children, lastState));\n    }\n  });\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}