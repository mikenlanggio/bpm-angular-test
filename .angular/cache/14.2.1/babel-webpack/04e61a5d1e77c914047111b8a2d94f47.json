{"ast":null,"code":"import { pick, assign, filter, forEach, isArray, isUndefined, has } from 'min-dash';\nimport { is, getBusinessObject } from '../../util/ModelUtil';\nimport { isAny } from '../modeling/util/ModelingUtil';\nimport { isExpanded, isEventSubProcess } from '../../util/DiUtil';\nimport { getPropertyNames } from '../copy-paste/ModdleCopy';\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [properties];\n  }\n\n  forEach(properties, function (property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\n\nvar CUSTOM_PROPERTIES = ['cancelActivity', 'instantiate', 'eventGatewayType', 'triggeredByEvent', 'isInterrupting'];\n/**\n * Check if element should be collapsed or expanded.\n */\n\nfunction shouldToggleCollapsed(element, targetElement) {\n  var oldCollapsed = element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element);\n  var targetCollapsed;\n\n  if (targetElement && (has(targetElement, 'collapsed') || has(targetElement, 'isExpanded'))) {\n    // property is explicitly set so use it\n    targetCollapsed = has(targetElement, 'collapsed') ? targetElement.collapsed : !targetElement.isExpanded;\n  } else {\n    // keep old state\n    targetCollapsed = oldCollapsed;\n  }\n\n  if (oldCollapsed !== targetCollapsed) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * This module takes care of replacing BPMN elements\n */\n\n\nexport default function BpmnReplace(bpmnFactory, elementFactory, moddleCopy, modeling, replace, rules, selection) {\n  /**\n   * Prepares a new business object for the replacement element\n   * and triggers the replace operation.\n   *\n   * @param  {djs.model.Base} element\n   * @param  {Object} target\n   * @param  {Object} [hints]\n   *\n   * @return {djs.model.Base} the newly created element\n   */\n  function replaceElement(element, target, hints) {\n    hints = hints || {};\n    var type = target.type,\n        oldBusinessObject = element.businessObject;\n\n    if (isSubProcess(oldBusinessObject) && type === 'bpmn:SubProcess') {\n      if (shouldToggleCollapsed(element, target)) {\n        // expanding or collapsing process\n        modeling.toggleCollapse(element);\n        return element;\n      }\n    }\n\n    var newBusinessObject = bpmnFactory.create(type);\n    var newElement = {\n      type: type,\n      businessObject: newBusinessObject\n    };\n    newElement.di = {}; // colors will be set to DI\n\n    copyProperties(element.di, newElement.di, ['fill', 'stroke', 'background-color', 'border-color', 'color']);\n    var elementProps = getPropertyNames(oldBusinessObject.$descriptor),\n        newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),\n        copyProps = intersection(elementProps, newElementProps); // initialize special properties defined in target definition\n\n    assign(newBusinessObject, pick(target, CUSTOM_PROPERTIES));\n    var properties = filter(copyProps, function (propertyName) {\n      // copying event definitions, unless we replace\n      if (propertyName === 'eventDefinitions') {\n        return hasEventDefinition(element, target.eventDefinitionType);\n      } // retain loop characteristics if the target element\n      // is not an event sub process\n\n\n      if (propertyName === 'loopCharacteristics') {\n        return !isEventSubProcess(newBusinessObject);\n      } // so the applied properties from 'target' don't get lost\n\n\n      if (has(newBusinessObject, propertyName)) {\n        return false;\n      }\n\n      if (propertyName === 'processRef' && target.isExpanded === false) {\n        return false;\n      }\n\n      if (propertyName === 'triggeredByEvent') {\n        return false;\n      }\n\n      return true;\n    });\n    newBusinessObject = moddleCopy.copyElement(oldBusinessObject, newBusinessObject, properties); // initialize custom BPMN extensions\n\n    if (target.eventDefinitionType) {\n      // only initialize with new eventDefinition\n      // if we did not set an event definition yet,\n      // i.e. because we copied it\n      if (!hasEventDefinition(newBusinessObject, target.eventDefinitionType)) {\n        newElement.eventDefinitionType = target.eventDefinitionType;\n        newElement.eventDefinitionAttrs = target.eventDefinitionAttrs;\n      }\n    }\n\n    if (is(oldBusinessObject, 'bpmn:Activity')) {\n      if (isSubProcess(oldBusinessObject)) {\n        // no toggeling, so keep old state\n        newElement.isExpanded = isExpanded(element);\n      } // else if property is explicitly set, use it\n      else if (target && has(target, 'isExpanded')) {\n        newElement.isExpanded = target.isExpanded; // assign default size of new expanded element\n\n        var defaultSize = elementFactory.getDefaultSize(newBusinessObject, {\n          isExpanded: newElement.isExpanded\n        });\n        newElement.width = defaultSize.width;\n        newElement.height = defaultSize.height; // keep element centered\n\n        newElement.x = element.x - (newElement.width - element.width) / 2;\n        newElement.y = element.y - (newElement.height - element.height) / 2;\n      } // TODO: need also to respect min/max Size\n      // copy size, from an expanded subprocess to an expanded alternative subprocess\n      // except bpmn:Task, because Task is always expanded\n\n\n      if (isExpanded(element) && !is(oldBusinessObject, 'bpmn:Task') && newElement.isExpanded) {\n        newElement.width = element.width;\n        newElement.height = element.height;\n      }\n    } // remove children if not expanding sub process\n\n\n    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {\n      hints.moveChildren = false;\n    } // transform collapsed/expanded pools\n\n\n    if (is(oldBusinessObject, 'bpmn:Participant')) {\n      // create expanded pool\n      if (target.isExpanded === true) {\n        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n      } else {\n        // remove children when transforming to collapsed pool\n        hints.moveChildren = false;\n      } // apply same width and default height\n\n\n      newElement.width = element.width;\n      newElement.height = elementFactory.getDefaultSize(newElement).height;\n    }\n\n    if (!rules.allowed('shape.resize', {\n      shape: newBusinessObject\n    })) {\n      newElement.height = elementFactory.getDefaultSize(newElement).height;\n      newElement.width = elementFactory.getDefaultSize(newElement).width;\n    }\n\n    newBusinessObject.name = oldBusinessObject.name; // retain default flow's reference between inclusive <-> exclusive gateways and activities\n\n    if (isAny(oldBusinessObject, ['bpmn:ExclusiveGateway', 'bpmn:InclusiveGateway', 'bpmn:Activity']) && isAny(newBusinessObject, ['bpmn:ExclusiveGateway', 'bpmn:InclusiveGateway', 'bpmn:Activity'])) {\n      newBusinessObject.default = oldBusinessObject.default;\n    }\n\n    if (target.host && !is(oldBusinessObject, 'bpmn:BoundaryEvent') && is(newBusinessObject, 'bpmn:BoundaryEvent')) {\n      newElement.host = target.host;\n    } // The DataStoreReference element is 14px wider than the DataObjectReference element\n    // This ensures that they stay centered on the x axis when replaced\n\n\n    if (newElement.type === 'bpmn:DataStoreReference' || newElement.type === 'bpmn:DataObjectReference') {\n      newElement.x = element.x + (element.width - newElement.width) / 2;\n    }\n\n    newElement = replace.replaceElement(element, newElement, hints);\n\n    if (hints.select !== false) {\n      selection.select(newElement);\n    }\n\n    return newElement;\n  }\n\n  this.replaceElement = replaceElement;\n}\nBpmnReplace.$inject = ['bpmnFactory', 'elementFactory', 'moddleCopy', 'modeling', 'replace', 'rules', 'selection'];\n\nfunction isSubProcess(bo) {\n  return is(bo, 'bpmn:SubProcess');\n}\n\nfunction hasEventDefinition(element, type) {\n  var bo = getBusinessObject(element);\n  return type && bo.get('eventDefinitions').some(function (definition) {\n    return is(definition, type);\n  });\n}\n/**\n * Compute intersection between two arrays.\n */\n\n\nfunction intersection(a1, a2) {\n  return a1.filter(function (el) {\n    return a2.indexOf(el) !== -1;\n  });\n}","map":{"version":3,"names":["pick","assign","filter","forEach","isArray","isUndefined","has","is","getBusinessObject","isAny","isExpanded","isEventSubProcess","getPropertyNames","copyProperties","source","target","properties","property","CUSTOM_PROPERTIES","shouldToggleCollapsed","element","targetElement","oldCollapsed","collapsed","targetCollapsed","BpmnReplace","bpmnFactory","elementFactory","moddleCopy","modeling","replace","rules","selection","replaceElement","hints","type","oldBusinessObject","businessObject","isSubProcess","toggleCollapse","newBusinessObject","create","newElement","di","elementProps","$descriptor","newElementProps","copyProps","intersection","propertyName","hasEventDefinition","eventDefinitionType","copyElement","eventDefinitionAttrs","defaultSize","getDefaultSize","width","height","x","y","moveChildren","processRef","allowed","shape","name","default","host","select","$inject","bo","get","some","definition","a1","a2","el","indexOf"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/replace/BpmnReplace.js"],"sourcesContent":["import {\n  pick,\n  assign,\n  filter,\n  forEach,\n  isArray,\n  isUndefined,\n  has\n} from 'min-dash';\n\nimport {\n  is,\n  getBusinessObject\n} from '../../util/ModelUtil';\n\nimport {\n  isAny\n} from '../modeling/util/ModelingUtil';\n\nimport {\n  isExpanded,\n  isEventSubProcess\n} from '../../util/DiUtil';\n\nimport { getPropertyNames } from '../copy-paste/ModdleCopy';\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [ properties ];\n  }\n\n  forEach(properties, function(property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\n\n\nvar CUSTOM_PROPERTIES = [\n  'cancelActivity',\n  'instantiate',\n  'eventGatewayType',\n  'triggeredByEvent',\n  'isInterrupting'\n];\n\n/**\n * Check if element should be collapsed or expanded.\n */\nfunction shouldToggleCollapsed(element, targetElement) {\n\n  var oldCollapsed = (\n    element && has(element, 'collapsed') ? element.collapsed : !isExpanded(element)\n  );\n\n  var targetCollapsed;\n\n  if (targetElement && (has(targetElement, 'collapsed') || has(targetElement, 'isExpanded'))) {\n\n    // property is explicitly set so use it\n    targetCollapsed = (\n      has(targetElement, 'collapsed') ? targetElement.collapsed : !targetElement.isExpanded\n    );\n  } else {\n\n    // keep old state\n    targetCollapsed = oldCollapsed;\n  }\n\n  if (oldCollapsed !== targetCollapsed) {\n    return true;\n  }\n\n  return false;\n}\n\n\n/**\n * This module takes care of replacing BPMN elements\n */\nexport default function BpmnReplace(\n    bpmnFactory,\n    elementFactory,\n    moddleCopy,\n    modeling,\n    replace,\n    rules,\n    selection\n) {\n\n  /**\n   * Prepares a new business object for the replacement element\n   * and triggers the replace operation.\n   *\n   * @param  {djs.model.Base} element\n   * @param  {Object} target\n   * @param  {Object} [hints]\n   *\n   * @return {djs.model.Base} the newly created element\n   */\n  function replaceElement(element, target, hints) {\n\n    hints = hints || {};\n\n    var type = target.type,\n        oldBusinessObject = element.businessObject;\n\n    if (isSubProcess(oldBusinessObject) && type === 'bpmn:SubProcess') {\n      if (shouldToggleCollapsed(element, target)) {\n\n        // expanding or collapsing process\n        modeling.toggleCollapse(element);\n\n        return element;\n      }\n    }\n\n    var newBusinessObject = bpmnFactory.create(type);\n\n    var newElement = {\n      type: type,\n      businessObject: newBusinessObject,\n    };\n\n    newElement.di = {};\n\n    // colors will be set to DI\n    copyProperties(element.di, newElement.di, [\n      'fill',\n      'stroke',\n      'background-color',\n      'border-color',\n      'color'\n    ]);\n\n    var elementProps = getPropertyNames(oldBusinessObject.$descriptor),\n        newElementProps = getPropertyNames(newBusinessObject.$descriptor, true),\n        copyProps = intersection(elementProps, newElementProps);\n\n    // initialize special properties defined in target definition\n    assign(newBusinessObject, pick(target, CUSTOM_PROPERTIES));\n\n    var properties = filter(copyProps, function(propertyName) {\n\n      // copying event definitions, unless we replace\n      if (propertyName === 'eventDefinitions') {\n        return hasEventDefinition(element, target.eventDefinitionType);\n      }\n\n      // retain loop characteristics if the target element\n      // is not an event sub process\n      if (propertyName === 'loopCharacteristics') {\n        return !isEventSubProcess(newBusinessObject);\n      }\n\n      // so the applied properties from 'target' don't get lost\n      if (has(newBusinessObject, propertyName)) {\n        return false;\n      }\n\n      if (propertyName === 'processRef' && target.isExpanded === false) {\n        return false;\n      }\n\n      if (propertyName === 'triggeredByEvent') {\n        return false;\n      }\n\n      return true;\n    });\n\n    newBusinessObject = moddleCopy.copyElement(\n      oldBusinessObject,\n      newBusinessObject,\n      properties\n    );\n\n    // initialize custom BPMN extensions\n    if (target.eventDefinitionType) {\n\n      // only initialize with new eventDefinition\n      // if we did not set an event definition yet,\n      // i.e. because we copied it\n      if (!hasEventDefinition(newBusinessObject, target.eventDefinitionType)) {\n        newElement.eventDefinitionType = target.eventDefinitionType;\n        newElement.eventDefinitionAttrs = target.eventDefinitionAttrs;\n      }\n    }\n\n    if (is(oldBusinessObject, 'bpmn:Activity')) {\n\n      if (isSubProcess(oldBusinessObject)) {\n\n        // no toggeling, so keep old state\n        newElement.isExpanded = isExpanded(element);\n      }\n\n      // else if property is explicitly set, use it\n      else if (target && has(target, 'isExpanded')) {\n        newElement.isExpanded = target.isExpanded;\n\n        // assign default size of new expanded element\n        var defaultSize = elementFactory.getDefaultSize(newBusinessObject, {\n          isExpanded: newElement.isExpanded\n        });\n\n        newElement.width = defaultSize.width;\n        newElement.height = defaultSize.height;\n\n        // keep element centered\n        newElement.x = element.x - (newElement.width - element.width) / 2;\n        newElement.y = element.y - (newElement.height - element.height) / 2;\n      }\n\n      // TODO: need also to respect min/max Size\n      // copy size, from an expanded subprocess to an expanded alternative subprocess\n      // except bpmn:Task, because Task is always expanded\n      if ((isExpanded(element) && !is(oldBusinessObject, 'bpmn:Task')) && newElement.isExpanded) {\n        newElement.width = element.width;\n        newElement.height = element.height;\n      }\n    }\n\n    // remove children if not expanding sub process\n    if (isSubProcess(oldBusinessObject) && !isSubProcess(newBusinessObject)) {\n      hints.moveChildren = false;\n    }\n\n    // transform collapsed/expanded pools\n    if (is(oldBusinessObject, 'bpmn:Participant')) {\n\n      // create expanded pool\n      if (target.isExpanded === true) {\n        newBusinessObject.processRef = bpmnFactory.create('bpmn:Process');\n      } else {\n\n        // remove children when transforming to collapsed pool\n        hints.moveChildren = false;\n      }\n\n      // apply same width and default height\n      newElement.width = element.width;\n      newElement.height = elementFactory.getDefaultSize(newElement).height;\n    }\n\n    if (!rules.allowed('shape.resize', { shape: newBusinessObject })) {\n      newElement.height = elementFactory.getDefaultSize(newElement).height;\n      newElement.width = elementFactory.getDefaultSize(newElement).width;\n    }\n\n    newBusinessObject.name = oldBusinessObject.name;\n\n    // retain default flow's reference between inclusive <-> exclusive gateways and activities\n    if (\n      isAny(oldBusinessObject, [\n        'bpmn:ExclusiveGateway',\n        'bpmn:InclusiveGateway',\n        'bpmn:Activity'\n      ]) &&\n      isAny(newBusinessObject, [\n        'bpmn:ExclusiveGateway',\n        'bpmn:InclusiveGateway',\n        'bpmn:Activity'\n      ])\n    ) {\n      newBusinessObject.default = oldBusinessObject.default;\n    }\n\n    if (\n      target.host &&\n      !is(oldBusinessObject, 'bpmn:BoundaryEvent') &&\n      is(newBusinessObject, 'bpmn:BoundaryEvent')\n    ) {\n      newElement.host = target.host;\n    }\n\n    // The DataStoreReference element is 14px wider than the DataObjectReference element\n    // This ensures that they stay centered on the x axis when replaced\n    if (\n      newElement.type === 'bpmn:DataStoreReference' ||\n      newElement.type === 'bpmn:DataObjectReference'\n    ) {\n      newElement.x = element.x + (element.width - newElement.width) / 2;\n    }\n\n\n    newElement = replace.replaceElement(element, newElement, hints);\n\n    if (hints.select !== false) {\n      selection.select(newElement);\n    }\n\n    return newElement;\n  }\n\n  this.replaceElement = replaceElement;\n}\n\nBpmnReplace.$inject = [\n  'bpmnFactory',\n  'elementFactory',\n  'moddleCopy',\n  'modeling',\n  'replace',\n  'rules',\n  'selection'\n];\n\n\nfunction isSubProcess(bo) {\n  return is(bo, 'bpmn:SubProcess');\n}\n\nfunction hasEventDefinition(element, type) {\n\n  var bo = getBusinessObject(element);\n\n  return type && bo.get('eventDefinitions').some(function(definition) {\n    return is(definition, type);\n  });\n}\n\n/**\n * Compute intersection between two arrays.\n */\nfunction intersection(a1, a2) {\n  return a1.filter(function(el) {\n    return a2.indexOf(el) !== -1;\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}