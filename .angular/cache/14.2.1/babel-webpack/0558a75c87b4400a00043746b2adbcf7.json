{"ast":null,"code":"import { asBounds, asTRBL } from 'diagram-js/lib/layout/LayoutUtil';\nimport { is, isAny } from '../../util/ModelUtil';\nvar DEFAULT_POSITION = {\n  x: 180,\n  y: 160\n};\n/**\n * Hook into `import.render.start` and create new planes for diagrams with\n * collapsed subprocesses and all dis on the same plane.\n *\n * @param {eventBus} eventBus\n * @param {moddle} moddle\n */\n\nexport default function SubprocessCompatibility(eventBus, moddle) {\n  this._eventBus = eventBus;\n  this._moddle = moddle;\n  var self = this;\n  eventBus.on('import.render.start', 1500, function (e, context) {\n    self.handleImport(context.definitions);\n  });\n}\n\nSubprocessCompatibility.prototype.handleImport = function (definitions) {\n  if (!definitions.diagrams) {\n    return;\n  }\n\n  var self = this;\n  this._definitions = definitions;\n  this._processToDiagramMap = {};\n  definitions.diagrams.forEach(function (diagram) {\n    if (!diagram.plane || !diagram.plane.bpmnElement) {\n      return;\n    }\n\n    self._processToDiagramMap[diagram.plane.bpmnElement.id] = diagram;\n  });\n  var newDiagrams = [];\n  definitions.diagrams.forEach(function (diagram) {\n    var createdDiagrams = self.createNewDiagrams(diagram.plane);\n    Array.prototype.push.apply(newDiagrams, createdDiagrams);\n  });\n  newDiagrams.forEach(function (diagram) {\n    self.movePlaneElementsToOrigin(diagram.plane);\n  });\n};\n/**\n * Moves all DI elements from collapsed subprocesses to a new plane.\n *\n * @param {Object} plane\n * @return {Array} new diagrams created for the collapsed subprocesses\n */\n\n\nSubprocessCompatibility.prototype.createNewDiagrams = function (plane) {\n  var self = this;\n  var collapsedElements = [];\n  var elementsToMove = [];\n  plane.get('planeElement').forEach(function (diElement) {\n    var bo = diElement.bpmnElement;\n\n    if (!bo) {\n      return;\n    }\n\n    var parent = bo.$parent;\n\n    if (is(bo, 'bpmn:SubProcess') && !diElement.isExpanded) {\n      collapsedElements.push(bo);\n    }\n\n    if (shouldMoveToPlane(bo, plane)) {\n      // don't change the array while we iterate over it\n      elementsToMove.push({\n        diElement: diElement,\n        parent: parent\n      });\n    }\n  });\n  var newDiagrams = []; // create new planes for all collapsed subprocesses, even when they are empty\n\n  collapsedElements.forEach(function (element) {\n    if (!self._processToDiagramMap[element.id]) {\n      var diagram = self.createDiagram(element);\n      self._processToDiagramMap[element.id] = diagram;\n      newDiagrams.push(diagram);\n    }\n  });\n  elementsToMove.forEach(function (element) {\n    var diElement = element.diElement;\n    var parent = element.parent; // parent is expanded, get nearest collapsed parent\n\n    while (parent && collapsedElements.indexOf(parent) === -1) {\n      parent = parent.$parent;\n    } // false positive, all parents are expanded\n\n\n    if (!parent) {\n      return;\n    }\n\n    var diagram = self._processToDiagramMap[parent.id];\n    self.moveToDiPlane(diElement, diagram.plane);\n  });\n  return newDiagrams;\n};\n\nSubprocessCompatibility.prototype.movePlaneElementsToOrigin = function (plane) {\n  var elements = plane.get('planeElement'); // get bounding box of all elements\n\n  var planeBounds = getPlaneBounds(plane);\n  var offset = {\n    x: planeBounds.x - DEFAULT_POSITION.x,\n    y: planeBounds.y - DEFAULT_POSITION.y\n  };\n  elements.forEach(function (diElement) {\n    if (diElement.waypoint) {\n      diElement.waypoint.forEach(function (waypoint) {\n        waypoint.x = waypoint.x - offset.x;\n        waypoint.y = waypoint.y - offset.y;\n      });\n    } else if (diElement.bounds) {\n      diElement.bounds.x = diElement.bounds.x - offset.x;\n      diElement.bounds.y = diElement.bounds.y - offset.y;\n    }\n  });\n};\n\nSubprocessCompatibility.prototype.moveToDiPlane = function (diElement, newPlane) {\n  var containingDiagram = findRootDiagram(diElement); // remove DI from old Plane and add it to the new one\n\n  var parentPlaneElement = containingDiagram.plane.get('planeElement');\n  parentPlaneElement.splice(parentPlaneElement.indexOf(diElement), 1);\n  newPlane.get('planeElement').push(diElement);\n};\n\nSubprocessCompatibility.prototype.createDiagram = function (bo) {\n  var plane = this._moddle.create('bpmndi:BPMNPlane', {\n    bpmnElement: bo\n  });\n\n  var diagram = this._moddle.create('bpmndi:BPMNDiagram', {\n    plane: plane\n  });\n\n  plane.$parent = diagram;\n  plane.bpmnElement = bo;\n  diagram.$parent = this._definitions;\n\n  this._definitions.diagrams.push(diagram);\n\n  return diagram;\n};\n\nSubprocessCompatibility.$inject = ['eventBus', 'moddle']; // helpers //////////////////////////\n\nfunction findRootDiagram(element) {\n  if (is(element, 'bpmndi:BPMNDiagram')) {\n    return element;\n  } else {\n    return findRootDiagram(element.$parent);\n  }\n}\n\nfunction getPlaneBounds(plane) {\n  var planeTrbl = {\n    top: Infinity,\n    right: -Infinity,\n    bottom: -Infinity,\n    left: Infinity\n  };\n  plane.planeElement.forEach(function (element) {\n    if (!element.bounds) {\n      return;\n    }\n\n    var trbl = asTRBL(element.bounds);\n    planeTrbl.top = Math.min(trbl.top, planeTrbl.top);\n    planeTrbl.left = Math.min(trbl.left, planeTrbl.left);\n  });\n  return asBounds(planeTrbl);\n}\n\nfunction shouldMoveToPlane(bo, plane) {\n  var parent = bo.$parent; // don't move elements that are already on the plane\n\n  if (!is(parent, 'bpmn:SubProcess') || parent === plane.bpmnElement) {\n    return false;\n  } // dataAssociations are children of the subprocess but rendered on process level\n  // cf. https://github.com/bpmn-io/bpmn-js/issues/1619\n\n\n  if (isAny(bo, ['bpmn:DataInputAssociation', 'bpmn:DataOutputAssociation'])) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"names":["asBounds","asTRBL","is","isAny","DEFAULT_POSITION","x","y","SubprocessCompatibility","eventBus","moddle","_eventBus","_moddle","self","on","e","context","handleImport","definitions","prototype","diagrams","_definitions","_processToDiagramMap","forEach","diagram","plane","bpmnElement","id","newDiagrams","createdDiagrams","createNewDiagrams","Array","push","apply","movePlaneElementsToOrigin","collapsedElements","elementsToMove","get","diElement","bo","parent","$parent","isExpanded","shouldMoveToPlane","element","createDiagram","indexOf","moveToDiPlane","elements","planeBounds","getPlaneBounds","offset","waypoint","bounds","newPlane","containingDiagram","findRootDiagram","parentPlaneElement","splice","create","$inject","planeTrbl","top","Infinity","right","bottom","left","planeElement","trbl","Math","min"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/drilldown/SubprocessCompatibility.js"],"sourcesContent":["\nimport { asBounds, asTRBL } from 'diagram-js/lib/layout/LayoutUtil';\nimport { is, isAny } from '../../util/ModelUtil';\n\nvar DEFAULT_POSITION = {\n  x: 180,\n  y: 160\n};\n\n/**\n * Hook into `import.render.start` and create new planes for diagrams with\n * collapsed subprocesses and all dis on the same plane.\n *\n * @param {eventBus} eventBus\n * @param {moddle} moddle\n */\nexport default function SubprocessCompatibility(eventBus, moddle) {\n  this._eventBus = eventBus;\n  this._moddle = moddle;\n\n  var self = this;\n\n  eventBus.on('import.render.start', 1500, function(e, context) {\n    self.handleImport(context.definitions);\n  });\n}\n\nSubprocessCompatibility.prototype.handleImport = function(definitions) {\n  if (!definitions.diagrams) {\n    return;\n  }\n\n  var self = this;\n  this._definitions = definitions;\n  this._processToDiagramMap = {};\n\n  definitions.diagrams.forEach(function(diagram) {\n    if (!diagram.plane || !diagram.plane.bpmnElement) {\n      return;\n    }\n\n    self._processToDiagramMap[diagram.plane.bpmnElement.id] = diagram;\n  });\n\n  var newDiagrams = [];\n  definitions.diagrams.forEach(function(diagram) {\n    var createdDiagrams = self.createNewDiagrams(diagram.plane);\n    Array.prototype.push.apply(newDiagrams, createdDiagrams);\n  });\n\n  newDiagrams.forEach(function(diagram) {\n    self.movePlaneElementsToOrigin(diagram.plane);\n  });\n};\n\n\n/**\n * Moves all DI elements from collapsed subprocesses to a new plane.\n *\n * @param {Object} plane\n * @return {Array} new diagrams created for the collapsed subprocesses\n */\nSubprocessCompatibility.prototype.createNewDiagrams = function(plane) {\n  var self = this;\n\n  var collapsedElements = [];\n  var elementsToMove = [];\n\n  plane.get('planeElement').forEach(function(diElement) {\n    var bo = diElement.bpmnElement;\n\n    if (!bo) {\n      return;\n    }\n\n    var parent = bo.$parent;\n\n    if (is(bo, 'bpmn:SubProcess') && !diElement.isExpanded) {\n      collapsedElements.push(bo);\n    }\n\n    if (shouldMoveToPlane(bo, plane)) {\n\n      // don't change the array while we iterate over it\n      elementsToMove.push({ diElement: diElement, parent: parent });\n    }\n  });\n\n  var newDiagrams = [];\n\n  // create new planes for all collapsed subprocesses, even when they are empty\n  collapsedElements.forEach(function(element) {\n    if (!self._processToDiagramMap[element.id]) {\n      var diagram = self.createDiagram(element);\n      self._processToDiagramMap[element.id] = diagram;\n      newDiagrams.push(diagram);\n    }\n  });\n\n  elementsToMove.forEach(function(element) {\n    var diElement = element.diElement;\n    var parent = element.parent;\n\n    // parent is expanded, get nearest collapsed parent\n    while (parent && collapsedElements.indexOf(parent) === -1) {\n      parent = parent.$parent;\n    }\n\n    // false positive, all parents are expanded\n    if (!parent) {\n      return;\n    }\n\n    var diagram = self._processToDiagramMap[parent.id];\n    self.moveToDiPlane(diElement, diagram.plane);\n  });\n\n  return newDiagrams;\n};\n\nSubprocessCompatibility.prototype.movePlaneElementsToOrigin = function(plane) {\n  var elements = plane.get('planeElement');\n\n  // get bounding box of all elements\n  var planeBounds = getPlaneBounds(plane);\n\n  var offset = {\n    x: planeBounds.x - DEFAULT_POSITION.x,\n    y: planeBounds.y - DEFAULT_POSITION.y\n  };\n\n  elements.forEach(function(diElement) {\n    if (diElement.waypoint) {\n      diElement.waypoint.forEach(function(waypoint) {\n        waypoint.x = waypoint.x - offset.x;\n        waypoint.y = waypoint.y - offset.y;\n      });\n    } else if (diElement.bounds) {\n      diElement.bounds.x = diElement.bounds.x - offset.x;\n      diElement.bounds.y = diElement.bounds.y - offset.y;\n    }\n  });\n};\n\n\nSubprocessCompatibility.prototype.moveToDiPlane = function(diElement, newPlane) {\n  var containingDiagram = findRootDiagram(diElement);\n\n  // remove DI from old Plane and add it to the new one\n  var parentPlaneElement = containingDiagram.plane.get('planeElement');\n  parentPlaneElement.splice(parentPlaneElement.indexOf(diElement), 1);\n  newPlane.get('planeElement').push(diElement);\n};\n\n\nSubprocessCompatibility.prototype.createDiagram = function(bo) {\n  var plane = this._moddle.create('bpmndi:BPMNPlane', { bpmnElement: bo });\n  var diagram = this._moddle.create('bpmndi:BPMNDiagram', {\n    plane: plane\n  });\n  plane.$parent = diagram;\n  plane.bpmnElement = bo;\n  diagram.$parent = this._definitions;\n  this._definitions.diagrams.push(diagram);\n  return diagram;\n};\n\nSubprocessCompatibility.$inject = [ 'eventBus', 'moddle' ];\n\n\n// helpers //////////////////////////\n\nfunction findRootDiagram(element) {\n  if (is(element, 'bpmndi:BPMNDiagram')) {\n    return element;\n  } else {\n    return findRootDiagram(element.$parent);\n  }\n}\n\nfunction getPlaneBounds(plane) {\n  var planeTrbl = {\n    top: Infinity,\n    right: -Infinity,\n    bottom: -Infinity,\n    left: Infinity\n  };\n\n  plane.planeElement.forEach(function(element) {\n    if (!element.bounds) {\n      return;\n    }\n\n    var trbl = asTRBL(element.bounds);\n\n    planeTrbl.top = Math.min(trbl.top, planeTrbl.top);\n    planeTrbl.left = Math.min(trbl.left, planeTrbl.left);\n  });\n\n  return asBounds(planeTrbl);\n}\n\nfunction shouldMoveToPlane(bo, plane) {\n  var parent = bo.$parent;\n\n  // don't move elements that are already on the plane\n  if (!is(parent, 'bpmn:SubProcess') || parent === plane.bpmnElement) {\n    return false;\n  }\n\n  // dataAssociations are children of the subprocess but rendered on process level\n  // cf. https://github.com/bpmn-io/bpmn-js/issues/1619\n  if (isAny(bo, [ 'bpmn:DataInputAssociation', 'bpmn:DataOutputAssociation' ])) {\n    return false;\n  }\n\n  return true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}