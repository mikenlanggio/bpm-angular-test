{"ast":null,"code":"import { forEach } from 'min-dash';\nimport { getResizedSourceAnchor, getResizedTargetAnchor } from './helper/AnchorsHelper';\n/**\n * Replace shape by adding new shape and removing old shape. Incoming and outgoing connections will\n * be kept if possible.\n *\n * @class\n * @constructor\n *\n * @param {Modeling} modeling\n * @param {Rules} rules\n */\n\nexport default function ReplaceShapeHandler(modeling, rules) {\n  this._modeling = modeling;\n  this._rules = rules;\n}\nReplaceShapeHandler.$inject = ['modeling', 'rules'];\n/**\n * Add new shape.\n *\n * @param {Object} context\n * @param {djs.model.Shape} context.oldShape\n * @param {Object} context.newData\n * @param {string} context.newData.type\n * @param {number} context.newData.x\n * @param {number} context.newData.y\n * @param {Object} [hints]\n */\n\nReplaceShapeHandler.prototype.preExecute = function (context) {\n  var self = this,\n      modeling = this._modeling,\n      rules = this._rules;\n  var oldShape = context.oldShape,\n      newData = context.newData,\n      hints = context.hints || {},\n      newShape;\n\n  function canReconnect(source, target, connection) {\n    return rules.allowed('connection.reconnect', {\n      connection: connection,\n      source: source,\n      target: target\n    });\n  } // (1) add new shape at given position\n\n\n  var position = {\n    x: newData.x,\n    y: newData.y\n  };\n  var oldBounds = {\n    x: oldShape.x,\n    y: oldShape.y,\n    width: oldShape.width,\n    height: oldShape.height\n  };\n  newShape = context.newShape = context.newShape || self.createShape(newData, position, oldShape.parent, hints); // (2) update host\n\n  if (oldShape.host) {\n    modeling.updateAttachment(newShape, oldShape.host);\n  } // (3) adopt all children from old shape\n\n\n  var children;\n\n  if (hints.moveChildren !== false) {\n    children = oldShape.children.slice();\n    modeling.moveElements(children, {\n      x: 0,\n      y: 0\n    }, newShape, hints);\n  } // (4) reconnect connections to new shape if possible\n\n\n  var incoming = oldShape.incoming.slice(),\n      outgoing = oldShape.outgoing.slice();\n  forEach(incoming, function (connection) {\n    var source = connection.source,\n        allowed = canReconnect(source, newShape, connection);\n\n    if (allowed) {\n      self.reconnectEnd(connection, newShape, getResizedTargetAnchor(connection, newShape, oldBounds), hints);\n    }\n  });\n  forEach(outgoing, function (connection) {\n    var target = connection.target,\n        allowed = canReconnect(newShape, target, connection);\n\n    if (allowed) {\n      self.reconnectStart(connection, newShape, getResizedSourceAnchor(connection, newShape, oldBounds), hints);\n    }\n  });\n};\n/**\n * Remove old shape.\n */\n\n\nReplaceShapeHandler.prototype.postExecute = function (context) {\n  var oldShape = context.oldShape;\n\n  this._modeling.removeShape(oldShape);\n};\n\nReplaceShapeHandler.prototype.execute = function (context) {};\n\nReplaceShapeHandler.prototype.revert = function (context) {};\n\nReplaceShapeHandler.prototype.createShape = function (shape, position, target, hints) {\n  return this._modeling.createShape(shape, position, target, hints);\n};\n\nReplaceShapeHandler.prototype.reconnectStart = function (connection, newSource, dockingPoint, hints) {\n  this._modeling.reconnectStart(connection, newSource, dockingPoint, hints);\n};\n\nReplaceShapeHandler.prototype.reconnectEnd = function (connection, newTarget, dockingPoint, hints) {\n  this._modeling.reconnectEnd(connection, newTarget, dockingPoint, hints);\n};","map":{"version":3,"names":["forEach","getResizedSourceAnchor","getResizedTargetAnchor","ReplaceShapeHandler","modeling","rules","_modeling","_rules","$inject","prototype","preExecute","context","self","oldShape","newData","hints","newShape","canReconnect","source","target","connection","allowed","position","x","y","oldBounds","width","height","createShape","parent","host","updateAttachment","children","moveChildren","slice","moveElements","incoming","outgoing","reconnectEnd","reconnectStart","postExecute","removeShape","execute","revert","shape","newSource","dockingPoint","newTarget"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/modeling/cmd/ReplaceShapeHandler.js"],"sourcesContent":["import { forEach } from 'min-dash';\n\nimport {\n  getResizedSourceAnchor,\n  getResizedTargetAnchor\n} from './helper/AnchorsHelper';\n\n/**\n * Replace shape by adding new shape and removing old shape. Incoming and outgoing connections will\n * be kept if possible.\n *\n * @class\n * @constructor\n *\n * @param {Modeling} modeling\n * @param {Rules} rules\n */\nexport default function ReplaceShapeHandler(modeling, rules) {\n  this._modeling = modeling;\n  this._rules = rules;\n}\n\nReplaceShapeHandler.$inject = [ 'modeling', 'rules' ];\n\n\n/**\n * Add new shape.\n *\n * @param {Object} context\n * @param {djs.model.Shape} context.oldShape\n * @param {Object} context.newData\n * @param {string} context.newData.type\n * @param {number} context.newData.x\n * @param {number} context.newData.y\n * @param {Object} [hints]\n */\nReplaceShapeHandler.prototype.preExecute = function(context) {\n  var self = this,\n      modeling = this._modeling,\n      rules = this._rules;\n\n  var oldShape = context.oldShape,\n      newData = context.newData,\n      hints = context.hints || {},\n      newShape;\n\n  function canReconnect(source, target, connection) {\n    return rules.allowed('connection.reconnect', {\n      connection: connection,\n      source: source,\n      target: target\n    });\n  }\n\n  // (1) add new shape at given position\n  var position = {\n    x: newData.x,\n    y: newData.y\n  };\n\n  var oldBounds = {\n    x: oldShape.x,\n    y: oldShape.y,\n    width: oldShape.width,\n    height: oldShape.height\n  };\n\n  newShape = context.newShape =\n    context.newShape ||\n    self.createShape(newData, position, oldShape.parent, hints);\n\n  // (2) update host\n  if (oldShape.host) {\n    modeling.updateAttachment(newShape, oldShape.host);\n  }\n\n  // (3) adopt all children from old shape\n  var children;\n\n  if (hints.moveChildren !== false) {\n    children = oldShape.children.slice();\n\n    modeling.moveElements(children, { x: 0, y: 0 }, newShape, hints);\n  }\n\n  // (4) reconnect connections to new shape if possible\n  var incoming = oldShape.incoming.slice(),\n      outgoing = oldShape.outgoing.slice();\n\n  forEach(incoming, function(connection) {\n    var source = connection.source,\n        allowed = canReconnect(source, newShape, connection);\n\n    if (allowed) {\n      self.reconnectEnd(\n        connection, newShape,\n        getResizedTargetAnchor(connection, newShape, oldBounds),\n        hints\n      );\n    }\n  });\n\n  forEach(outgoing, function(connection) {\n    var target = connection.target,\n        allowed = canReconnect(newShape, target, connection);\n\n    if (allowed) {\n      self.reconnectStart(\n        connection, newShape,\n        getResizedSourceAnchor(connection, newShape, oldBounds),\n        hints\n      );\n    }\n  });\n};\n\n\n/**\n * Remove old shape.\n */\nReplaceShapeHandler.prototype.postExecute = function(context) {\n  var oldShape = context.oldShape;\n\n  this._modeling.removeShape(oldShape);\n};\n\n\nReplaceShapeHandler.prototype.execute = function(context) {};\n\n\nReplaceShapeHandler.prototype.revert = function(context) {};\n\n\nReplaceShapeHandler.prototype.createShape = function(shape, position, target, hints) {\n  return this._modeling.createShape(shape, position, target, hints);\n};\n\n\nReplaceShapeHandler.prototype.reconnectStart = function(connection, newSource, dockingPoint, hints) {\n  this._modeling.reconnectStart(connection, newSource, dockingPoint, hints);\n};\n\n\nReplaceShapeHandler.prototype.reconnectEnd = function(connection, newTarget, dockingPoint, hints) {\n  this._modeling.reconnectEnd(connection, newTarget, dockingPoint, hints);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}