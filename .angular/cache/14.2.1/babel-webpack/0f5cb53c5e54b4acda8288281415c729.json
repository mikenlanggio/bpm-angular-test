{"ast":null,"code":"import { getBusinessObject, getDi, is } from '../../util/ModelUtil';\nimport { forEach, isArray, isUndefined, omit, reduce } from 'min-dash';\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [properties];\n  }\n\n  forEach(properties, function (property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\n\nvar LOW_PRIORITY = 750;\nexport default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {\n  function copy(bo, clone) {\n    var targetBo = bpmnFactory.create(bo.$type);\n    return moddleCopy.copyElement(bo, targetBo, null, clone);\n  }\n\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function (context) {\n    var descriptor = context.descriptor,\n        element = context.element,\n        businessObject = getBusinessObject(element); // do not copy business object + di for labels;\n    // will be pulled from the referenced label target\n\n    if (isLabel(element)) {\n      return descriptor;\n    }\n\n    var businessObjectCopy = descriptor.businessObject = copy(businessObject, true);\n    var diCopy = descriptor.di = copy(getDi(element), true);\n    diCopy.bpmnElement = businessObjectCopy;\n    copyProperties(businessObjectCopy, descriptor, 'name');\n    copyProperties(diCopy, descriptor, 'isExpanded'); // default sequence flow\n\n    if (businessObject.default) {\n      descriptor.default = businessObject.default.id;\n    }\n  });\n  var referencesKey = '-bpmn-js-refs';\n\n  function getReferences(cache) {\n    return cache[referencesKey] = cache[referencesKey] || {};\n  }\n\n  function setReferences(cache, references) {\n    cache[referencesKey] = references;\n  }\n\n  function resolveReferences(descriptor, cache, references) {\n    var businessObject = getBusinessObject(descriptor); // default sequence flows\n\n    if (descriptor.default) {\n      // relationship cannot be resolved immediately\n      references[descriptor.default] = {\n        element: businessObject,\n        property: 'default'\n      };\n    } // boundary events\n\n\n    if (descriptor.host) {\n      // relationship can be resolved immediately\n      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[descriptor.host]);\n    }\n\n    return omit(references, reduce(references, function (array, reference, key) {\n      var element = reference.element,\n          property = reference.property;\n\n      if (key === descriptor.id) {\n        element[property] = businessObject;\n        array.push(descriptor.id);\n      }\n\n      return array;\n    }, []));\n  }\n\n  eventBus.on('copyPaste.pasteElement', function (context) {\n    var cache = context.cache,\n        descriptor = context.descriptor,\n        businessObject = descriptor.businessObject,\n        di = descriptor.di; // wire existing di + businessObject for external label\n\n    if (isLabel(descriptor)) {\n      descriptor.businessObject = getBusinessObject(cache[descriptor.labelTarget]);\n      descriptor.di = getDi(cache[descriptor.labelTarget]);\n      return;\n    }\n\n    businessObject = descriptor.businessObject = copy(businessObject);\n    di = descriptor.di = copy(di);\n    di.bpmnElement = businessObject;\n    copyProperties(descriptor, businessObject, ['isExpanded', 'name']);\n    descriptor.type = businessObject.$type;\n  }); // copy + paste processRef with participant\n\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function (context) {\n    var descriptor = context.descriptor,\n        element = context.element;\n\n    if (!is(element, 'bpmn:Participant')) {\n      return;\n    }\n\n    var participantBo = getBusinessObject(element);\n\n    if (participantBo.processRef) {\n      descriptor.processRef = copy(participantBo.processRef, true);\n    }\n  });\n  eventBus.on('copyPaste.pasteElement', function (context) {\n    var descriptor = context.descriptor,\n        processRef = descriptor.processRef;\n\n    if (processRef) {\n      descriptor.processRef = copy(processRef);\n    }\n  }); // resolve references\n\n  eventBus.on('copyPaste.pasteElement', LOW_PRIORITY, function (context) {\n    var cache = context.cache,\n        descriptor = context.descriptor; // resolve references e.g. default sequence flow\n\n    setReferences(cache, resolveReferences(descriptor, cache, getReferences(cache)));\n  });\n}\nBpmnCopyPaste.$inject = ['bpmnFactory', 'eventBus', 'moddleCopy']; // helpers //////////\n\nfunction isLabel(element) {\n  return !!element.labelTarget;\n}","map":{"version":3,"names":["getBusinessObject","getDi","is","forEach","isArray","isUndefined","omit","reduce","copyProperties","source","target","properties","property","LOW_PRIORITY","BpmnCopyPaste","bpmnFactory","eventBus","moddleCopy","copy","bo","clone","targetBo","create","$type","copyElement","on","context","descriptor","element","businessObject","isLabel","businessObjectCopy","diCopy","di","bpmnElement","default","id","referencesKey","getReferences","cache","setReferences","references","resolveReferences","host","attachedToRef","array","reference","key","push","labelTarget","type","participantBo","processRef","$inject"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/copy-paste/BpmnCopyPaste.js"],"sourcesContent":["import {\n  getBusinessObject,\n  getDi,\n  is\n} from '../../util/ModelUtil';\n\nimport {\n  forEach,\n  isArray,\n  isUndefined,\n  omit,\n  reduce\n} from 'min-dash';\n\nfunction copyProperties(source, target, properties) {\n  if (!isArray(properties)) {\n    properties = [ properties ];\n  }\n\n  forEach(properties, function(property) {\n    if (!isUndefined(source[property])) {\n      target[property] = source[property];\n    }\n  });\n}\n\nvar LOW_PRIORITY = 750;\n\n\nexport default function BpmnCopyPaste(bpmnFactory, eventBus, moddleCopy) {\n\n  function copy(bo, clone) {\n    var targetBo = bpmnFactory.create(bo.$type);\n\n    return moddleCopy.copyElement(bo, targetBo, null, clone);\n  }\n\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {\n    var descriptor = context.descriptor,\n        element = context.element,\n        businessObject = getBusinessObject(element);\n\n    // do not copy business object + di for labels;\n    // will be pulled from the referenced label target\n    if (isLabel(element)) {\n      return descriptor;\n    }\n\n    var businessObjectCopy = descriptor.businessObject = copy(businessObject, true);\n    var diCopy = descriptor.di = copy(getDi(element), true);\n    diCopy.bpmnElement = businessObjectCopy;\n\n    copyProperties(businessObjectCopy, descriptor, 'name');\n    copyProperties(diCopy, descriptor, 'isExpanded');\n\n    // default sequence flow\n    if (businessObject.default) {\n      descriptor.default = businessObject.default.id;\n    }\n  });\n\n  var referencesKey = '-bpmn-js-refs';\n\n  function getReferences(cache) {\n    return (cache[referencesKey] = cache[referencesKey] || {});\n  }\n\n  function setReferences(cache, references) {\n    cache[referencesKey] = references;\n  }\n\n  function resolveReferences(descriptor, cache, references) {\n    var businessObject = getBusinessObject(descriptor);\n\n    // default sequence flows\n    if (descriptor.default) {\n\n      // relationship cannot be resolved immediately\n      references[ descriptor.default ] = {\n        element: businessObject,\n        property: 'default'\n      };\n    }\n\n    // boundary events\n    if (descriptor.host) {\n\n      // relationship can be resolved immediately\n      getBusinessObject(descriptor).attachedToRef = getBusinessObject(cache[ descriptor.host ]);\n    }\n\n    return omit(references, reduce(references, function(array, reference, key) {\n      var element = reference.element,\n          property = reference.property;\n\n      if (key === descriptor.id) {\n        element[ property ] = businessObject;\n\n        array.push(descriptor.id);\n      }\n\n      return array;\n    }, []));\n  }\n\n  eventBus.on('copyPaste.pasteElement', function(context) {\n    var cache = context.cache,\n        descriptor = context.descriptor,\n        businessObject = descriptor.businessObject,\n        di = descriptor.di;\n\n    // wire existing di + businessObject for external label\n    if (isLabel(descriptor)) {\n      descriptor.businessObject = getBusinessObject(cache[ descriptor.labelTarget ]);\n      descriptor.di = getDi(cache[ descriptor.labelTarget ]);\n\n      return;\n    }\n\n    businessObject = descriptor.businessObject = copy(businessObject);\n\n    di = descriptor.di = copy(di);\n    di.bpmnElement = businessObject;\n\n    copyProperties(descriptor, businessObject, [\n      'isExpanded',\n      'name'\n    ]);\n\n    descriptor.type = businessObject.$type;\n  });\n\n  // copy + paste processRef with participant\n\n  eventBus.on('copyPaste.copyElement', LOW_PRIORITY, function(context) {\n    var descriptor = context.descriptor,\n        element = context.element;\n\n    if (!is(element, 'bpmn:Participant')) {\n      return;\n    }\n\n    var participantBo = getBusinessObject(element);\n\n    if (participantBo.processRef) {\n      descriptor.processRef = copy(participantBo.processRef, true);\n    }\n  });\n\n  eventBus.on('copyPaste.pasteElement', function(context) {\n    var descriptor = context.descriptor,\n        processRef = descriptor.processRef;\n\n    if (processRef) {\n      descriptor.processRef = copy(processRef);\n    }\n  });\n\n  // resolve references\n\n  eventBus.on('copyPaste.pasteElement', LOW_PRIORITY, function(context) {\n    var cache = context.cache,\n        descriptor = context.descriptor;\n\n    // resolve references e.g. default sequence flow\n    setReferences(\n      cache,\n      resolveReferences(descriptor, cache, getReferences(cache))\n    );\n  });\n\n}\n\n\nBpmnCopyPaste.$inject = [\n  'bpmnFactory',\n  'eventBus',\n  'moddleCopy'\n];\n\n// helpers //////////\n\nfunction isLabel(element) {\n  return !!element.labelTarget;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}