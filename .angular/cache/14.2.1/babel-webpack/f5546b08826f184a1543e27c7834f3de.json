{"ast":null,"code":"import inherits from 'inherits-browser';\nimport Ids from 'ids';\nimport BaseViewer from './BaseViewer';\n/**\n * A base modeler for BPMN 2.0 diagrams.\n *\n * Have a look at {@link Modeler} for a bundle that includes actual features.\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n * @param {string|number} [options.width] the width of the viewer\n * @param {string|number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions] extension packages to provide\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n */\n\nexport default function BaseModeler(options) {\n  BaseViewer.call(this, options); // hook ID collection into the modeler\n\n  this.on('import.parse.complete', function (event) {\n    if (!event.error) {\n      this._collectIds(event.definitions, event.elementsById);\n    }\n  }, this);\n  this.on('diagram.destroy', function () {\n    this.get('moddle').ids.clear();\n  }, this);\n}\ninherits(BaseModeler, BaseViewer);\n/**\n * Create a moddle instance, attaching ids to it.\n *\n * @param {Object} options\n */\n\nBaseModeler.prototype._createModdle = function (options) {\n  var moddle = BaseViewer.prototype._createModdle.call(this, options); // attach ids to moddle to be able to track\n  // and validated ids in the BPMN 2.0 XML document\n  // tree\n\n\n  moddle.ids = new Ids([32, 36, 1]);\n  return moddle;\n};\n/**\n * Collect ids processed during parsing of the\n * definitions object.\n *\n * @param {ModdleElement} definitions\n * @param {Context} context\n */\n\n\nBaseModeler.prototype._collectIds = function (definitions, elementsById) {\n  var moddle = definitions.$model,\n      ids = moddle.ids,\n      id; // remove references from previous import\n\n  ids.clear();\n\n  for (id in elementsById) {\n    ids.claim(id, elementsById[id]);\n  }\n};","map":{"version":3,"names":["inherits","Ids","BaseViewer","BaseModeler","options","call","on","event","error","_collectIds","definitions","elementsById","get","ids","clear","prototype","_createModdle","moddle","$model","id","claim"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/BaseModeler.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport Ids from 'ids';\n\nimport BaseViewer from './BaseViewer';\n\n\n/**\n * A base modeler for BPMN 2.0 diagrams.\n *\n * Have a look at {@link Modeler} for a bundle that includes actual features.\n *\n * @param {Object} [options] configuration options to pass to the viewer\n * @param {DOMElement} [options.container] the container to render the viewer in, defaults to body.\n * @param {string|number} [options.width] the width of the viewer\n * @param {string|number} [options.height] the height of the viewer\n * @param {Object} [options.moddleExtensions] extension packages to provide\n * @param {Array<didi.Module>} [options.modules] a list of modules to override the default modules\n * @param {Array<didi.Module>} [options.additionalModules] a list of modules to use with the default modules\n */\nexport default function BaseModeler(options) {\n  BaseViewer.call(this, options);\n\n  // hook ID collection into the modeler\n  this.on('import.parse.complete', function(event) {\n    if (!event.error) {\n      this._collectIds(event.definitions, event.elementsById);\n    }\n  }, this);\n\n  this.on('diagram.destroy', function() {\n    this.get('moddle').ids.clear();\n  }, this);\n}\n\ninherits(BaseModeler, BaseViewer);\n\n\n/**\n * Create a moddle instance, attaching ids to it.\n *\n * @param {Object} options\n */\nBaseModeler.prototype._createModdle = function(options) {\n  var moddle = BaseViewer.prototype._createModdle.call(this, options);\n\n  // attach ids to moddle to be able to track\n  // and validated ids in the BPMN 2.0 XML document\n  // tree\n  moddle.ids = new Ids([ 32, 36, 1 ]);\n\n  return moddle;\n};\n\n/**\n * Collect ids processed during parsing of the\n * definitions object.\n *\n * @param {ModdleElement} definitions\n * @param {Context} context\n */\nBaseModeler.prototype._collectIds = function(definitions, elementsById) {\n\n  var moddle = definitions.$model,\n      ids = moddle.ids,\n      id;\n\n  // remove references from previous import\n  ids.clear();\n\n  for (id in elementsById) {\n    ids.claim(id, elementsById[id]);\n  }\n};\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,kBAArB;AAEA,OAAOC,GAAP,MAAgB,KAAhB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,WAAT,CAAqBC,OAArB,EAA8B;EAC3CF,UAAU,CAACG,IAAX,CAAgB,IAAhB,EAAsBD,OAAtB,EAD2C,CAG3C;;EACA,KAAKE,EAAL,CAAQ,uBAAR,EAAiC,UAASC,KAAT,EAAgB;IAC/C,IAAI,CAACA,KAAK,CAACC,KAAX,EAAkB;MAChB,KAAKC,WAAL,CAAiBF,KAAK,CAACG,WAAvB,EAAoCH,KAAK,CAACI,YAA1C;IACD;EACF,CAJD,EAIG,IAJH;EAMA,KAAKL,EAAL,CAAQ,iBAAR,EAA2B,YAAW;IACpC,KAAKM,GAAL,CAAS,QAAT,EAAmBC,GAAnB,CAAuBC,KAAvB;EACD,CAFD,EAEG,IAFH;AAGD;AAEDd,QAAQ,CAACG,WAAD,EAAcD,UAAd,CAAR;AAGA;AACA;AACA;AACA;AACA;;AACAC,WAAW,CAACY,SAAZ,CAAsBC,aAAtB,GAAsC,UAASZ,OAAT,EAAkB;EACtD,IAAIa,MAAM,GAAGf,UAAU,CAACa,SAAX,CAAqBC,aAArB,CAAmCX,IAAnC,CAAwC,IAAxC,EAA8CD,OAA9C,CAAb,CADsD,CAGtD;EACA;EACA;;;EACAa,MAAM,CAACJ,GAAP,GAAa,IAAIZ,GAAJ,CAAQ,CAAE,EAAF,EAAM,EAAN,EAAU,CAAV,CAAR,CAAb;EAEA,OAAOgB,MAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAd,WAAW,CAACY,SAAZ,CAAsBN,WAAtB,GAAoC,UAASC,WAAT,EAAsBC,YAAtB,EAAoC;EAEtE,IAAIM,MAAM,GAAGP,WAAW,CAACQ,MAAzB;EAAA,IACIL,GAAG,GAAGI,MAAM,CAACJ,GADjB;EAAA,IAEIM,EAFJ,CAFsE,CAMtE;;EACAN,GAAG,CAACC,KAAJ;;EAEA,KAAKK,EAAL,IAAWR,YAAX,EAAyB;IACvBE,GAAG,CAACO,KAAJ,CAAUD,EAAV,EAAcR,YAAY,CAACQ,EAAD,CAA1B;EACD;AACF,CAZD"},"metadata":{},"sourceType":"module"}