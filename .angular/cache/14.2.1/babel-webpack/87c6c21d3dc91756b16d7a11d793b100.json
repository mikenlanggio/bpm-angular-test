{"ast":null,"code":"import { map, filter, sortBy } from 'min-dash';\nimport { getLabel } from '../label-editing/LabelUtil';\n/**\n * Provides ability to search through BPMN elements\n */\n\nexport default function BpmnSearchProvider(elementRegistry, searchPad, canvas) {\n  this._elementRegistry = elementRegistry;\n  this._canvas = canvas;\n  searchPad.registerProvider(this);\n}\nBpmnSearchProvider.$inject = ['elementRegistry', 'searchPad', 'canvas'];\n/**\n * Finds all elements that match given pattern\n *\n * <Result> :\n *  {\n *    primaryTokens: <Array<Token>>,\n *    secondaryTokens: <Array<Token>>,\n *    element: <Element>\n *  }\n *\n * <Token> :\n *  {\n *    normal|matched: <string>\n *  }\n *\n * @param  {string} pattern\n * @return {Array<Result>}\n */\n\nBpmnSearchProvider.prototype.find = function (pattern) {\n  var rootElement = this._canvas.getRootElement();\n\n  var elements = this._elementRegistry.filter(function (element) {\n    if (element.labelTarget) {\n      return false;\n    }\n\n    return true;\n  }); // do not include root element\n\n\n  elements = filter(elements, function (element) {\n    return element !== rootElement;\n  });\n  elements = map(elements, function (element) {\n    return {\n      primaryTokens: matchAndSplit(getLabel(element), pattern),\n      secondaryTokens: matchAndSplit(element.id, pattern),\n      element: element\n    };\n  }); // exclude non-matched elements\n\n  elements = filter(elements, function (element) {\n    return hasMatched(element.primaryTokens) || hasMatched(element.secondaryTokens);\n  });\n  elements = sortBy(elements, function (element) {\n    return getLabel(element.element) + element.element.id;\n  });\n  return elements;\n};\n\nfunction hasMatched(tokens) {\n  var matched = filter(tokens, function (t) {\n    return !!t.matched;\n  });\n  return matched.length > 0;\n}\n\nfunction matchAndSplit(text, pattern) {\n  var tokens = [],\n      originalText = text;\n\n  if (!text) {\n    return tokens;\n  }\n\n  text = text.toLowerCase();\n  pattern = pattern.toLowerCase();\n  var i = text.indexOf(pattern);\n\n  if (i > -1) {\n    if (i !== 0) {\n      tokens.push({\n        normal: originalText.substr(0, i)\n      });\n    }\n\n    tokens.push({\n      matched: originalText.substr(i, pattern.length)\n    });\n\n    if (pattern.length + i < text.length) {\n      tokens.push({\n        normal: originalText.substr(pattern.length + i, text.length)\n      });\n    }\n  } else {\n    tokens.push({\n      normal: originalText\n    });\n  }\n\n  return tokens;\n}","map":{"version":3,"names":["map","filter","sortBy","getLabel","BpmnSearchProvider","elementRegistry","searchPad","canvas","_elementRegistry","_canvas","registerProvider","$inject","prototype","find","pattern","rootElement","getRootElement","elements","element","labelTarget","primaryTokens","matchAndSplit","secondaryTokens","id","hasMatched","tokens","matched","t","length","text","originalText","toLowerCase","i","indexOf","push","normal","substr"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/search/BpmnSearchProvider.js"],"sourcesContent":["import {\n  map,\n  filter,\n  sortBy\n} from 'min-dash';\n\nimport {\n  getLabel\n} from '../label-editing/LabelUtil';\n\n\n/**\n * Provides ability to search through BPMN elements\n */\nexport default function BpmnSearchProvider(elementRegistry, searchPad, canvas) {\n\n  this._elementRegistry = elementRegistry;\n  this._canvas = canvas;\n\n  searchPad.registerProvider(this);\n}\n\nBpmnSearchProvider.$inject = [\n  'elementRegistry',\n  'searchPad',\n  'canvas'\n];\n\n\n/**\n * Finds all elements that match given pattern\n *\n * <Result> :\n *  {\n *    primaryTokens: <Array<Token>>,\n *    secondaryTokens: <Array<Token>>,\n *    element: <Element>\n *  }\n *\n * <Token> :\n *  {\n *    normal|matched: <string>\n *  }\n *\n * @param  {string} pattern\n * @return {Array<Result>}\n */\nBpmnSearchProvider.prototype.find = function(pattern) {\n  var rootElement = this._canvas.getRootElement();\n\n  var elements = this._elementRegistry.filter(function(element) {\n    if (element.labelTarget) {\n      return false;\n    }\n    return true;\n  });\n\n  // do not include root element\n  elements = filter(elements, function(element) {\n    return element !== rootElement;\n  });\n\n  elements = map(elements, function(element) {\n    return {\n      primaryTokens: matchAndSplit(getLabel(element), pattern),\n      secondaryTokens: matchAndSplit(element.id, pattern),\n      element: element\n    };\n  });\n\n  // exclude non-matched elements\n  elements = filter(elements, function(element) {\n    return hasMatched(element.primaryTokens) || hasMatched(element.secondaryTokens);\n  });\n\n  elements = sortBy(elements, function(element) {\n    return getLabel(element.element) + element.element.id;\n  });\n\n  return elements;\n};\n\n\nfunction hasMatched(tokens) {\n  var matched = filter(tokens, function(t) {\n    return !!t.matched;\n  });\n\n  return matched.length > 0;\n}\n\n\nfunction matchAndSplit(text, pattern) {\n  var tokens = [],\n      originalText = text;\n\n  if (!text) {\n    return tokens;\n  }\n\n  text = text.toLowerCase();\n  pattern = pattern.toLowerCase();\n\n  var i = text.indexOf(pattern);\n\n  if (i > -1) {\n    if (i !== 0) {\n      tokens.push({\n        normal: originalText.substr(0, i)\n      });\n    }\n\n    tokens.push({\n      matched: originalText.substr(i, pattern.length)\n    });\n\n    if (pattern.length + i < text.length) {\n      tokens.push({\n        normal: originalText.substr(pattern.length + i, text.length)\n      });\n    }\n  } else {\n    tokens.push({\n      normal: originalText\n    });\n  }\n\n  return tokens;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}