{"ast":null,"code":"import { assign, forEach, isString, pick } from 'min-dash';\nimport { getDi } from '../../../util/ModelUtil';\nimport { isLabel } from '../../../util/LabelUtil';\nvar DEFAULT_COLORS = {\n  fill: undefined,\n  stroke: undefined\n};\nexport default function SetColorHandler(commandStack) {\n  this._commandStack = commandStack;\n\n  this._normalizeColor = function (color) {\n    // Remove color for falsy values.\n    if (!color) {\n      return undefined;\n    }\n\n    if (isString(color)) {\n      var hexColor = colorToHex(color);\n\n      if (hexColor) {\n        return hexColor;\n      }\n    }\n\n    throw new Error('invalid color value: ' + color);\n  };\n}\nSetColorHandler.$inject = ['commandStack'];\n\nSetColorHandler.prototype.postExecute = function (context) {\n  var elements = context.elements,\n      colors = context.colors || DEFAULT_COLORS;\n  var self = this;\n  var di = {};\n\n  if ('fill' in colors) {\n    assign(di, {\n      'background-color': this._normalizeColor(colors.fill)\n    });\n  }\n\n  if ('stroke' in colors) {\n    assign(di, {\n      'border-color': this._normalizeColor(colors.stroke)\n    });\n  }\n\n  forEach(elements, function (element) {\n    var assignedDi = isConnection(element) ? pick(di, ['border-color']) : di; // TODO @barmac: remove once we drop bpmn.io properties\n\n    ensureLegacySupport(assignedDi);\n\n    if (isLabel(element)) {\n      // set label colors as bpmndi:BPMNLabel#color\n      self._commandStack.execute('element.updateModdleProperties', {\n        element: element,\n        moddleElement: getDi(element).label,\n        properties: {\n          color: di['border-color']\n        }\n      });\n    } else {\n      // set colors bpmndi:BPMNEdge or bpmndi:BPMNShape\n      self._commandStack.execute('element.updateProperties', {\n        element: element,\n        properties: {\n          di: assignedDi\n        }\n      });\n    }\n  });\n};\n/**\r\n * Convert color from rgb(a)/hsl to hex. Returns `null` for unknown color names and for colors\r\n * with alpha less than 1.0. This depends on `<canvas>` serialization of the `context.fillStyle`.\r\n * Cf. https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-fillstyle\r\n *\r\n * @example\r\n * ```js\r\n * var color = 'fuchsia';\r\n * console.log(colorToHex(color));\r\n * // \"#ff00ff\"\r\n * color = 'rgba(1,2,3,0.4)';\r\n * console.log(colorToHex(color));\r\n * // null\r\n * ```\r\n *\r\n * @param {string} color\r\n * @returns {string|null}\r\n */\n\n\nfunction colorToHex(color) {\n  var context = document.createElement('canvas').getContext('2d'); // (0) Start with transparent to account for browser default values.\n\n  context.fillStyle = 'transparent'; // (1) Assign color so that it's serialized.\n\n  context.fillStyle = color; // (2) Return null for non-hex serialization result.\n\n  return /^#[0-9a-fA-F]{6}$/.test(context.fillStyle) ? context.fillStyle : null;\n}\n\nfunction isConnection(element) {\n  return !!element.waypoints;\n}\n/**\r\n * Add legacy properties if required.\r\n * @param {{ 'border-color': string?, 'background-color': string? }} di\r\n */\n\n\nfunction ensureLegacySupport(di) {\n  if ('border-color' in di) {\n    di.stroke = di['border-color'];\n  }\n\n  if ('background-color' in di) {\n    di.fill = di['background-color'];\n  }\n}","map":{"version":3,"names":["assign","forEach","isString","pick","getDi","isLabel","DEFAULT_COLORS","fill","undefined","stroke","SetColorHandler","commandStack","_commandStack","_normalizeColor","color","hexColor","colorToHex","Error","$inject","prototype","postExecute","context","elements","colors","self","di","element","assignedDi","isConnection","ensureLegacySupport","execute","moddleElement","label","properties","document","createElement","getContext","fillStyle","test","waypoints"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/modeling/cmd/SetColorHandler.js"],"sourcesContent":["import {\r\n  assign,\r\n  forEach,\r\n  isString,\r\n  pick\r\n} from 'min-dash';\r\n\r\nimport {\r\n  getDi\r\n} from '../../../util/ModelUtil';\r\n\r\nimport {\r\n  isLabel\r\n} from '../../../util/LabelUtil';\r\n\r\nvar DEFAULT_COLORS = {\r\n  fill: undefined,\r\n  stroke: undefined\r\n};\r\n\r\n\r\nexport default function SetColorHandler(commandStack) {\r\n  this._commandStack = commandStack;\r\n\r\n  this._normalizeColor = function(color) {\r\n\r\n    // Remove color for falsy values.\r\n    if (!color) {\r\n      return undefined;\r\n    }\r\n\r\n    if (isString(color)) {\r\n      var hexColor = colorToHex(color);\r\n\r\n      if (hexColor) {\r\n        return hexColor;\r\n      }\r\n    }\r\n\r\n    throw new Error('invalid color value: ' + color);\r\n  };\r\n}\r\n\r\nSetColorHandler.$inject = [\r\n  'commandStack'\r\n];\r\n\r\n\r\nSetColorHandler.prototype.postExecute = function(context) {\r\n  var elements = context.elements,\r\n      colors = context.colors || DEFAULT_COLORS;\r\n\r\n  var self = this;\r\n\r\n  var di = {};\r\n\r\n  if ('fill' in colors) {\r\n    assign(di, {\r\n      'background-color': this._normalizeColor(colors.fill) });\r\n  }\r\n\r\n  if ('stroke' in colors) {\r\n    assign(di, {\r\n      'border-color': this._normalizeColor(colors.stroke) });\r\n  }\r\n\r\n  forEach(elements, function(element) {\r\n    var assignedDi = isConnection(element) ? pick(di, [ 'border-color' ]) : di;\r\n\r\n    // TODO @barmac: remove once we drop bpmn.io properties\r\n    ensureLegacySupport(assignedDi);\r\n\r\n    if (isLabel(element)) {\r\n\r\n      // set label colors as bpmndi:BPMNLabel#color\r\n      self._commandStack.execute('element.updateModdleProperties', {\r\n        element: element,\r\n        moddleElement: getDi(element).label,\r\n        properties: {\r\n          color: di['border-color']\r\n        }\r\n      });\r\n    } else {\r\n\r\n      // set colors bpmndi:BPMNEdge or bpmndi:BPMNShape\r\n      self._commandStack.execute('element.updateProperties', {\r\n        element: element,\r\n        properties: {\r\n          di: assignedDi\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n};\r\n\r\n/**\r\n * Convert color from rgb(a)/hsl to hex. Returns `null` for unknown color names and for colors\r\n * with alpha less than 1.0. This depends on `<canvas>` serialization of the `context.fillStyle`.\r\n * Cf. https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-fillstyle\r\n *\r\n * @example\r\n * ```js\r\n * var color = 'fuchsia';\r\n * console.log(colorToHex(color));\r\n * // \"#ff00ff\"\r\n * color = 'rgba(1,2,3,0.4)';\r\n * console.log(colorToHex(color));\r\n * // null\r\n * ```\r\n *\r\n * @param {string} color\r\n * @returns {string|null}\r\n */\r\nfunction colorToHex(color) {\r\n  var context = document.createElement('canvas').getContext('2d');\r\n\r\n  // (0) Start with transparent to account for browser default values.\r\n  context.fillStyle = 'transparent';\r\n\r\n  // (1) Assign color so that it's serialized.\r\n  context.fillStyle = color;\r\n\r\n  // (2) Return null for non-hex serialization result.\r\n  return /^#[0-9a-fA-F]{6}$/.test(context.fillStyle) ? context.fillStyle : null;\r\n}\r\n\r\nfunction isConnection(element) {\r\n  return !!element.waypoints;\r\n}\r\n\r\n/**\r\n * Add legacy properties if required.\r\n * @param {{ 'border-color': string?, 'background-color': string? }} di\r\n */\r\nfunction ensureLegacySupport(di) {\r\n  if ('border-color' in di) {\r\n    di.stroke = di['border-color'];\r\n  }\r\n\r\n  if ('background-color' in di) {\r\n    di.fill = di['background-color'];\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}