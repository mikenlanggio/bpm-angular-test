{"ast":null,"code":"import { forEach } from 'min-dash';\n/**\n * Return direction given axis and delta.\n *\n * @param {string} axis\n * @param {number} delta\n *\n * @return {string}\n */\n\nexport function getDirection(axis, delta) {\n  if (axis === 'x') {\n    if (delta > 0) {\n      return 'e';\n    }\n\n    if (delta < 0) {\n      return 'w';\n    }\n  }\n\n  if (axis === 'y') {\n    if (delta > 0) {\n      return 's';\n    }\n\n    if (delta < 0) {\n      return 'n';\n    }\n  }\n\n  return null;\n}\n/**\n * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start\n * or end is to be moved or resized.\n *\n * @param {Array<djs.model.Shape} movingShapes\n * @param {Array<djs.model.Shape} resizingShapes\n *\n * @returns {Array<djs.model.Connection>}\n */\n\nexport function getWaypointsUpdatingConnections(movingShapes, resizingShapes) {\n  var waypointsUpdatingConnections = [];\n  forEach(movingShapes.concat(resizingShapes), function (shape) {\n    var incoming = shape.incoming,\n        outgoing = shape.outgoing;\n    forEach(incoming.concat(outgoing), function (connection) {\n      var source = connection.source,\n          target = connection.target;\n\n      if (includes(movingShapes, source) || includes(movingShapes, target) || includes(resizingShapes, source) || includes(resizingShapes, target)) {\n        if (!includes(waypointsUpdatingConnections, connection)) {\n          waypointsUpdatingConnections.push(connection);\n        }\n      }\n    });\n  });\n  return waypointsUpdatingConnections;\n}\n\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}\n/**\n * Resize bounds.\n *\n * @param {Object} bounds\n * @param {number} bounds.x\n * @param {number} bounds.y\n * @param {number} bounds.width\n * @param {number} bounds.height\n * @param {string} direction\n * @param {Object} delta\n * @param {number} delta.x\n * @param {number} delta.y\n *\n * @return {Object}\n */\n\n\nexport function resizeBounds(bounds, direction, delta) {\n  var x = bounds.x,\n      y = bounds.y,\n      width = bounds.width,\n      height = bounds.height,\n      dx = delta.x,\n      dy = delta.y;\n\n  switch (direction) {\n    case 'n':\n      return {\n        x: x,\n        y: y + dy,\n        width: width,\n        height: height - dy\n      };\n\n    case 's':\n      return {\n        x: x,\n        y: y,\n        width: width,\n        height: height + dy\n      };\n\n    case 'w':\n      return {\n        x: x + dx,\n        y: y,\n        width: width - dx,\n        height: height\n      };\n\n    case 'e':\n      return {\n        x: x,\n        y: y,\n        width: width + dx,\n        height: height\n      };\n\n    default:\n      throw new Error('unknown direction: ' + direction);\n  }\n}","map":{"version":3,"names":["forEach","getDirection","axis","delta","getWaypointsUpdatingConnections","movingShapes","resizingShapes","waypointsUpdatingConnections","concat","shape","incoming","outgoing","connection","source","target","includes","push","array","item","indexOf","resizeBounds","bounds","direction","x","y","width","height","dx","dy","Error"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/diagram-js/lib/features/space-tool/SpaceUtil.js"],"sourcesContent":["import { forEach } from 'min-dash';\n\n/**\n * Return direction given axis and delta.\n *\n * @param {string} axis\n * @param {number} delta\n *\n * @return {string}\n */\nexport function getDirection(axis, delta) {\n\n  if (axis === 'x') {\n    if (delta > 0) {\n      return 'e';\n    }\n\n    if (delta < 0) {\n      return 'w';\n    }\n  }\n\n  if (axis === 'y') {\n    if (delta > 0) {\n      return 's';\n    }\n\n    if (delta < 0) {\n      return 'n';\n    }\n  }\n\n  return null;\n}\n\n/**\n * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start\n * or end is to be moved or resized.\n *\n * @param {Array<djs.model.Shape} movingShapes\n * @param {Array<djs.model.Shape} resizingShapes\n *\n * @returns {Array<djs.model.Connection>}\n */\nexport function getWaypointsUpdatingConnections(movingShapes, resizingShapes) {\n  var waypointsUpdatingConnections = [];\n\n  forEach(movingShapes.concat(resizingShapes), function(shape) {\n    var incoming = shape.incoming,\n        outgoing = shape.outgoing;\n\n    forEach(incoming.concat(outgoing), function(connection) {\n      var source = connection.source,\n          target = connection.target;\n\n      if (includes(movingShapes, source) ||\n        includes(movingShapes, target) ||\n        includes(resizingShapes, source) ||\n        includes(resizingShapes, target)) {\n\n        if (!includes(waypointsUpdatingConnections, connection)) {\n          waypointsUpdatingConnections.push(connection);\n        }\n      }\n    });\n  });\n\n  return waypointsUpdatingConnections;\n}\n\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\n * Resize bounds.\n *\n * @param {Object} bounds\n * @param {number} bounds.x\n * @param {number} bounds.y\n * @param {number} bounds.width\n * @param {number} bounds.height\n * @param {string} direction\n * @param {Object} delta\n * @param {number} delta.x\n * @param {number} delta.y\n *\n * @return {Object}\n */\nexport function resizeBounds(bounds, direction, delta) {\n  var x = bounds.x,\n      y = bounds.y,\n      width = bounds.width,\n      height = bounds.height,\n      dx = delta.x,\n      dy = delta.y;\n\n  switch (direction) {\n  case 'n':\n    return {\n      x: x,\n      y: y + dy,\n      width: width,\n      height: height - dy\n    };\n  case 's':\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height + dy\n    };\n  case 'w':\n    return {\n      x: x + dx,\n      y: y,\n      width: width - dx,\n      height: height\n    };\n  case 'e':\n    return {\n      x: x,\n      y: y,\n      width: width + dx,\n      height: height\n    };\n  default:\n    throw new Error('unknown direction: ' + direction);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}