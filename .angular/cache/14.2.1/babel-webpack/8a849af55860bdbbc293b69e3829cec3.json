{"ast":null,"code":"import inherits from 'inherits-browser';\nimport BaseModeling from 'diagram-js/lib/features/modeling/Modeling';\nimport UpdateModdlePropertiesHandler from './cmd/UpdateModdlePropertiesHandler';\nimport UpdatePropertiesHandler from './cmd/UpdatePropertiesHandler';\nimport UpdateCanvasRootHandler from './cmd/UpdateCanvasRootHandler';\nimport AddLaneHandler from './cmd/AddLaneHandler';\nimport SplitLaneHandler from './cmd/SplitLaneHandler';\nimport ResizeLaneHandler from './cmd/ResizeLaneHandler';\nimport UpdateFlowNodeRefsHandler from './cmd/UpdateFlowNodeRefsHandler';\nimport IdClaimHandler from './cmd/IdClaimHandler';\nimport SetColorHandler from './cmd/SetColorHandler';\nimport UpdateLabelHandler from '../label-editing/cmd/UpdateLabelHandler';\n/**\n * BPMN 2.0 modeling features activator\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n * @param {BpmnRules} bpmnRules\n */\n\nexport default function Modeling(eventBus, elementFactory, commandStack, bpmnRules) {\n  BaseModeling.call(this, eventBus, elementFactory, commandStack);\n  this._bpmnRules = bpmnRules;\n}\ninherits(Modeling, BaseModeling);\nModeling.$inject = ['eventBus', 'elementFactory', 'commandStack', 'bpmnRules'];\n\nModeling.prototype.getHandlers = function () {\n  var handlers = BaseModeling.prototype.getHandlers.call(this);\n  handlers['element.updateModdleProperties'] = UpdateModdlePropertiesHandler;\n  handlers['element.updateProperties'] = UpdatePropertiesHandler;\n  handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;\n  handlers['lane.add'] = AddLaneHandler;\n  handlers['lane.resize'] = ResizeLaneHandler;\n  handlers['lane.split'] = SplitLaneHandler;\n  handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;\n  handlers['id.updateClaim'] = IdClaimHandler;\n  handlers['element.setColor'] = SetColorHandler;\n  handlers['element.updateLabel'] = UpdateLabelHandler;\n  return handlers;\n};\n\nModeling.prototype.updateLabel = function (element, newLabel, newBounds, hints) {\n  this._commandStack.execute('element.updateLabel', {\n    element: element,\n    newLabel: newLabel,\n    newBounds: newBounds,\n    hints: hints || {}\n  });\n};\n\nModeling.prototype.connect = function (source, target, attrs, hints) {\n  var bpmnRules = this._bpmnRules;\n\n  if (!attrs) {\n    attrs = bpmnRules.canConnect(source, target);\n  }\n\n  if (!attrs) {\n    return;\n  }\n\n  return this.createConnection(source, target, attrs, source.parent, hints);\n};\n\nModeling.prototype.updateModdleProperties = function (element, moddleElement, properties) {\n  this._commandStack.execute('element.updateModdleProperties', {\n    element: element,\n    moddleElement: moddleElement,\n    properties: properties\n  });\n};\n\nModeling.prototype.updateProperties = function (element, properties) {\n  this._commandStack.execute('element.updateProperties', {\n    element: element,\n    properties: properties\n  });\n};\n\nModeling.prototype.resizeLane = function (laneShape, newBounds, balanced) {\n  this._commandStack.execute('lane.resize', {\n    shape: laneShape,\n    newBounds: newBounds,\n    balanced: balanced\n  });\n};\n\nModeling.prototype.addLane = function (targetLaneShape, location) {\n  var context = {\n    shape: targetLaneShape,\n    location: location\n  };\n\n  this._commandStack.execute('lane.add', context);\n\n  return context.newLane;\n};\n\nModeling.prototype.splitLane = function (targetLane, count) {\n  this._commandStack.execute('lane.split', {\n    shape: targetLane,\n    count: count\n  });\n};\n/**\n * Transform the current diagram into a collaboration.\n *\n * @return {djs.model.Root} the new root element\n */\n\n\nModeling.prototype.makeCollaboration = function () {\n  var collaborationElement = this._create('root', {\n    type: 'bpmn:Collaboration'\n  });\n\n  var context = {\n    newRoot: collaborationElement\n  };\n\n  this._commandStack.execute('canvas.updateRoot', context);\n\n  return collaborationElement;\n};\n\nModeling.prototype.updateLaneRefs = function (flowNodeShapes, laneShapes) {\n  this._commandStack.execute('lane.updateRefs', {\n    flowNodeShapes: flowNodeShapes,\n    laneShapes: laneShapes\n  });\n};\n/**\n * Transform the current diagram into a process.\n *\n * @return {djs.model.Root} the new root element\n */\n\n\nModeling.prototype.makeProcess = function () {\n  var processElement = this._create('root', {\n    type: 'bpmn:Process'\n  });\n\n  var context = {\n    newRoot: processElement\n  };\n\n  this._commandStack.execute('canvas.updateRoot', context);\n};\n\nModeling.prototype.claimId = function (id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement,\n    claiming: true\n  });\n};\n\nModeling.prototype.unclaimId = function (id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement\n  });\n};\n\nModeling.prototype.setColor = function (elements, colors) {\n  if (!elements.length) {\n    elements = [elements];\n  }\n\n  this._commandStack.execute('element.setColor', {\n    elements: elements,\n    colors: colors\n  });\n};","map":{"version":3,"names":["inherits","BaseModeling","UpdateModdlePropertiesHandler","UpdatePropertiesHandler","UpdateCanvasRootHandler","AddLaneHandler","SplitLaneHandler","ResizeLaneHandler","UpdateFlowNodeRefsHandler","IdClaimHandler","SetColorHandler","UpdateLabelHandler","Modeling","eventBus","elementFactory","commandStack","bpmnRules","call","_bpmnRules","$inject","prototype","getHandlers","handlers","updateLabel","element","newLabel","newBounds","hints","_commandStack","execute","connect","source","target","attrs","canConnect","createConnection","parent","updateModdleProperties","moddleElement","properties","updateProperties","resizeLane","laneShape","balanced","shape","addLane","targetLaneShape","location","context","newLane","splitLane","targetLane","count","makeCollaboration","collaborationElement","_create","type","newRoot","updateLaneRefs","flowNodeShapes","laneShapes","makeProcess","processElement","claimId","id","claiming","unclaimId","setColor","elements","colors","length"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/modeling/Modeling.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport BaseModeling from 'diagram-js/lib/features/modeling/Modeling';\n\nimport UpdateModdlePropertiesHandler from './cmd/UpdateModdlePropertiesHandler';\nimport UpdatePropertiesHandler from './cmd/UpdatePropertiesHandler';\nimport UpdateCanvasRootHandler from './cmd/UpdateCanvasRootHandler';\nimport AddLaneHandler from './cmd/AddLaneHandler';\nimport SplitLaneHandler from './cmd/SplitLaneHandler';\nimport ResizeLaneHandler from './cmd/ResizeLaneHandler';\nimport UpdateFlowNodeRefsHandler from './cmd/UpdateFlowNodeRefsHandler';\nimport IdClaimHandler from './cmd/IdClaimHandler';\nimport SetColorHandler from './cmd/SetColorHandler';\n\nimport UpdateLabelHandler from '../label-editing/cmd/UpdateLabelHandler';\n\n\n/**\n * BPMN 2.0 modeling features activator\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n * @param {BpmnRules} bpmnRules\n */\nexport default function Modeling(\n    eventBus, elementFactory, commandStack,\n    bpmnRules) {\n\n  BaseModeling.call(this, eventBus, elementFactory, commandStack);\n\n  this._bpmnRules = bpmnRules;\n}\n\ninherits(Modeling, BaseModeling);\n\nModeling.$inject = [\n  'eventBus',\n  'elementFactory',\n  'commandStack',\n  'bpmnRules'\n];\n\n\nModeling.prototype.getHandlers = function() {\n  var handlers = BaseModeling.prototype.getHandlers.call(this);\n\n  handlers['element.updateModdleProperties'] = UpdateModdlePropertiesHandler;\n  handlers['element.updateProperties'] = UpdatePropertiesHandler;\n  handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;\n  handlers['lane.add'] = AddLaneHandler;\n  handlers['lane.resize'] = ResizeLaneHandler;\n  handlers['lane.split'] = SplitLaneHandler;\n  handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;\n  handlers['id.updateClaim'] = IdClaimHandler;\n  handlers['element.setColor'] = SetColorHandler;\n  handlers['element.updateLabel'] = UpdateLabelHandler;\n\n  return handlers;\n};\n\n\nModeling.prototype.updateLabel = function(element, newLabel, newBounds, hints) {\n  this._commandStack.execute('element.updateLabel', {\n    element: element,\n    newLabel: newLabel,\n    newBounds: newBounds,\n    hints: hints || {}\n  });\n};\n\n\nModeling.prototype.connect = function(source, target, attrs, hints) {\n\n  var bpmnRules = this._bpmnRules;\n\n  if (!attrs) {\n    attrs = bpmnRules.canConnect(source, target);\n  }\n\n  if (!attrs) {\n    return;\n  }\n\n  return this.createConnection(source, target, attrs, source.parent, hints);\n};\n\n\nModeling.prototype.updateModdleProperties = function(element, moddleElement, properties) {\n  this._commandStack.execute('element.updateModdleProperties', {\n    element: element,\n    moddleElement: moddleElement,\n    properties: properties\n  });\n};\n\nModeling.prototype.updateProperties = function(element, properties) {\n  this._commandStack.execute('element.updateProperties', {\n    element: element,\n    properties: properties\n  });\n};\n\nModeling.prototype.resizeLane = function(laneShape, newBounds, balanced) {\n  this._commandStack.execute('lane.resize', {\n    shape: laneShape,\n    newBounds: newBounds,\n    balanced: balanced\n  });\n};\n\nModeling.prototype.addLane = function(targetLaneShape, location) {\n  var context = {\n    shape: targetLaneShape,\n    location: location\n  };\n\n  this._commandStack.execute('lane.add', context);\n\n  return context.newLane;\n};\n\nModeling.prototype.splitLane = function(targetLane, count) {\n  this._commandStack.execute('lane.split', {\n    shape: targetLane,\n    count: count\n  });\n};\n\n/**\n * Transform the current diagram into a collaboration.\n *\n * @return {djs.model.Root} the new root element\n */\nModeling.prototype.makeCollaboration = function() {\n\n  var collaborationElement = this._create('root', {\n    type: 'bpmn:Collaboration'\n  });\n\n  var context = {\n    newRoot: collaborationElement\n  };\n\n  this._commandStack.execute('canvas.updateRoot', context);\n\n  return collaborationElement;\n};\n\nModeling.prototype.updateLaneRefs = function(flowNodeShapes, laneShapes) {\n\n  this._commandStack.execute('lane.updateRefs', {\n    flowNodeShapes: flowNodeShapes,\n    laneShapes: laneShapes\n  });\n};\n\n/**\n * Transform the current diagram into a process.\n *\n * @return {djs.model.Root} the new root element\n */\nModeling.prototype.makeProcess = function() {\n\n  var processElement = this._create('root', {\n    type: 'bpmn:Process'\n  });\n\n  var context = {\n    newRoot: processElement\n  };\n\n  this._commandStack.execute('canvas.updateRoot', context);\n};\n\n\nModeling.prototype.claimId = function(id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement,\n    claiming: true\n  });\n};\n\n\nModeling.prototype.unclaimId = function(id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement\n  });\n};\n\nModeling.prototype.setColor = function(elements, colors) {\n  if (!elements.length) {\n    elements = [ elements ];\n  }\n\n  this._commandStack.execute('element.setColor', {\n    elements: elements,\n    colors: colors\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}