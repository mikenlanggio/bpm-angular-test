{"ast":null,"code":"import inherits from 'inherits-browser';\nimport { forEach, reduce } from 'min-dash';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { isEventSubProcess } from '../../../util/DiUtil';\n/**\n * BPMN-specific replace behavior.\n */\n\nexport default function ReplaceElementBehaviour(bpmnReplace, bpmnRules, elementRegistry, injector, modeling, selection) {\n  injector.invoke(CommandInterceptor, this);\n  this._bpmnReplace = bpmnReplace;\n  this._elementRegistry = elementRegistry;\n  this._selection = selection; // replace elements on create, e.g. during copy-paste\n\n  this.postExecuted(['elements.create'], 500, function (event) {\n    var context = event.context,\n        target = context.parent,\n        elements = context.elements;\n    var elementReplacements = reduce(elements, function (replacements, element) {\n      var canReplace = bpmnRules.canReplace([element], element.host || element.parent || target);\n      return canReplace ? replacements.concat(canReplace.replacements) : replacements;\n    }, []);\n\n    if (elementReplacements.length) {\n      this.replaceElements(elements, elementReplacements);\n    }\n  }, this); // replace elements on move\n\n  this.postExecuted(['elements.move'], 500, function (event) {\n    var context = event.context,\n        target = context.newParent,\n        newHost = context.newHost,\n        elements = [];\n    forEach(context.closure.topLevel, function (topLevelElements) {\n      if (isEventSubProcess(topLevelElements)) {\n        elements = elements.concat(topLevelElements.children);\n      } else {\n        elements = elements.concat(topLevelElements);\n      }\n    }); // set target to host if attaching\n\n    if (elements.length === 1 && newHost) {\n      target = newHost;\n    }\n\n    var canReplace = bpmnRules.canReplace(elements, target);\n\n    if (canReplace) {\n      this.replaceElements(elements, canReplace.replacements, newHost);\n    }\n  }, this); // update attachments on host replace\n\n  this.postExecute(['shape.replace'], 1500, function (e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape,\n        attachers = oldShape.attachers,\n        canReplace;\n\n    if (attachers && attachers.length) {\n      canReplace = bpmnRules.canReplace(attachers, newShape);\n      this.replaceElements(attachers, canReplace.replacements);\n    }\n  }, this); // keep ID on shape replace\n\n  this.postExecuted(['shape.replace'], 1500, function (e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape;\n    modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);\n    modeling.updateProperties(newShape, {\n      id: oldShape.id\n    });\n  });\n}\ninherits(ReplaceElementBehaviour, CommandInterceptor);\n\nReplaceElementBehaviour.prototype.replaceElements = function (elements, newElements) {\n  var elementRegistry = this._elementRegistry,\n      bpmnReplace = this._bpmnReplace,\n      selection = this._selection;\n  forEach(newElements, function (replacement) {\n    var newElement = {\n      type: replacement.newElementType\n    };\n    var oldElement = elementRegistry.get(replacement.oldElementId);\n    var idx = elements.indexOf(oldElement);\n    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, {\n      select: false\n    });\n  });\n\n  if (newElements) {\n    selection.select(elements);\n  }\n};\n\nReplaceElementBehaviour.$inject = ['bpmnReplace', 'bpmnRules', 'elementRegistry', 'injector', 'modeling', 'selection'];","map":{"version":3,"names":["inherits","forEach","reduce","CommandInterceptor","isEventSubProcess","ReplaceElementBehaviour","bpmnReplace","bpmnRules","elementRegistry","injector","modeling","selection","invoke","_bpmnReplace","_elementRegistry","_selection","postExecuted","event","context","target","parent","elements","elementReplacements","replacements","element","canReplace","host","concat","length","replaceElements","newParent","newHost","closure","topLevel","topLevelElements","children","postExecute","e","oldShape","newShape","attachers","unclaimId","businessObject","id","updateProperties","prototype","newElements","replacement","newElement","type","newElementType","oldElement","get","oldElementId","idx","indexOf","replaceElement","select","$inject"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/modeling/behavior/ReplaceElementBehaviour.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport { forEach, reduce } from 'min-dash';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport { isEventSubProcess } from '../../../util/DiUtil';\n\n\n/**\n * BPMN-specific replace behavior.\n */\nexport default function ReplaceElementBehaviour(\n    bpmnReplace,\n    bpmnRules,\n    elementRegistry,\n    injector,\n    modeling,\n    selection\n) {\n  injector.invoke(CommandInterceptor, this);\n\n  this._bpmnReplace = bpmnReplace;\n  this._elementRegistry = elementRegistry;\n  this._selection = selection;\n\n  // replace elements on create, e.g. during copy-paste\n  this.postExecuted([ 'elements.create' ], 500, function(event) {\n    var context = event.context,\n        target = context.parent,\n        elements = context.elements;\n\n    var elementReplacements = reduce(elements, function(replacements, element) {\n      var canReplace = bpmnRules.canReplace([ element ], element.host || element.parent || target);\n\n      return canReplace ? replacements.concat(canReplace.replacements) : replacements;\n    }, []);\n\n    if (elementReplacements.length) {\n      this.replaceElements(elements, elementReplacements);\n    }\n  }, this);\n\n  // replace elements on move\n  this.postExecuted([ 'elements.move' ], 500, function(event) {\n    var context = event.context,\n        target = context.newParent,\n        newHost = context.newHost,\n        elements = [];\n\n    forEach(context.closure.topLevel, function(topLevelElements) {\n      if (isEventSubProcess(topLevelElements)) {\n        elements = elements.concat(topLevelElements.children);\n      } else {\n        elements = elements.concat(topLevelElements);\n      }\n    });\n\n    // set target to host if attaching\n    if (elements.length === 1 && newHost) {\n      target = newHost;\n    }\n\n    var canReplace = bpmnRules.canReplace(elements, target);\n\n    if (canReplace) {\n      this.replaceElements(elements, canReplace.replacements, newHost);\n    }\n  }, this);\n\n  // update attachments on host replace\n  this.postExecute([ 'shape.replace' ], 1500, function(e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape,\n        attachers = oldShape.attachers,\n        canReplace;\n\n    if (attachers && attachers.length) {\n      canReplace = bpmnRules.canReplace(attachers, newShape);\n\n      this.replaceElements(attachers, canReplace.replacements);\n    }\n\n  }, this);\n\n  // keep ID on shape replace\n  this.postExecuted([ 'shape.replace' ], 1500, function(e) {\n    var context = e.context,\n        oldShape = context.oldShape,\n        newShape = context.newShape;\n\n    modeling.unclaimId(oldShape.businessObject.id, oldShape.businessObject);\n    modeling.updateProperties(newShape, { id: oldShape.id });\n  });\n}\n\ninherits(ReplaceElementBehaviour, CommandInterceptor);\n\nReplaceElementBehaviour.prototype.replaceElements = function(elements, newElements) {\n  var elementRegistry = this._elementRegistry,\n      bpmnReplace = this._bpmnReplace,\n      selection = this._selection;\n\n  forEach(newElements, function(replacement) {\n    var newElement = {\n      type: replacement.newElementType\n    };\n\n    var oldElement = elementRegistry.get(replacement.oldElementId);\n\n    var idx = elements.indexOf(oldElement);\n\n    elements[idx] = bpmnReplace.replaceElement(oldElement, newElement, { select: false });\n  });\n\n  if (newElements) {\n    selection.select(elements);\n  }\n};\n\nReplaceElementBehaviour.$inject = [\n  'bpmnReplace',\n  'bpmnRules',\n  'elementRegistry',\n  'injector',\n  'modeling',\n  'selection'\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}