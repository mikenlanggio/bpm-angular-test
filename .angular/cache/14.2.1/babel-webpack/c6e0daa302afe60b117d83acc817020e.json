{"ast":null,"code":"import inherits from 'inherits-browser';\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\nimport { is } from '../../../util/ModelUtil';\nvar LOW_PRIORITY = 500,\n    HIGH_PRIORITY = 5000;\n/**\n * BPMN specific delete lane behavior\n */\n\nexport default function UpdateFlowNodeRefsBehavior(eventBus, modeling, translate) {\n  CommandInterceptor.call(this, eventBus);\n  /**\n   * Ok, this is it:\n   *\n   * We have to update the Lane#flowNodeRefs _and_\n   * FlowNode#lanes with every FlowNode move/resize and\n   * Lane move/resize.\n   *\n   * We want to group that stuff to recompute containments\n   * as efficient as possible.\n   *\n   * Yea!\n   */\n  // the update context\n\n  var context;\n\n  function initContext() {\n    context = context || new UpdateContext();\n    context.enter();\n    return context;\n  }\n\n  function getContext() {\n    if (!context) {\n      throw new Error(translate('out of bounds release'));\n    }\n\n    return context;\n  }\n\n  function releaseContext() {\n    if (!context) {\n      throw new Error(translate('out of bounds release'));\n    }\n\n    var triggerUpdate = context.leave();\n\n    if (triggerUpdate) {\n      modeling.updateLaneRefs(context.flowNodes, context.lanes);\n      context = null;\n    }\n\n    return triggerUpdate;\n  }\n\n  var laneRefUpdateEvents = ['spaceTool', 'lane.add', 'lane.resize', 'lane.split', 'elements.create', 'elements.delete', 'elements.move', 'shape.create', 'shape.delete', 'shape.move', 'shape.resize']; // listen to a lot of stuff to group lane updates\n\n  this.preExecute(laneRefUpdateEvents, HIGH_PRIORITY, function (event) {\n    initContext();\n  });\n  this.postExecuted(laneRefUpdateEvents, LOW_PRIORITY, function (event) {\n    releaseContext();\n  }); // Mark flow nodes + lanes that need an update\n\n  this.preExecute(['shape.create', 'shape.move', 'shape.delete', 'shape.resize'], function (event) {\n    var context = event.context,\n        shape = context.shape;\n    var updateContext = getContext(); // no need to update labels\n\n    if (shape.labelTarget) {\n      return;\n    }\n\n    if (is(shape, 'bpmn:Lane')) {\n      updateContext.addLane(shape);\n    }\n\n    if (is(shape, 'bpmn:FlowNode')) {\n      updateContext.addFlowNode(shape);\n    }\n  });\n}\nUpdateFlowNodeRefsBehavior.$inject = ['eventBus', 'modeling', 'translate'];\ninherits(UpdateFlowNodeRefsBehavior, CommandInterceptor);\n\nfunction UpdateContext() {\n  this.flowNodes = [];\n  this.lanes = [];\n  this.counter = 0;\n\n  this.addLane = function (lane) {\n    this.lanes.push(lane);\n  };\n\n  this.addFlowNode = function (flowNode) {\n    this.flowNodes.push(flowNode);\n  };\n\n  this.enter = function () {\n    this.counter++;\n  };\n\n  this.leave = function () {\n    this.counter--;\n    return !this.counter;\n  };\n}","map":{"version":3,"names":["inherits","CommandInterceptor","is","LOW_PRIORITY","HIGH_PRIORITY","UpdateFlowNodeRefsBehavior","eventBus","modeling","translate","call","context","initContext","UpdateContext","enter","getContext","Error","releaseContext","triggerUpdate","leave","updateLaneRefs","flowNodes","lanes","laneRefUpdateEvents","preExecute","event","postExecuted","shape","updateContext","labelTarget","addLane","addFlowNode","$inject","counter","lane","push","flowNode"],"sources":["E:/Old_PC/Study/Angular/test-bpm/node_modules/bpmn-js/lib/features/modeling/behavior/UpdateFlowNodeRefsBehavior.js"],"sourcesContent":["import inherits from 'inherits-browser';\n\nimport CommandInterceptor from 'diagram-js/lib/command/CommandInterceptor';\n\nimport {\n  is\n} from '../../../util/ModelUtil';\n\nvar LOW_PRIORITY = 500,\n    HIGH_PRIORITY = 5000;\n\n\n/**\n * BPMN specific delete lane behavior\n */\nexport default function UpdateFlowNodeRefsBehavior(eventBus, modeling, translate) {\n\n  CommandInterceptor.call(this, eventBus);\n\n  /**\n   * Ok, this is it:\n   *\n   * We have to update the Lane#flowNodeRefs _and_\n   * FlowNode#lanes with every FlowNode move/resize and\n   * Lane move/resize.\n   *\n   * We want to group that stuff to recompute containments\n   * as efficient as possible.\n   *\n   * Yea!\n   */\n\n  // the update context\n  var context;\n\n\n  function initContext() {\n    context = context || new UpdateContext();\n    context.enter();\n\n    return context;\n  }\n\n  function getContext() {\n    if (!context) {\n      throw new Error(translate('out of bounds release'));\n    }\n\n    return context;\n  }\n\n  function releaseContext() {\n\n    if (!context) {\n      throw new Error(translate('out of bounds release'));\n    }\n\n    var triggerUpdate = context.leave();\n\n    if (triggerUpdate) {\n      modeling.updateLaneRefs(context.flowNodes, context.lanes);\n\n      context = null;\n    }\n\n    return triggerUpdate;\n  }\n\n\n  var laneRefUpdateEvents = [\n    'spaceTool',\n    'lane.add',\n    'lane.resize',\n    'lane.split',\n    'elements.create',\n    'elements.delete',\n    'elements.move',\n    'shape.create',\n    'shape.delete',\n    'shape.move',\n    'shape.resize'\n  ];\n\n\n  // listen to a lot of stuff to group lane updates\n\n  this.preExecute(laneRefUpdateEvents, HIGH_PRIORITY, function(event) {\n    initContext();\n  });\n\n  this.postExecuted(laneRefUpdateEvents, LOW_PRIORITY, function(event) {\n    releaseContext();\n  });\n\n\n  // Mark flow nodes + lanes that need an update\n\n  this.preExecute([\n    'shape.create',\n    'shape.move',\n    'shape.delete',\n    'shape.resize'\n  ], function(event) {\n\n    var context = event.context,\n        shape = context.shape;\n\n    var updateContext = getContext();\n\n    // no need to update labels\n    if (shape.labelTarget) {\n      return;\n    }\n\n    if (is(shape, 'bpmn:Lane')) {\n      updateContext.addLane(shape);\n    }\n\n    if (is(shape, 'bpmn:FlowNode')) {\n      updateContext.addFlowNode(shape);\n    }\n  });\n}\n\nUpdateFlowNodeRefsBehavior.$inject = [\n  'eventBus',\n  'modeling' ,\n  'translate'\n];\n\ninherits(UpdateFlowNodeRefsBehavior, CommandInterceptor);\n\n\nfunction UpdateContext() {\n\n  this.flowNodes = [];\n  this.lanes = [];\n\n  this.counter = 0;\n\n  this.addLane = function(lane) {\n    this.lanes.push(lane);\n  };\n\n  this.addFlowNode = function(flowNode) {\n    this.flowNodes.push(flowNode);\n  };\n\n  this.enter = function() {\n    this.counter++;\n  };\n\n  this.leave = function() {\n    this.counter--;\n\n    return !this.counter;\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}